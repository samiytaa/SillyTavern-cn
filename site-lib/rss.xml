<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[SillyTavern]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>SillyTavern</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 22 Dec 2024 21:57:27 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 22 Dec 2024 21:56:31 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[SillyTavern设置中文]]></title><description><![CDATA[<img alt="image" src="img/20241222145931652.png" target="_self">]]></description><link>sillytavern/sillytavern设置中文.html</link><guid isPermaLink="false">SillyTavern/SillyTavern设置中文.md</guid><pubDate>Sun, 22 Dec 2024 21:54:52 GMT</pubDate><enclosure url="img/20241222145931652.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222145931652.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1.1 Windows]]></title><description><![CDATA[不要安装到任何 Windows 控制的文件夹中（如 Program Files、System32 等）。不要以管理员权限运行 Start.bat。Windows 7 无法安装，因为它无法运行 NodeJS 18.16。
安装 <a data-tooltip-position="top" aria-label="https://nodejs.org/en" rel="noopener nofollow" class="external-link is-unresolved" href="https://nodejs.org/en" target="_self">NodeJS</a>（推荐安装最新的 LTS 版本）。
<br>安装 <a data-tooltip-position="top" aria-label="https://gitforwindows.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://gitforwindows.org/" target="_self">Git for Windows</a>。
打开 Windows 资源管理器 (Win+E)。
浏览到或创建一个不受 Windows 控制或监控的文件夹。（例如：C:\MySpecialFolder）
在该文件夹中打开命令提示符：点击地址栏，输入 cmd，然后按回车。
命令提示符窗口打开后，输入以下命令之一并按回车： 对于 Release 分支：git clone https://github.com/SillyTavern/SillyTavern -b release
对于 Staging 分支：git clone https://github.com/SillyTavern/SillyTavern -b staging 克隆完成后，双击 Start.bat 以让 NodeJS 安装所需的依赖。
不要以管理员权限运行 **Start.bat**。
服务器启动后，SillyTavern 将在你的浏览器中打开。 在你的键盘上按 **WINDOWS + R** 打开运行对话框，然后运行以下命令来安装 git：
cmd /c winget install -e --id Git.Git 在你的键盘上按 **WINDOWS + E** 打开文件资源管理器，导航到你想要安装启动器的文件夹。在目标文件夹中，输入 cmd 到地址栏并按回车，然后运行以下命令：
git clone &lt;https://github.com/SillyTavern/SillyTavern-Launcher.git&gt; &amp;&amp; cd SillyTavern-Launcher &amp;&amp; start installer.bat <br>（这只允许在 GitHub Desktop 中使用 git，如果你也希望在命令行中使用 git，你还需要安装 <a data-tooltip-position="top" aria-label="https://gitforwindows.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://gitforwindows.org/" target="_self">Git for Windows</a>）
<br>
安装 <a data-tooltip-position="top" aria-label="https://nodejs.org/en" rel="noopener nofollow" class="external-link is-unresolved" href="https://nodejs.org/en" target="_self">NodeJS</a>（推荐安装最新的 LTS 版本）。 <br>
安装 <a data-tooltip-position="top" aria-label="https://central.github.com/deployments/desktop/desktop/latest/win32" rel="noopener nofollow" class="external-link is-unresolved" href="https://central.github.com/deployments/desktop/desktop/latest/win32" target="_self">GitHub Desktop</a>。 <br>
安装 GitHub Desktop 后，点击 Clone a repository from the internet....（注意：你 不需要 创建 GitHub 账户）。
<img alt="windows-1" src="img/20241222153636433.png" target="_self"> <br>
在菜单中，点击 URL 标签，输入以下 URL https://github.com/SillyTavern/SillyTavern，然后点击 Clone。你可以更改本地路径来设置 SillyTavern 下载的位置。
<img alt="windows-2" src="img/20241222153636434.png" target="_self"> 要打开 SillyTavern，使用 Windows 资源管理器浏览到你克隆的仓库文件夹。默认情况下，仓库会克隆到：C:\Users\[你的 Windows 用户名]\Documents\GitHub\SillyTavern。 <br>
双击 start.bat 文件。（注意：如果操作系统隐藏了 .bat 扩展名，文件名看起来可能只是 "Start"，你仍然双击它来运行 SillyTavern）
不要以管理员权限运行 **Start.bat**。
<img alt="windows-3" src="img/20241222153636435.png" target="_self"> 双击后，一个黑色的命令行窗口将会打开，SillyTavern 将开始安装所需的组件。 <br>
安装完成后，如果一切正常，命令行窗口应该如下所示，并且浏览器中会打开一个 SillyTavern 标签页：
<img alt="windows-4" src="img/20241222153636436.png" target="_self"> <br>
连接到任何一个 支持的<a data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5 API 连接</a> ，开始聊天吧！ ]]></description><link>sillytavern/1-安装/1.1-windows.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.1 Windows.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222153636433.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222153636433.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[在Android上使用Termux本地安装和运行SillyTavern]]></title><description><![CDATA[英文原版：Installing and running SillyTavern locally on Android using Termux.
SillyTavern is a modified version of TavernAI with a lot of new features.
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.org/STAI-Termux" target="_self">https://rentry.org/STAI-Termux</a>
SillyTavern 是一个修改版的 TavernAI，具有许多新功能。更多信息请访问：<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Cohee1207/SillyTavern" target="_self">https://github.com/Cohee1207/SillyTavern</a>为了能够安装和运行 SillyTavern，您需要一个 Linux 环境，Termux 是一个 Linux 环境的模拟器，因此它可以在 Android 上运行。<br>前往 <a rel="noopener nofollow" class="external-link is-unresolved" href="https://f-droid.org/en/packages/com.termux/" target="_self">https://f-droid.org/en/packages/com.termux/</a>，然后向下滚动页面，点击下载 apk 文件，之后进行安装。<br><img src="img/20241222154623641.png" target="_self">安装完成后，启动应用程序时，您应该会看到如下界面。<br><img src="img/20241222154623642.jpg" target="_self">接下来，您需要更新软件库并检查是否有可用的更新，如果有的话，请更新。在 Termux 中运行以下命令来进行更新，可以通过复制粘贴来执行。apt updateapt upgradepkg install esbuild如果提示您有更新可用，只需输入 y，然后等待更新完成。<br><img src="img/20241222154623643.jpg" target="_self">更新完成后，继续进行下一步。现在您已经安装了 Termux，下一步是安装所需的依赖项/工具，以帮助您安装和运行 TavernAI。首先是安装 Git，以便您能够使用 git clone 命令。在 Termux 中复制并粘贴以下命令，然后按回车键执行，pkg install git，这将安装 Git，安装完成后，继续进行下一步。<br><img src="img/20241222154623644.jpg" target="_self">安装好 Git 后，接下来的步骤是克隆 SillyTavern 的仓库。您可以使用以下命令来克隆仓库：git clone [GitHub - SillyTavern/SillyTavern: LLM Frontend for Power Users.](https://github.com/SillyTavern/SillyTavern)或者，如果您想使用开发分支（该分支有更多功能，并且更新更频繁），可以使用以下命令：git clone -b staging [GitHub - SillyTavern/SillyTavern: LLM Frontend for Power Users.](https://github.com/SillyTavern/SillyTavern)如果您已经在使用主分支，可以通过 cd SillyTavern &amp;&amp; git switch staging 切换到开发（staging）分支。请注意，开发版可能会随时出现问题。克隆过程完成后，进入 SillyTavern 目录，使用以下命令：cd SillyTavern<br><img src="img/20241222154623645.jpg" target="_self">确保在执行此步骤之前，您已经 cd 到了 SillyTavern 目录。一旦进入该目录，您需要安装 Node.js 和 SillyTavern 所需的依赖项。首先，运行以下命令来安装 Node.js：pkg install nodejsNode.js 安装完成后，接下来是下载所需的依赖项，运行以下命令：npm install然后耐心等待，直到依赖项安装完成。<br><img src="img/20241222154623646.jpg" target="_self"><br><img src="img/20241222154623647.jpg" target="_self">最后一步啦！要运行 SillyTavern，在完成上述步骤后，您只需要使用以下命令之一：./start.sh 或 bash start.sh，任选其一。<br>此时 Termux 中应该会显示 Tavern 正在运行的提示。之后，复制这个链接：`<a data-tooltip-position="top" aria-label="https://127.0.0.1:8000%60%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E7%B2%98%E8%B4%B4%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%EF%BC%8C%E6%82%A8%E5%B0%B1%E5%AE%8C%E6%88%90%E4%BA%86%EF%BC%81" rel="noopener nofollow" class="external-link is-unresolved" href="https://127.0.0.1:8000%60%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E7%B2%98%E8%B4%B4%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%EF%BC%8C%E6%82%A8%E5%B0%B1%E5%AE%8C%E6%88%90%E4%BA%86%EF%BC%81" target="_self"></a>警告：在你那台小巧的手机上安装 ST Extras 是不被支持的，可能根本无法运行，甚至可能把它弄坏！如果你决定尝试，请自担风险，任何造成的损坏或灾难后果将由你自己负责！更新：考虑到 PyTorch 不是你面临的唯一问题，即便你已经在使用 proot，你还需要做很多调查和搜索，还得不断修改 requirements.txt 文件，比如删除某些无法使用的模块或程序。注意：我不会再发布任何修复或推荐哪些模块能用或不能用，你得自己解决这些问题，因为现在已经不再由开发者支持了，而且你可能已经看过我的警告了。PyTorch 在原生 Android 上无法工作，因此在默认的 Termux 命令行下也无法运行。你唯一能做的就是通过 proot 来运行，proot 基本上允许你在 Linux 命令行界面中使用另一个发行版。简单来说，你就可以在手机上使用一个类似虚拟机的终端。如果你在 Windows 上操作，那就是类似命令提示符的东西。这里我们使用的是 Ubuntu Distro 的 proot。要安装它，请进入 Termux，输入以下命令：
pkg update -y &amp;&amp; pkg install wget curl proot tar -y &amp;&amp; wget [](https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Installer/Ubuntu22/ubuntu22.sh) -O ubuntu22.sh &amp;&amp; chmod +x ubuntu22.sh &amp;&amp; bash ubuntu22.sh 安装过程中可能会提示你安装，如果没有自动提示，它会自动为你安装。耐心等待，安装过程中你可以去浏览其他应用。下载完成后，你应该会看到一个空的界面，顶部有一行类似 @localhost 的内容，这表示安装成功。接下来是安装运行 TAI Extras 所需的依赖，输入以下命令：
apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install software-properties-common &amp;&amp; add-apt-repository [](ppa:deadsnakes/ppa) &amp;&amp; apt install python3 &amp;&amp; apt update &amp;&amp; apt install python3-pip &amp;&amp; pip3 install torch==1.12.0 安装 Python 和其依赖的过程可能需要一些时间，所以耐心等待。安装完成后，你需要安装 Git，输入以下命令：
apt install git 然后，使用 Git 克隆仓库：
git clone [GitHub - SillyTavern/SillyTavern-Extras: Extensions API for SillyTavern.](https://github.com/Cohee1207/TavernAI-extras) 克隆完成后，进入目录：
cd TavernAI-extras 现在，你需要修改一些文件，特别是 requirements.txt 或 requirements-complete.txt，默认情况下它会下载没有 complete 的那个文件，我们就用默认的那个。假设你已经能够访问你的文件目录，如果还不行，可以查看下面的“材料文件”部分。确认能访问之后，前往 Termux 目录：ubuntu22-fs - root - TavernAI-extras，找到 requirements.txt 文件，用文本编辑器打开并删除其中类似 torch=2.0.0+cu=1.17.0 的内容，之后保存文件。返回 Termux 并运行以下命令来安装依赖：
pip install -r requirements.txt 这一步也需要耐心等待。安装完成后，你就可以运行你想要的任何模块了。如果你想运行用于情感分析的模块（特别是 28 种情感分类），可以运行以下命令：
python3 server.py --enable-module=classify --classification-model=joeddav/distilbert-base-uncased-go-emotions-student 这个命令会首先安装 pytorch_bin，需要一些时间，但安装完成后应该就可以正常运行了。程序运行完毕后，系统会给出一个链接，但默认情况下这个链接已经在 SillyTavern 中，所以你只需访问它，然后点击界面左上角的三个点，选择第四个图标，再点击连接，完成连接。顺便提一下，建议你禁用“幽灵进程杀死”，否则它可能会终止进程。如果你看到类似 completed with signal 9 的信息，意味着程序被 Android 中断了。为了避免这种情况，可以禁用“幽灵进程杀死”，相关设置包含在本指南的底部。如果程序结束了，你想再次运行它，只需输入以下命令：
./start-ubuntu22.sh &amp;&amp; cd TavernAI-extras &amp;&amp; git pull &amp;&amp; python3 server.py --enable-module=classify --classification-model=joeddav/distilbert-base-uncased-go-emotions-student <br>如果你想运行其他模块，命令和在 PC 上一样。你可以参考 <a data-tooltip-position="top" aria-label="https://github.com/Cohee1207/TavernAI-extras" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Cohee1207/TavernAI-extras" target="_self">TavernAI-extras 的 GitHub</a> 查找更多模块的使用方法。另外，如果你希望同时运行多个 Termux 会话，既能运行扩展又能运行 Tavern，可以在手机的左侧边缘滑动，打开多任务切换界面，点击“新会话”按钮即可创建新的 Termux 会话。切换会话时，只需再次滑动左侧边缘，选择想要的会话即可。要更新您的 TAI，只需进入 Termux 中的 SillyTavern 目录，使用 cd SillyTavern，然后运行 git pull。更新后，它会自动检查并告诉您是否是最新版本，如果不是，它会自动更新。<br><img src="img/20241222154623648.jpg" target="_self"><br><img src="img/20241222154623649.jpg" target="_self">这是 Termux 中常见的错误。发生这种情况是因为您没有正确关闭一个 node 进程，导致它在 Termux 控制台外也一直运行。要解决此问题，首先返回主目录或直接运行 cd。然后运行 node 命令，您会看到一个欢迎信息。输入 .help 可以看到 node 提供的各种命令。如果要清除已运行的进程，输入 .clear，然后就可以了。退出 node，输入 .exit，然后您可以继续之前的操作，回到 SillyTavern 目录，再运行 node server.js 或者 cd SillyTavern &amp;&amp; node server.js，它应该会正常工作。<br><img src="img/20241222154623650.jpg" target="_self">如果您想访问 Termux 目录，可能是想修改某些文件代码，或者只是出于好奇，下面有一个解决方案。有多种方法可以做到这一点，但我推荐使用外部文件管理器，特别是 Material Files。以下文章应该能帮助您了解所有步骤，按照它进行操作即可：Termux File Manager : Access Termux Files From Android
Install Termux File manager to Access your Termux Files From File manager.
<br>
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.learntermux.tech/2020/10/Termux-File-Manager.html" target="_self">https://www.learntermux.tech/2020/10/Termux-File-Manager.html</a>
这个选项是可选的。如果您熟悉 Linux，您应该也知道 alias 命令。对于不熟悉的人，您可以用一个简单的关键字替代多个命令。例如，如果您想进入 SillyTavern 目录并让它变得更简便，只需要几个字符，这就是 Alias 的作用。这个选项是可选的，但它能让您的操作更方便，所以我在这里提到它。此 Alias 会让您进入 SillyTavern，自动更新它，然后运行 node server.js。如何实现呢？首先，您需要能够访问 Termux 目录，请参考上面的指南。然后，您需要一个文件编辑器，我推荐使用 QuickEdit，它可以在应用商店下载。完成这些之后，接下来是找到名为 .bashrc 的文件。<br><img src="img/20241222154623651.jpg" target="_self">如果您看不到文件，请点击右上角的三个点，选择“显示隐藏文件”。一旦找到 .bashrc 文件，点击它并使用 QuickEdit 打开，您应该会看到以下画面。<br><img src="img/20241222154623652.jpg" target="_self">对于大多数人来说，它可能是空的，或者只包含一行，我的文件里有其他内容是因为我自己手动添加的，不用在意。接下来，您只需要在空白处添加 alias 命令，输入 alias Tav="cd SillyTavern &amp;&amp; git pull &amp;&amp; node server.js"。您可以将 Tav 改为任何您喜欢的关键字。添加完后，保存文件，保存的方法是点击下方的按钮：<br><img src="img/20241222154623653.jpg" target="_self">保存后，您就可以返回 Termux，直接输入 Tav（或者您设置的其他关键字），它就会自动进入 SillyTavern 目录，更新并运行 node server.js。<br><img src="img/20241222154623654.jpg" target="_self"><br><img src="img/20241222154623655.jpg" target="_self">这个步骤属于预防性质，虽然不一定必须。幽灵进程杀死是 Android 上的一个功能，当某个应用或进程在后台消耗大量电池时，它会自动终止或停止该进程。这在 Termux 中是一个大问题，因为有时程序会长时间运行。为了解决这个问题，您需要禁用该功能。<br>您可以参考这个教程手动禁用 Termux 上的幽灵进程杀死功能。感谢原作者，这不是我写的。<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=IhK55QfWdYc" target="_self">https://www.youtube.com/watch?v=IhK55QfWdYc</a>P.S：以后可能会更新这个指南，添加有关如何更改头像等的内容。现在我已经累了，等我更新，或者您可以直接加我 Discord，用户名是 ArroganceComplex#arrochi，您会在 Pygmalion 服务器的 #help-and-questions 频道看到我，名叫 Arro。好了，拜拜！P.S.2：我建议您允许 Termux 即使在高电池消耗的情况下也能继续运行，您可以在电池设置中进行调整，很快就能找到。]]></description><link>sillytavern/1-安装/在android上使用termux本地安装和运行sillytavern.html</link><guid isPermaLink="false">SillyTavern/1-安装/在Android上使用Termux本地安装和运行SillyTavern.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222154623641.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222154623641.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.1 快速入门]]></title><description><![CDATA[我对这个完全不懂。请告诉我最快、最简单的开始使用 SillyTavern 的方法。 -- 匿名你可以在几分钟内轻松开始使用 SillyTavern。以下是两种简单的方式：
你可以通过 <a data-href="2.1 快速入门" href="sillytavern/2-使用指南/2.1-快速入门.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.1 快速入门</a> 免费使用。AI Horde 是一个社区驱动的 AI 服务，提供多种 AI 模型的访问。
<br>如果你有 OpenAI 账户或想注册一个账户，可以 <a data-href="2.1 快速入门" href="sillytavern/2-使用指南/2.1-快速入门.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.1 快速入门</a> 开始。
<br>如果你想要将页面文字设置为中文，请看这个教程 ↓
<a data-href="SillyTavern设置中文" href="sillytavern/sillytavern设置中文.html#_0" class="internal-link" target="_self" rel="noopener nofollow">SillyTavern设置中文</a> <br>
按照 <a data-href="1 安装" href="sillytavern/1-安装/1-安装.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1 安装</a> 并启动 SillyTavern。 <br>
在 SillyTavern 的初始界面中，输入你的人物名字。这个名字将在聊天中使用。
<img alt="1_name" src="img/20241222155106300.png" target="_self"> <br>
点击顶部栏的 API 连接按钮。
<img alt="2_api_conn" src="img/20241222155106301.png" target="_self"> <br>
输入 AI Horde 的 API 密钥。你可以暂时使用 0000000000，或者从 <a data-tooltip-position="top" aria-label="https://aihorde.net/" rel="noopener nofollow" class="external-link is-unresolved" href="https://aihorde.net/" target="_self">AI Horde</a> 获取一个免费密钥。
<img alt="3_horde_key" src="img/20241222155106302.png" target="_self"> <br>
选择一些 AI 模型使用。可以从顶部的几个模型中选择。你以后可以随时更改。
<img alt="4_horde_models" src="img/20241222155106303.png" target="_self"> <br>
关闭 API 连接窗口。在底部的聊天框中输入一条消息，然后按 Enter。
<img alt="5_msg" src="img/20241222155106304.png" target="_self"> <br>
你的 AI 会在几秒钟内做出回应。你可以继续 <a data-tooltip-position="top" aria-label="2.3 聊天指南" data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">聊天</a>。成功了！
<img alt="6_success" src="img/20241222155106305.png" target="_self"> <br>按照 <a data-href="1 安装" href="sillytavern/1-安装/1-安装.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1 安装</a> 并启动 SillyTavern。
注册 OpenAI 账号。
<br>访问 <a data-tooltip-position="top" aria-label="https://platform.openai.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://platform.openai.com/" target="_self">https://platform.openai.com</a>
点击右上角的账户图标，然后选择 "View API Keys"。
点击 "Create new secret key"。将密钥复制并妥善保存。请勿分享此密钥，任何拥有此密钥的人都可以使用你的账户消耗 GPT 服务。 在 SillyTavern 的顶部栏中，点击 API 连接。
在 API 部分，选择 Chat Completion (OpenAI)。
在 Chat Completion Source 中，选择 OpenAI。
粘贴你刚才保存的 API 密钥。
点击连接按钮，确认显示为有效。
默认情况下，SillyTavern 会使用 GPT-4 Turbo。你可以选择不同的模型，但需要了解定价。 在 SillyTavern 的顶部栏中，点击最右侧的角色管理。
选择一个现有角色，例如 Seraphina。
在底部的文本框中，写下对 Seraphina 的话，然后按 Enter 或点击发送按钮。
如果一切设置正确，几秒钟后，Seraphina 会做出回应。]]></description><link>sillytavern/2-使用指南/2.1-快速入门.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.1 快速入门.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155106300.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155106300.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.3 聊天指南]]></title><description><![CDATA[当你连接到 <a data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5 API 连接</a> 时，通过在屏幕底部的聊天栏输入信息来发送消息。然后点击 发送 或按回车键。<br><img alt="chatbox" src="img/20241222155558661.png" target="_self">AI 将以一条信息回应，继续对话。<br><img alt="chatmessage" src="img/20241222155558662.png" target="_self"><br>译者配图（源网站有很多图标在内容里面，但是复制到 notion 不显示）：
<img alt="图片1" src="img/20241222155558663.png" target="_self">
你现在可以：
发送另一个消息
滑动回应：点击信息中的 滑动 按钮，生成不同的回应。
<br>编辑消息：点击信息中的 编辑 按钮，获取更多 <a data-href="2.3 聊天指南#编辑消息内容" href="sillytavern/2-使用指南/2.3-聊天指南.html#编辑消息内容_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南 &gt; 编辑消息内容</a>。
<br>消息操作：点击信息中的 消息操作 按钮，获取更多 <a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>，如 <a data-tooltip-position="top" aria-label="3.2 聊天翻译" data-href="3.2 聊天翻译" href="sillytavern/3-扩展功能/3.2-聊天翻译.html#_0" class="internal-link" target="_self" rel="noopener nofollow">翻译</a>、生成图像和故事分支。
<br>聊天选项：点击聊天栏左边的 选项 按钮，获取更多 <a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>，如作者笔记和聊天文件管理。
编辑和滑动
如果你希望自己说点不同的东西，你可以编辑消息并滑动 AI 的回应以获取新回应。
<br>键盘快捷键
你也可以使用 右箭头 键来滑动，使用 上箭头 键来编辑聊天中的最后一条消息。更多热键，请在聊天中使用 /help hotkeys <a data-href="2.3.1 斜杠命令" href="sillytavern/2-使用指南/2.3.1-斜杠命令.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3.1 斜杠命令</a> ，或查看 <a data-href="2.3.2 热键" href="sillytavern/2-使用指南/2.3.2-热键.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3.2 热键</a> 页面。
通过信息中的省略号 (…) 按钮管理单个聊天消息。<br>要在你的聊天中显示这些选项，请在用户设置中启用 <a data-tooltip-position="top" aria-label="2.8.1 UI 自定义 > 主题开关" data-href="2.8.1 UI 自定义#主题开关" href="sillytavern/2-使用指南/2.8.1-ui-自定义.html#主题开关_0" class="internal-link" target="_self" rel="noopener nofollow">展开消息操作</a> 设置。<br>译者配图
<img alt="image 2|image 2.png" src="img/20241222155558664.png" target="_self"> 翻译：将消息转换为不同语言
<br>生成图像：根据消息内容<a data-tooltip-position="top" aria-label="3.8 图像生成" data-href="3.8 图像生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#_0" class="internal-link" target="_self" rel="noopener nofollow">生成图像</a>
<br>朗读：将<a data-tooltip-position="top" aria-label="3.14 文本转语音 (TTS)" data-href="3.14 文本转语音 (TTS)" href="sillytavern/3-扩展功能/3.14-文本转语音-(tts).html#_0" class="internal-link" target="_self" rel="noopener nofollow">文本转为语音</a>
提示词：查看生成提示和令牌使用情况 可见（已包含）：AI 会看到这条消息；点击以排除它
不可见（已排除）：AI 不会看到这条消息；点击以包含它 <br>附件： <a data-tooltip-position="top" aria-label="2.9.6 数据库（RAG） > 消息附件" data-href="2.9.6 数据库（RAG）#消息附件" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#消息附件_0" class="internal-link" target="_self" rel="noopener nofollow">附加文件或图像</a>
检查点：创建故事检查点
检查点导航：点击打开检查点聊天，Shift+点击更新现有检查点
分支：启动替代故事路径
复制：复制消息文本
编辑：编辑消息内容
<br>一个紧凑的消息操作面板，出现在你点击 编辑按钮<a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>聊天消息时。<br>译者配图
<img alt="image 1" src="img/20241222155558665.png" target="_self"> 确认：保存消息更改
取消：丢弃消息更改 复制：复制消息内容
删除：删除消息 上移：将消息向上移动
下移：将消息向下移动
注意：根据消息在聊天历史中的位置，移动控制可能会被禁用。<br>通过聊天界面左下角的 选项按钮 <a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>管理聊天设置和操作。<br>译者配图
<img alt="image 2 2|image 2 2.png" src="img/20241222155558666.png" target="_self"> 关闭聊天：退出当前聊天会话
<br>切换面板==：显示/隐藏<a data-tooltip-position="top" aria-label="2 使用指南 > 控制面板" data-href="2 使用指南#控制面板" href="sillytavern/2-使用指南/2-使用指南.html#控制面板_0" class="internal-link" target="_self" rel="noopener nofollow">控制面板</a> <br><a data-href="2.9.5 作者注释" href="sillytavern/2-使用指南/2.9.5-作者注释.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.5 作者注释</a>：自定义上下文指令
<br><a data-href="2.6.5 CFG" href="sillytavern/2-使用指南/2.6.5-cfg.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.5 CFG</a>：调整回答的创造力
<br><a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>：查看令牌（token）生成统计数据 返回父级聊天：返回到主对话 当创建分支的时候才会出现<br>
<img alt="image 3" src="img/20241222155558667.png" target="_self"> 保存检查点：创建故事检查点
<br>转为群聊：转换为 <a data-tooltip-position="top" aria-label="2.9.3 群聊" data-href="2.9.3 群聊" href="sillytavern/2-使用指南/2.9.3-群聊.html#_0" class="internal-link" target="_self" rel="noopener nofollow">群聊</a> 开始新聊天：开始新的对话
<br>管理聊天文件： <a data-tooltip-position="top" aria-label="2.9.2 聊天文件管理" data-href="2.9.2 聊天文件管理" href="sillytavern/2-使用指南/2.9.2-聊天文件管理.html#_0" class="internal-link" target="_self" rel="noopener nofollow">聊天文件管理</a>，如导入、导出和重命名 删除消息：选择并删除多个消息
重新生成：创建新的回应
AI 帮答（冒充）：AI 以用户身份发送消息
继续：延续最后一条消息
<br>注意：某些选项可能会根据上下文和聊天状态隐藏。（比如<a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>）词符概率面板可以让你查看 AI 在生成文本时的采样过程。它不仅展示了 AI 写了什么，还展示了 AI 在每个文本点上考虑过的其他选项。<br>要打开此面板，请点击 词符概率 按钮<a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>。<br><img alt="fling-msg" src="img/20241222155558668.png" target="_self">示例消息<br><img alt="fling-probs" src="img/20241222155558669.png" target="_self">示例消息的词符概率显示译者注： 如果点击没有正确显示，则参考以下方法<br>
<img alt="Snipaste_2024-12-19_18-03-33" src="img/20241222155558670.png" target="_self">
勾选 请求词符概率<br>
<img alt="image 4" src="img/20241222155558671.png" target="_self">
取消勾选 平滑流式传输<br>
<img alt="image 5" src="img/20241222155558672.png" target="_self">
如果调整后如下图，原因可能如下：<br>
<img alt="image 6" src="img/20241222155558673.png" target="_self">
并非所有 API 都提供令牌概率。如果你使用的 API 不支持令牌概率，面板将打开，但不会显示任何信息。 文本补全 LlamaCPP: 可用
文本生成 WebUI（oobabooga）: 可用
TabbyAPI: 可用
NovelAI: 可用
KoboldCPP: 可用
Ollama: 似乎不可用
OpenRouter Text: 似乎不可用 聊天补全 OpenAI 或 自定义: 可用，但不支持重新生成
Anthropic: 似乎不可用
Google AI Studio: 似乎不可用
OpenRouter Chat: 似乎不可用 当你点击生成文本中的任何一个令牌（token，单词、标点符号或格式化字符） 时，面板会显示 AI 在该位置考虑过的替代令牌以及它们的概率分数。这能让你深入了解 AI 的“思维过程”，并展示响应可能采取的其他方向。查看这些替代选项可以帮助你理解是否有多个可能选项或只有一个明显的选择。<br><img alt="fling-probs-logprob" src="img/20241222155558674.png" target="_self">替代令牌和概率如果你认为 AI 应该选择不同的令牌，可以选择一个替代项，并从该点开始重新生成消息，从而可能得到不同的响应。如果你改变了特定的令牌并重新生成响应，则新响应中改变前的部分将与原始响应相同。这部分会显示为灰色。因为它没有被重新生成，所以这部分没有概率信息。你可能会想查看基于替代令牌可能生成的其他响应。你可以点击灰色部分来“重新生成”文本，给你一个新的变体。点击灰色部分的任何部分会保持整个灰色部分，并重新生成整个白色/有色部分。按住 Ctrl 并点击灰色部分中的令牌将保持灰色部分直到点击的令牌，并重新生成其余部分。此时，你的替代令牌选择无法保留。令牌显示：
生成的文本被拆分为单独的令牌
每个令牌是交互式的，点击令牌查看 AI 考虑的替代选项
令牌被染色作为视觉辅助，但这不表示概率
特殊字符（空格、换行符）被明显标记
令牌选择：
点击令牌查看替代选项
点击替代选项替换令牌并重新生成响应
悬停在令牌上查看其原始日志概率分数
窗口控制：
拖动控制柄调整面板位置（仅限于移动 UI）
最大化/恢复面板大小
展开/收起面板内容
关闭面板
你必须在 用户设置 中选择 请求令牌概率 才能启用此功能。令牌概率仅对最新消息可用，并且不会保存到聊天中。如果令牌概率信息不再可用，面板将显示一条消息，指示此情况。在使用平滑流媒体时，令牌概率不可用。并非所有 API 都提供令牌概率。如果你使用的 API 不支持令牌概率，面板将打开，但不会显示任何信息。<br><a data-href="2.3.1 斜杠命令" href="sillytavern/2-使用指南/2.3.1-斜杠命令.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3.1 斜杠命令</a><br><a data-href="2.3.2 热键" href="sillytavern/2-使用指南/2.3.2-热键.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3.2 热键</a>]]></description><link>sillytavern/2-使用指南/2.3-聊天指南.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.3 聊天指南.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155558661.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155558661.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.3.2 热键]]></title><description><![CDATA[要查看您在 SillyTavern 实例中有效的最新热键列表，请在任何聊天中使用 /help hotkeys 命令。热键在移动设备上不可用。
上箭头 = 编辑上一个消息
Ctrl+上箭头 = 编辑上一个用户消息
左箭头 = 向左滑动
右箭头 = 向右滑动（注意：当聊天框中有文字时，滑动热键无法使用）
回车（当聊天框被选中时） = 发送您的消息给 AI
Ctrl+回车 = 重新生成上一个 AI 回复
Alt+回车 = 继续上一个 AI 回复
Escape (在编辑消息时并且启用了消息自动保存) = 关闭编辑框。
(在 AI 消息生成或流式传输时) = 立即停止生成。 需要在 "用户设置" 标签下启用。Important 译者注：具体操作如下图，勾选 Markdown Hotkeys <img alt="image 11|image 11.png" src="img/20241222155719773.png" target="_self">
适用于聊天框和标有 "M↓" 图标的文本区域：
Ctrl+B = 加粗
Ctrl+I = 斜体
Ctrl+U = 下划线
Ctrl+K = 行内代码
Ctrl+Shift+~ = 删除线
]]></description><link>sillytavern/2-使用指南/2.3.2-热键.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.3.2 热键.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155719773.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155719773.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.4 通用设置]]></title><description><![CDATA[ 译者注：图中所示是这一章所述的区域 <img alt="image 7|image 7.png" src="img/20241222155216504.png" target="_self"> 这些设置控制着在使用语言模型生成文本时的采样过程。对于所有支持的后端，这些设置的含义是通用的。译者注：调换了英语原文中以下两个小标题的顺序<br>SillyTavern发送给API的所有token数量，减去<a data-href="2.4 通用设置" href="sillytavern/2-使用指南/2.4-通用设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.4 通用设置</a>。
上下文包括角色信息、系统提示、聊天历史等。
消息之间的虚线表示上下文的范围，虚线以上的消息不会被发送到AI。
若要查看生成消息后的上下文组成，可以点击Prompt Itemization消息选项（展开...菜单并点击带虚线方框的图标）。
API生成回应时的最大token数量。 响应长度越高，生成回应所需的时间越长。 如果API支持，可以启用流式传输，以便在生成过程中逐步显示回应。 <br>
当流式传输关闭时，回应将在完成后一次性显示。 <img alt="image 1 2|image 1 2.png" src="img/20241222155216505.png" target="_self"> 控制生成文本的随机性。
较低的值：回应更有逻辑性，但创意较少。
较高的值：回应更具创意，但逻辑性较差。
通过根据token在上下文中出现的频率来惩罚重复的tokens，从而减少重复现象。
有时，如果角色对某些话题或词语表现出固定的兴趣，增加这个参数可以帮助避免过度重复。
这个参数设置得太高可能会导致回应中断。除非非常清楚其作用，否则最好不要将其设置超过1.15。
将该值设置为1以禁用其效果。重复惩罚范围（Repetition Penalty Range）定义在生成的最后一个token中，考虑重复惩罚的token数量。设置过高可能会导致正常单词（例如“the”、“a”、“and”等）受到过多惩罚，从而破坏回应。将该值设置为0以禁用其效果。重复惩罚斜率（Repetition Penalty Slope）如果重复惩罚范围和该参数都大于0，则重复惩罚将在提示的末尾产生更强的影响。数值越高，影响越大。将该值设置为0以禁用其效果。将token池限制为K个最可能的token。较小的值会使生成的文本更一致，但创意性较低。将该值设置为0以禁用其效果。将token池限制为使其概率总和达到P的token数量。较小的值使生成的文本更加一致，但创意性较低。将该值设置为1以禁用其效果。从所有可能的token中随机选择，确保每个token都有相等的机会被选中。生成的文本更加多样化，但可能不那么连贯。将该值设置为1以禁用其效果。通过切断相对最不可能的token，限制token池的范围。这个设置生成的回应更具连贯性，但如果设置过高，可能会加剧重复现象。
最好在较低的值（如0.1-0.01）下使用，但如果Temperature较高，则可以设置得更高。例如：Temperature: 5, Min P: 0.5
将该值设置为0以禁用其效果。根据token的可能性分布自动确定选取的token数量，而不是选择Top P或Top K中的token。它选择所有概率高于某个阈值的token。将该值设置为0以禁用其效果。此设置会从考虑的token中移除最不可能的token，通常可以提高生成文本的质量和连贯性。将该值设置为1以禁用其效果。通过对高概率token的可能性进行增加，同时减少低概率token的可能性，使用二次变换，旨在生成更有创意的回应，而不受Temperature的限制。
最好在没有截断采样器（如Top K、Top P、Min P等）时使用此设置。
将该值设置为0以禁用其效果。根据最可能的token的概率动态调整温度。旨在在不牺牲连贯性的情况下，生成更具创意的回应。
接受从最小到最大范围的温度，例如：最小温度: 0.75和最大温度: 1.25
指数会根据最可能的token应用指数曲线。
取消勾选以禁用其效果。]]></description><link>sillytavern/2-使用指南/2.4-通用设置.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.4 通用设置.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155216504.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155216504.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5 API 连接]]></title><description><![CDATA[SillyTavern 可以连接到各种 LLM API。以下是它们各自的优缺点和使用案例的描述。请先把页面文字设置为中文：
<a data-href="SillyTavern设置中文" href="sillytavern/sillytavern设置中文.html#_0" class="internal-link" target="_self" rel="noopener nofollow">SillyTavern设置中文</a>
当你首次进入 SillyTavern 的 "API 链接(API Connections)" 页面时，你会注意到有一个下拉选项，可以选择 "聊天补全(Chat Completion)" 和 "文本补全(Text Completion)" 等选项。理解这两者的区别是非常有益的。<br><img alt="image 8|image 8.png" src="img/20241222155748272.png" target="_self">错误理解：很容易把 "文本补全(Text Completion)" 理解为本地模型，把"聊天补全(Chat Completion)" 理解为云端 LLM，但事实并非如此。像 “Novel AI” 或 “Kobold” 这样的模型并不是完全不同类型的模型，尽管它们在 ST 的 API 下拉菜单中是作为单独的选项存在的。你可以通过适当的后端将模型强制转换成不同的 API 结构，但这并不是这一部分的重点。当你使用 SillyTavern 发送消息时，你的聊天内容、角色描述以及其他提示（例如背景书或作者笔记）会构建成一个单一的“提示”，然后发送到模型。你使用的模型的 API “类型”决定了该提示如何被构建（这部分由 SillyTavern 在后台自动处理——你可以打开 SillyTavern 终端，查看发送给 AI 的提示内容）。聊天补全，顾名思义，聊天补全模型会将你的提示结构化为一系列的用户（你）与助手（AI）或系统（中立）的消息。训练用于聊天补全的模型有助于营造“聊天”的感觉，AI 会“回应”上一条消息。当你使用 ChatGPT 网站时，后台实际上就是在使用聊天补全的 API。文本补全，顾名思义，会将你的提示转化为一长串字符串，然后模型会尝试继续这个字符串（可以想象一下，所有的文本、数百条消息、格式、换行符等，都会被压缩成一句非常长的句子）。如果你在SillyTavern 中的消息格式是以 YourPersona: 和 Character: 为标记的系列消息，文本补全模型会尝试继续这种模式，SillyTavern 会将其呈现为一条新的聊天消息给你，但实际上模型只是尝试继续文本。如果你输入“太阳从……升起”，文本补全模型很可能会将这个句子补全为“东方”。大多数文本补全模型都有一个推荐的“指令模板(Instruct Template)”（通常在模型的文档或下载页面中提到），帮助它们“回应(respond)”消息和指令，就像聊天补全模型一样。SillyTavern 通常会提供大多数（当然不是所有）指令模板，你可以在“高级格式化设置”页面中选择。<br><img alt="image 1 3|image 1 3.png" src="img/20241222155748273.png" target="_self">
这些 LLM API 可以在你的电脑上运行。
它们是免费的，并且没有内容过滤器。
安装过程可能较为复杂（SillyTavern 开发团队不提供此方面的支持）。
<br>需要从 <a data-tooltip-position="top" aria-label="https://huggingface.co/models?other=LLM" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/models?other=LLM" target="_self">HuggingFace</a> 下载 LLM 模型，大小从 5GB 到 50GB 不等。
大多数模型不如云端 LLM API 强大。 在你的 PC 上运行，100% 私密，支持多种模型
提供最直接的 AI 生成设置控制
需要大量 VRAM（6-24GB，具体取决于 LLM 模型）
模型的上下文限制为 2k
不支持流式生成
流行的 KoboldAI 版本： <br><a data-tooltip-position="top" aria-label="https://github.com/henk717/KoboldAI" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/henk717/KoboldAI" target="_self">Henky's United</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/0cc4m/KoboldAI" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/0cc4m/KoboldAI" target="_self">0cc4m's 4bit-supporting United</a> 易于使用的 API，支持 CPU 卸载（适用于低 VRAM 用户）和流式生成
在 Windows 上运行时为单个 .exe 文件（在 MacOS 和 Linux 上需要从源代码编译）
支持 GGUF/GGML 模型
比如 AutoGPTQ 和 Exllama/v2 等 GPU-only 加载器速度较慢
<br><a data-tooltip-position="top" aria-label="https://github.com/LostRuins/koboldcpp" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LostRuins/koboldcpp" target="_self">GitHub</a> 一体化 Gradio UI，支持流式生成
最广泛支持量化模型（AWQ、Exl2、GGML、GGUF、GPTQ）和 FP16 模型
提供一键安装程序
定期更新，有时会破坏与 SillyTavern 的兼容性
<br><a data-tooltip-position="top" aria-label="https://github.com/oobabooga/text-generation-webui#one-click-installers" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/oobabooga/text-generation-webui#one-click-installers" target="_self">GitHub</a>
正确连接 SillyTavern 到 Ooba 的新 OpenAI API 的方法：
确保你使用的是最新版本的 Oobabooga TextGen（截至 2023 年 11 月 14 日）。
编辑 CMD_FLAGS.txt 文件，并在其中添加 -api 标志。然后重启 Ooba 服务器。
<br>将 SillyTavern 连接到 <a rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:5000/" target="_self">http://localhost:5000/</a>（默认端口），并且不要勾选“Legacy API”框。你可以从 Ooba 的控制台中移除 URL 后缀 /v1。
你可以通过 --api-port 5001 标志更改 API 主机端口，其中 5001 是自定义端口。
基于 Exllamav2 的轻量级 API，支持流式生成
支持 Exl2、GPTQ 和 FP16 模型
<br><a data-tooltip-position="top" aria-label="https://github.com/theroyallab/ST-tabbyAPI-loader" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/ST-tabbyAPI-loader" target="_self">官方扩展</a> 允许直接从 SillyTavern 加载/卸载模型
不建议低 VRAM 用户使用（不支持 CPU 卸载）
<br><a data-tooltip-position="top" aria-label="https://github.com/theroyallab/tabbyAPI" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/tabbyAPI" target="_self">GitHub</a> 这些 LLM API 作为云服务运行，不需要占用你 PC 的资源。
它们比大多数本地 LLM 更强大/智能。
但它们都有不同程度的内容过滤，并且大多数需要支付费用。 设置简单，容易获取 API 密钥
需要预付费以购买积分，并按提示收费
非常逻辑，创意风格可能显得重复和可预测
大多数新版本的模型（如 gpt-4-turbo、gpt-4o）支持多模态
<br><a data-tooltip-position="top" aria-label="https://platform.openai.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://platform.openai.com/" target="_self">网站</a>，<a data-href="2.5.3 聊天补全（Chat Completion）" href="sillytavern/2-使用指南/2.5.3-聊天补全（chat-completion）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.3 聊天补全（Chat Completion）</a> 推荐给希望 AI 对话具有创造性和独特写作风格的用户
需要预付费并按提示收费
最新版本的模型（Claude 3）支持多模态
<br>需要特定的提示风格，并使用 <a data-tooltip-position="top" aria-label="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response" target="_self">prefills</a> 来引导回答
<br><a data-tooltip-position="top" aria-label="https://console.anthropic.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://console.anthropic.com/" target="_self">网站</a> <br>提供各种尺寸和使用场景的高效模型。你可以在 <a data-tooltip-position="top" aria-label="https://console.mistral.ai/api-keys/" rel="noopener nofollow" class="external-link is-unresolved" href="https://console.mistral.ai/api-keys/" target="_self">其平台</a> 上创建账户和 API 密钥。
提供 32k 到 128k 上下文大小的通用模型，以及 32k 到 256k 上下文大小的编程模型。
免费层有速率限制。
<br>合理的内容审核，Mistral 的核心原则是保持中立并赋能用户，更多信息见 <a data-tooltip-position="top" aria-label="https://mistral.ai/terms/" rel="noopener nofollow" class="external-link is-unresolved" href="https://mistral.ai/terms/" target="_self">此处</a>。 WindowAI 浏览器扩展允许你连接上述云端 LLM 并使用自己的 API 密钥
使用 OpenRouter 可支付使用他们的 API 密钥
如果你不想为每个服务创建单独的账户，这个工具非常有用
<br><a data-tooltip-position="top" aria-label="https://windowai.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://windowai.io/" target="_self">WindowAI 网站</a> 和 <a data-tooltip-position="top" aria-label="https://openrouter.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="https://openrouter.ai/" target="_self">OpenRouter 网站</a> 无内容过滤器的模型，调优以支持可引导的创意写作
每月提供免费积分，也有付费订阅
模型范围从 7B 到 70B
<br><a data-href="2.5.5 DreamGen" href="sillytavern/2-使用指南/2.5.5-dreamgen.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.5 DreamGen</a> SillyTavern 可以直接访问此 API，无需额外设置
使用个别志愿者（Horde Workers）的 GPU 来处理你的聊天输入的响应
等待生成时间取决于 Worker，AI 设置和可用模型也由 Worker 决定
<br><a data-tooltip-position="top" aria-label="https://aihorde.net/" rel="noopener nofollow" class="external-link is-unresolved" href="https://aihorde.net/" target="_self">网站</a> 提供各种家族的无约束模型
使用“积分”支付模型的代币
默认情况下不记录提示，但你可以启用该功能以获得代币折扣
<br>使用与 Oobabooga TextGeneration WebUI 类似的 API，详情请见 <a data-tooltip-position="top" aria-label="https://mancer.tech/docs/clients/#sampling-parameters" rel="noopener nofollow" class="external-link is-unresolved" href="https://mancer.tech/docs/clients/#sampling-parameters" target="_self">Mancer 文档</a>
<br><a data-tooltip-position="top" aria-label="https://mancer.tech/" rel="noopener nofollow" class="external-link is-unresolved" href="https://mancer.tech/" target="_self">网站</a>，<a data-href="2.5.8 Mancer" href="sillytavern/2-使用指南/2.5.8-mancer.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.8 Mancer</a> 无内容过滤器
需要付费订阅
<br><a data-tooltip-position="top" aria-label="https://novelai.net/" rel="noopener nofollow" class="external-link is-unresolved" href="https://novelai.net/" target="_self">网站</a>，<a data-href="2.5.9 NovelAI" href="sillytavern/2-使用指南/2.5.9-novelai.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.9 NovelAI</a>
<br><a data-href="2.5.1 连接配置文件" href="sillytavern/2-使用指南/2.5.1-连接配置文件.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.1 连接配置文件</a><br><a data-href="2.5.2 自托管AI模型" href="sillytavern/2-使用指南/2.5.2-自托管ai模型.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.2 自托管AI模型</a><br><a data-href="2.5.3 聊天补全（Chat Completion）" href="sillytavern/2-使用指南/2.5.3-聊天补全（chat-completion）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.3 聊天补全（Chat Completion）</a><br><a data-href="2.5.4 OpenRouter" href="sillytavern/2-使用指南/2.5.4-openrouter.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.4 OpenRouter</a><br><a data-href="2.5.5 DreamGen" href="sillytavern/2-使用指南/2.5.5-dreamgen.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.5 DreamGen</a><br><a data-href="2.5.6 KoboldAI Horde" href="sillytavern/2-使用指南/2.5.6-koboldai-horde.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.6 KoboldAI Horde</a><br><a data-href="2.5.7 KoboldCpp" href="sillytavern/2-使用指南/2.5.7-koboldcpp.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.7 KoboldCpp</a><br><a data-href="2.5.8 Mancer" href="sillytavern/2-使用指南/2.5.8-mancer.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.8 Mancer</a><br><a data-href="2.5.9 NovelAI" href="sillytavern/2-使用指南/2.5.9-novelai.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.9 NovelAI</a><br><a data-href="2.5.10 Scale" href="sillytavern/2-使用指南/2.5.10-scale.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.10 Scale</a><br><a data-href="2.5.11 TabbyAPI" href="sillytavern/2-使用指南/2.5.11-tabbyapi.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5.11 TabbyAPI</a>]]></description><link>sillytavern/2-使用指南/2.5-api-连接.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5 API 连接.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155748272.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155748272.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.3 聊天补全（Chat Completion）]]></title><description><![CDATA[如何获取：
访问 <a data-tooltip-position="top" aria-label="https://platform.openai.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://platform.openai.com/" target="_self">OpenAI</a> 并登录。
<br>使用 "<a data-tooltip-position="top" aria-label="https://platform.openai.com/account/api-keys" rel="noopener nofollow" class="external-link is-unresolved" href="https://platform.openai.com/account/api-keys" target="_self">查看 API 密钥</a>" 选项来创建新的 API 密钥。
重要提示！丢失的 API 密钥无法恢复！请确保将其妥善保管！如果你有访问 Anthropic 的 Claude API 的权限：
选择 "Claude" 作为 "聊天补全来源"。
输入你的 API 密钥。
点击连接。
Mistral AI 是一个开发开放和专有模型的团队，致力于高科学标准和开放性。你可以通过本地运行它们的模型或通过它们的 API 服务 La Plateforme 使用它们的模型。
<br>第一步是创建一个 <a data-tooltip-position="top" aria-label="https://console.mistral.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="https://console.mistral.ai/" target="_self">La Plateforme</a> 账户。
<br>完成后，你可以选择一个 <a data-tooltip-position="top" aria-label="https://console.mistral.ai/billing/plans" rel="noopener nofollow" class="external-link is-unresolved" href="https://console.mistral.ai/billing/plans" target="_self">计划</a> 并设置支付信息，或选择免费层（Free Tier）。
<br>然后，你可以创建 <a data-tooltip-position="top" aria-label="https://console.mistral.ai/api-keys/" rel="noopener nofollow" class="external-link is-unresolved" href="https://console.mistral.ai/api-keys/" target="_self">API 密钥</a>。你可能需要等几分钟，直到密钥生效！
重要提示！
丢失的 API 密钥无法恢复！你需要创建一个新的密钥。请确保将其妥善保管！
需要特别注意的是，我们不提供针对可能出现的问题的支持！我们不保证与每个可能的 API 端点都兼容！<br>如果你打算使用此代理功能来使用本地端点，例如 TabbyAPI、Oobabooga、Aphrodite 或类似的端点，你可能需要查看 <a data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5 API 连接</a>。这个代理功能主要用于与其他提供 OpenAI 兼容的 API 聊天补全端点的服务和程序一起使用。
大多数文本补全 API 提供比 OpenAI 标准更多的自定义选项。这些更强大的自定义选项，如 Min-P 采样器，可能值得 SillyTavern 用户了解，它们可以显著提高生成内容的质量。
可以为 OpenAI 的后台配置代理/替代端点。这个自定义端点可以连接到支持通用 OpenAI API 架构的替代聊天补全 API。实现此 API 的一些后台示例包括：
<br><a data-tooltip-position="top" aria-label="https://lmstudio.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="https://lmstudio.ai/" target="_self">LM Studio</a>
<br><a data-tooltip-position="top" aria-label="https://www.litellm.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.litellm.ai/" target="_self">LiteLLM</a>
<br><a data-tooltip-position="top" aria-label="https://localai.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://localai.io/" target="_self">LocalAI</a>
你可以通过以下方式访问此功能：
切换到 “聊天补全” API 类型。
选择 “OpenAI” 作为 “聊天补全来源”。
保留 API 密钥等详细信息为空。
打开 “反向代理”。
在这里，你可以输入代理/自定义端点，并根据需要在 “代理密码” 下输入 API 密钥。例如，TabbyAPI 会提供你需要使用的 API 密钥。<br><img alt="image 12|image 12.png" src="img/20241222155815961.png" target="_self">回到 “OpenAI 模型” 标签，你会看到两个可选的复选框，分别标记为：<br><img alt="image 1 4|image 1 4.png" src="img/20241222155815962.png" target="_self"> 跳过 API 状态检查。 选中 “跳过 API 状态检查” 会告诉 SillyTavern 停止提醒你 API 端点无法正常工作。如果你的 API 端点有效，但 SillyTavern 依然提示错误，可以勾选此项。 提示： 如果无法正常工作，试试在端点 URL 的末尾添加 /v1！ 显示外部模型（由 API 提供）。 选中 “显示外部模型（由 API 提供）” ，会在下拉菜单中显示由自定义 API 端点报告的外部可用模型（你需要向下滚动，经过 OpenAI 的模型后）。这样，你可以直接从 SillyTavern 中选择不同的 API 模型，而无需进入自定义应用程序并更改模型。 <br>
没选中 <img alt="image 2 3|image 2 3.png" src="img/20241222155815963.png" target="_self"> <br>
选中（出现”External”外部模型） <img alt="image 3 2|image 3 2.png" src="img/20241222155815964.png" target="_self"> 此功能不是自定义 API 端点正常工作的必要条件，且可能并非每个后台都支持。 ]]></description><link>sillytavern/2-使用指南/2.5.3-聊天补全（chat-completion）.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.3 聊天补全（Chat Completion）.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155815961.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155815961.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.5 DreamGen]]></title><description><![CDATA[DreamGen 是一个基于 AI 的创意写作应用和 API。它提供了免费套餐和付费订阅，允许无限制访问专门为可调节的 AI 辅助写作设计的高质量内部文本生成模型。创建账户即可开始使用：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/" target="_self">https://dreamgen.com/</a>。<br>免费额度每个月的开始时会重置。有关每个模型的信用费用，请查看<a data-tooltip-position="top" aria-label="https://dreamgen.com/pricing" rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/pricing" target="_self">定价</a>页面，查看剩余信用额度，请访问<a data-tooltip-position="top" aria-label="https://dreamgen.com/account/usage" rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/account/usage" target="_self">用量</a>页面。
<br>访问 <a data-tooltip-position="top" aria-label="https://dreamgen.com/account/api-keys" rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/account/api-keys" target="_self">DreamGen API 密钥</a> 页面。
点击“新建 API 密钥”按钮。
确保将 API 密钥复制到剪贴板。
<br><img alt="image 13|image 13.png" src="img/20241222155858559.png" target="_self">创建新的 DreamGen API 密钥<br><img alt="dreamgen_api_keys_copy" src="img/20241222155858560.jpg" target="_self">复制 DreamGen API 密钥
打开 SillyTavern 的连接设置。
选择 API：文本补全（Text Completion）。
选择 API 类型：DreamGen。
输入 API 密钥。
（可选）选择模型。
<br><img alt="image 1 5|image 1 5.png" src="img/20241222155858561.png" target="_self">连接到 DreamGenDreamGen 提供了 opus-v1-sm、opus-v1-lg 和 opus-v1-xl 三种模型。模型越大，它在遵循指令和生成高质量故事方面的表现越好。<br>DreamGen 模型要求特定的输入格式，格式文档可参见<a data-tooltip-position="top" aria-label="https://dreamgen.com/docs/models/opus/v1" rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/docs/models/opus/v1" target="_self">此处</a>。SillyTavern 提供了内置的 DreamGen 预设。确保使用这些设置作为基准。这些设置尽量贴近 DreamGen 格式，但由于角色卡片的格式不规则，有时可能不完全符合。
进入“高级格式”页面。
在“上下文模板”中选择 DreamGen Role-Play V1 Llama3 / ChatML（具体选择视模型而定）。
启用“指令模式”。
在“指令模式预设”中选择 DreamGen Role-Play V1 Llama3 / ChatML。
<br><img alt="image 2 4|image 2 4.png" src="img/20241222155858562.png" target="_self">DreamGen 上下文设置<br><img alt="image 3 3|image 3 3.png" src="img/20241222155858563.png" target="_self">DreamGen 指示设置(*) 什么时候使用 Llama3，什么时候使用 ChatML？截至 2024/06/17，opus-v1-sm 使用 ChatML 格式，其他模型均使用 Llama3 格式。在运行本地模型时，模型的 HuggingFace 页面会标明使用的模板。DreamGen 支持以下设置：
“温度”（Temperature）、"Top P"、"Top K" 和 "Min P"。
"存在惩罚"（Presence Penalty）、"频率惩罚"（Frequency Penalty）和 "重复惩罚"（Repetition Penalty）（无范围限制）。
“最小长度”——强制模型生成至少 min(min_length, max_tokens) 个标记。
一些好的起始值可能是：
Min P: 0.05
温度（Temperature）：0.8
重复惩罚（Repetition Penalty）：1.1
DreamGen 模型与常规的指令跟随模型（如 OpenAI 的 ChatGPT）有所不同。这些模型经过微调，专门用于根据提供的描述编写故事，通常包括情节描述、风格描述、角色、地点、背景等。模型也可以在故事进行过程中进行引导，让你充当导演，告诉角色应该做什么或情节应该如何发展。一个格式良好的 系统提示 消息应该看起来像这样：你是一个聪明、熟练、多才多艺的写手。 你的任务是根据以下信息编写一个故事。 ## 情节描述： 图书管理员为路西法和米娅安排了一场盲目约会。路西法立刻爱上了米娅，但米娅需要更多的时间和空间来做决定。 ## 风格描述： 叙事生动而充满感官刺激，强烈强调情感的原始表达，以第一人称视角展现。语言直接且充满强烈的意象，沉浸于角色激情碰撞的探索中。 ## 角色 ### 路西法 路西法，红色皮肤、长着角的恶魔，是堕落恩典的化身。在与他那臭名昭著的遗产作斗争时，他开始渴望爱情，内心的复杂性酝酿着脆弱。他的性格在享乐主义和自我反思之间摇摆不定，渴望获得米娅和图书管理员的接纳。面对尘世的爱，他渴望转变，体现出即使是被诅咒的也可以在爱情的救赎中寻求慰藉。 ### 米娅 米娅是一个善良的女人...
注意，提示应当是一个关于故事的描述，而非写作指导或指令。避免使用以下短语：
"写这个故事就像..."
"确保..."
等等。
<br>请查看更多<a data-tooltip-position="top" aria-label="https://dreamgen.com/docs/models/opus/v1#task-story-writing" rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/docs/models/opus/v1#task-story-writing" target="_self">示例</a>中关于情节、风格和角色描述的例子。DreamGen 模型默认的 "DreamGen 角色扮演 V1" 模板将不同的部分替换为如下：
## 情节描述： 将包含 {{scenario}} 和 {{wiBefore}}。
## 风格描述： 如果没有提供，可以在系统提示中的“高级设置”中添加，或者在角色卡片的末尾加入 {{scenario}}。该部分用于影响叙事风格（第一人称、第二人称或第三人称），时态（过去式、现在式），以及细节和冗长度等。
## 角色： 将包含 {{char}} 角色描述，其中包含 {{description}} 和 {{personality}}，以及 {{user}} 角色描述，其中包含 {{persona}}。
DreamGen 模型对上下文非常敏感，它们会根据之前的对话内容大体保持写作风格（和事实）。因此，消息示例和初始消息非常重要。&lt;START&gt;
{{user}}: (用户的发言)
{{char}}: (角色的回应)
&lt;START&gt;
{{user}}: (用户的发言)
{{char}}: (角色的回应)
以下是几个示例卡片，经过 DreamGen 的格式调整，符合独特的提示结构。这些卡片也使用了 {{mesExamples}}，如上所述。Seraphina这是对流行的 Seraphina 卡片的修改，默认内置在 SillyTavern 中。<br><img alt="image 4 2|image 4 2.png" src="img/20241222155858564.png" target="_self">Lara Lightland这是 Deffcolony 编辑的 Lara Lightland 卡片。<br><img alt="image 5 2|image 5 2.png" src="img/20241222155858565.png" target="_self">你可以从以下设置开始：
温度 (Temperature)：1.0
最小概率 (MinP)：0.05
存在惩罚 (Presence Penalty)：0.1
频率惩罚 (Frequency Penalty)：0.1
你有几种方式可以调整回复的长短：
在系统提示或模型卡中更改或添加 ## 风格描述（Style description）。你可以尝试添加类似“句子通常较长，叙述详细描绘环境”的内容。
更改完成功能设置中的 最小长度（Min Length）。
在高级格式设置中的指令模式下，添加类似以下的 最后输出序列（Last Output Sequence）：
以下是一个示例，展示如何让模型以更详细、冗长的方式回复，使用 Llama 3 模板：&lt;|eot_id|&gt;
&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt; 长度：400字
情节：{{char}} 以详细和冗长的方式回复 {{user}}。
&lt;|start_header_id|&gt;writer character: {{char}}&lt;|end_header_id|&gt;
使用 ChatML 模板表达如下：&lt;|im_end|&gt;
&lt;|im_start|&gt;user
长度：400字
情节：{{char}} 以详细和冗长的方式回复 {{user}}。
&lt;|im_end|&gt;
&lt;|im_start|&gt;text names= {{char}}
你可以根据自己的情境或需要调整其中的文本内容。如果模型重复了上下文中的内容，你可以尝试增加“重复惩罚”（Repetition Penalty）设置，或者尝试重新措辞上下文中的重复部分。 如果模型在同一条消息中重复自己，可以尝试增加“存在惩罚”（Presence Penalty）或“频率惩罚”（Frequency Penalty）。如果你想让角色做某件事，或者引导情节朝某个方向发展，可以使用 user 角色（即 &lt;|im_start|&gt;user 前缀）。<br>目前，这个功能并没有在 SillyTavern 中原生集成，但你可以按照上面描述的 最后输出序列（Last Output Sequence）方式插入 user（指令）回合。具体的指令格式示例，请参见<a data-tooltip-position="top" aria-label="https://dreamgen.com/docs/models/opus/v1#prompt-instructions" rel="noopener nofollow" class="external-link is-unresolved" href="https://dreamgen.com/docs/models/opus/v1#prompt-instructions" target="_self">这里</a>。]]></description><link>sillytavern/2-使用指南/2.5.5-dreamgen.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.5 DreamGen.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155858559.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155858559.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.11 TabbyAPI]]></title><description><![CDATA[一个基于 FastAPI 的应用程序，允许使用 Exllamav2 后端生成文本，支持 Exl2、GPTQ 和 FP16 模型。
<a data-tooltip-position="top" aria-label="https://github.com/theroyallab/tabbyAPI" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/tabbyAPI" target="_self">GitHub</a> <br>
按照官方 TabbyAPI GitHub 上的<a data-tooltip-position="top" aria-label="https://github.com/theroyallab/tabbyAPI/wiki/01.-Getting-Started" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/tabbyAPI/wiki/01.-Getting-Started" target="_self">安装说明</a>进行操作。 <br>
创建你的config.yml文件，设置你的模型路径、默认模型、序列长度等。大多数（如果不是全部）设置可以忽略，除非有特殊需求。<a data-tooltip-position="top" aria-label="https://github.com/theroyallab/tabbyAPI/wiki/02.-Server-options" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/tabbyAPI/wiki/02.-Server-options" target="_self">配置文件说明</a>。 启动 TabbyAPI。如果一切正常，你应该会看到类似这样的输出：<br>
<img alt="tabby-terminal" src="img/20241222160414677.png" target="_self"> 在 SillyTavern 中的文本补全 API 部分，选择 TabbyAPI。 从 TabbyAPI 终端复制你的 API 密钥，并将其粘贴到Tabby API key中，确保API URL正确（默认值应为http://127.0.0.1:5000）。 如果一切设置正确，你应该会看到类似下面的界面：<br><img alt="tabby-config" src="img/20241222160414678.png" target="_self">现在你可以开始使用 TabbyAPI 进行聊天了！TabbyAPI 的开发者创建了一个官方扩展，可以直接从 SillyTavern 加载/卸载模型。安装方法非常简单： 在 SillyTavern 中，点击扩展（Extensions）标签，进入下载扩展和资源（Download Extensions &amp; Assets）。 将https://raw.githubusercontent.com/theroyallab/ST-repo/main/index.json复制到资产 URL（Assets URL）框中，然后点击右侧的插件按钮。 <br>
你应该会看到如下界面。点击旁边的下载按钮，下载 Tabby Loader。
<img alt="tabby-assets" src="img/20241222160414679.png" target="_self"> 如果安装成功，你会看到屏幕顶部出现绿色弹窗。在扩展（Extensions）标签下，找到 TabbyAPI Loader，将你的管理员密钥（Admin Key）从 TabbyAPI 终端复制并粘贴进去。 点击模型选择（Model Select）旁边的刷新按钮。当你点击下面的文本框时，你应该会看到模型目录下的所有模型。<br>
<img alt="tabby-loader" src="img/20241222160414680.png" target="_self"> 现在你可以直接在 SillyTavern 中加载和卸载你的模型了！<br>如果你还需要帮助，访问<a data-tooltip-position="top" aria-label="https://github.com/theroyallab/tabbyAPI" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/tabbyAPI" target="_self">TabbyAPI GitHub</a>，其中包含开发者的官方 Discord 服务器链接，并且可以<a data-tooltip-position="top" aria-label="https://github.com/theroyallab/tabbyAPI/wiki/1.-Getting-Started" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/theroyallab/tabbyAPI/wiki/1.-Getting-Started" target="_self">阅读维基</a>。]]></description><link>sillytavern/2-使用指南/2.5.11-tabbyapi.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.11 TabbyAPI.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160414677.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160414677.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.4 OpenRouter]]></title><description><![CDATA[由于地理限制或排队等候，无法访问 OpenAI / Claude API 吗？使用 OpenRouter。OpenRouter 通过让您使用他们拥有的密钥访问 GPT-4 和 Claude 2 等模型，提供了一项服务，所有模型共享一个信用池。它提供免费试用（大约 $1），试用期后付费。无需订阅或月费——您只需为实际使用的服务付费。某些模型提供有限上下文大小的免费访问。
<a data-tooltip-position="top" aria-label="https://openrouter.ai/models?o=pricing-high-to-low" rel="noopener nofollow" class="external-link is-unresolved" href="https://openrouter.ai/models?o=pricing-high-to-low" target="_self">OpenRouter 定价详情</a>
<br>创建 OpenRouter 账户：<a data-tooltip-position="top" aria-label="https://openrouter.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="https://openrouter.ai/" target="_self">openrouter.ai</a>
<br><img alt="openrouter-connection" src="img/20241222155836386.png" target="_self">从上到下（见上图）：
选择“聊天完成”API
选择 OpenRouter 源
<br>点击“授权”以通过 OAuth 流程获取密钥。或者，您可以在<a data-tooltip-position="top" aria-label="https://openrouter.ai/keys" rel="noopener nofollow" class="external-link is-unresolved" href="https://openrouter.ai/keys" target="_self">这里</a>生成 API 密钥，并将其粘贴到框中。
点击“连接”并选择一个模型
（可选）使用“测试消息”按钮验证连接是否正常
<br><a data-tooltip-position="top" aria-label="https://windowai.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://windowai.io/" target="_self">WindowAI</a> 是由 OpenRouter 制作的浏览器扩展，可以控制您在任何启用的站点或网页应用中的 OpenRouter 连接。您也可以在该平台上使用您自己的 Claude 和 OpenAI API 密钥。]]></description><link>sillytavern/2-使用指南/2.5.4-openrouter.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.4 OpenRouter.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222155836386.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222155836386.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.6 KoboldAI Horde]]></title><description><![CDATA[
KoboldAI Horde 是一个由志愿者运行的众包分布式 GPU 集群。
默认情况下，您的输入会匿名发送，且响应不能被运行 Horde Worker 的人查看。
然而，作为一个开源程序，恶意 Worker 可能会修改代码来： 记录您的活动（输入提示、AI 响应）。
生成不良或冒犯性的响应。 !!!警告使用 Horde 时，绝对不要发送任何个人信息，如姓名、电子邮件地址等。!!!开启“仅限可信 Workers”选项后，系统会限制可用的 Worker 选择，只选择那些在 Horde 上托管了一段时间并且通常被认为是可信的 Worker。但即便如此，他们仍然可能会看到您的提示，特别是如果他们使用了未经审核的软件。为减少这个问题，SillyTavern 内置了以下功能：
当由 Horde Worker 生成聊天响应时，SillyTavern 会记录该 Worker 的 ID 和他们使用的模型。
您可以通过悬停鼠标光标在聊天项上查看这些信息（见下图）。
如果您认为收到的响应存在恶意内容，可以将此信息提交给 Horde 管理员，通过 <a data-tooltip-position="top" aria-label="https://koboldai.org/discord" rel="noopener nofollow" class="external-link is-unresolved" href="https://koboldai.org/discord" target="_self">Kobold Discord</a> 进行审核，并可能对该 Worker 采取纪律处分。
<br><img alt="horde-worker" src="img/20241222160328301.png" target="_self">
SillyTavern 能够默认连接到 Horde API，无需额外设置。
在 ST API 面板中选择 'KoboldAI Horde' 作为 API 下拉菜单。
在面板底部选择一个或多个模型（“AI 大脑”）。
选择一个角色并开始聊天。
<br><img alt="horde-config" src="img/20241222160328302.png" target="_self">警告
默认情况下，您的 SillyTavern 实例会连接到 Horde 的低优先级“访客账户”。
这意味着您可能需要等待很长时间才能收到回复。
为减少等待时间，请参考以下建议。 <br><a data-tooltip-position="top" aria-label="https://aihorde.net/register" rel="noopener nofollow" class="external-link is-unresolved" href="https://aihorde.net/register" target="_self">在 Horde 网站上注册一个账户</a>，然后将您的 Horde 密钥添加到 SillyTavern 的 Horde API 密钥框中。
<br><a data-tooltip-position="top" aria-label="https://github.com/Haidra-Org/AI-Horde-Worker#readme" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Haidra-Org/AI-Horde-Worker#readme" target="_self">设置一个 Horde Worker</a> 来提供您的 GPU 供他人使用。 <br>允许其他人使用您的 GPU 会赚取 <a data-tooltip-position="top" aria-label="https://github.com/Haidra-Org/AI-Horde/blob/main/FAQ.md#kudos" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Haidra-Org/AI-Horde/blob/main/FAQ.md#kudos" target="_self">'Kudos'</a>，这是一种仅在 Horde 内部使用的货币。
您账户中的 Kudos 越多，您从其他 Horde Worker 那里获得的聊天响应就越快。
<br>Kudos 还可以用于在 <a data-tooltip-position="top" aria-label="https://stablehorde.net/" rel="noopener nofollow" class="external-link is-unresolved" href="https://stablehorde.net/" target="_self">Stable Horde</a> 上生成 AI 图像。 SillyTavern 支持通过 Stable Horde 生成图像。 <br>如果您的 GPU 不足以运行 AI，或者您没有电脑，您仍然可以通过 <a data-tooltip-position="top" aria-label="https://github.com/Haidra-Org/AI-Horde/blob/main/FAQ.md#i-dont-have-a-powerful-gpu-how-can-i-get-kudos" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Haidra-Org/AI-Horde/blob/main/FAQ.md#i-dont-have-a-powerful-gpu-how-can-i-get-kudos" target="_self">参与 Horde 社区来赚取 Kudos</a>。
]]></description><link>sillytavern/2-使用指南/2.5.6-koboldai-horde.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.6 KoboldAI Horde.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160328301.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160328301.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.7 KoboldCpp]]></title><description><![CDATA[KoboldCpp 是一个用于 GGML 和 GGUF 模型的自包含 API。这个 <a data-tooltip-position="top" aria-label="https://huggingface.co/spaces/NyxKrage/LLM-Model-VRAM-Calculator" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/spaces/NyxKrage/LLM-Model-VRAM-Calculator" target="_self">VRAM 计算器</a> 由 Nyx 提供，将告诉你大致需要多少 RAM/VRAM 来运行你的模型。本指南假设你使用的是 Windows 系统。
<br>下载最新版本： <a data-tooltip-position="top" aria-label="https://github.com/LostRuins/koboldcpp/releases" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LostRuins/koboldcpp/releases" target="_self">KoboldCpp 版本发布页</a>
启动 KoboldCpp，你可能会看到微软 Defender 弹出窗口，点击 仍然运行。
从版本 1.58 起，KoboldCpp 的界面应该是这样的：<br>
<img alt="image 14|image 14.png" src="img/20241222160336015.png" target="_self">
在 快速启动 标签页中，选择你的模型和你偏好的 上下文大小。
选择 使用 CuBLAS，并确保 GPU ID 旁边的黄色文本与您的 GPU 匹配。
如果你有低 VRAM，千万不要勾选 低 VRAM。
除非你有 Nvidia 10 系列或更老的 GPU，否则请取消勾选 使用 QuantMatMul (mmq)。
GPU 层 在加载模型时应该已经自动填充，暂时保持默认即可。
在 硬件 标签页中，勾选 高优先级。
点击 保存，这样每次启动 KoboldCpp 时就无需重新配置。
点击 启动，并等待模型加载完成。
你应该看到类似下面的输出：Load Model OK: True
Embedded Kobold Lite loaded.
Starting Kobold API on port 5001 at http://localhost:5001/api/
Starting OpenAI Compatible API on port 5001 at http://localhost:5001/v1/
======
Please connect to custom endpoint at http://localhost:5001
现在，你可以在 SillyTavern 中连接到 KoboldCpp，API URL 设置为 http://localhost:5001，并开始聊天。恭喜！你完成了！但是，实际上还有一些小细节。KoboldCpp 运行正常，但你可以通过确保尽可能多的层被转移到 GPU 上来提高性能。你应该在终端中看到类似的输出：
llm_load_tensors: 正在将 9 个重复层转移到 GPU
llm_load_tensors: 已将 9/33 个层转移到 GPU
llm_load_tensors: &nbsp; &nbsp; &nbsp; &nbsp;CPU 缓存大小 = 25215.88 MiB
llm_load_tensors: &nbsp; &nbsp; &nbsp;CUDA0 缓存大小 = &nbsp;7043.34 MiB
....................................................................................................
llama_kv_cache_init: &nbsp;CUDA_Host KV 缓存大小 = &nbsp;1479.19 MiB
llama_kv_cache_init: &nbsp; &nbsp; &nbsp;CUDA0 KV 缓存大小 = &nbsp; 578.81 MiB 不要担心这些数字；这部分其实比看起来更简单。CPU 缓存大小 是指系统内存的使用情况，可以忽略它。CUDA0 缓存大小 是指 GPU VRAM 的使用情况。CUDA_Host KV 缓存大小 和 CUDA0 KV 缓存大小 则指示为模型的上下文专门分配的 GPU VRAM。在这个例子中，KoboldCpp 使用了大约 9 GB 的 VRAM。我有 12 GB VRAM，当前只有 2 GB VRAM 用于上下文，所以我还有大约 10 GB VRAM 用于加载模型。因为 9 层使用了大约 7 GB VRAM，7000 / 9 = 777.77，我们可以假设每层大约使用 777.77 MiB 的 VRAM。10,000 MiB / 777.77 = 12.8，所以我将其四舍五入并决定加载 12 层模型。现在，你可以根据你的模型、上下文大小和 VRAM 进行计算，并重新启动 KoboldCpp：
如果你聪明的话，应该已经点击了 保存，这样你可以加载之前的配置。否则，请重新选择之前的设置。
将 GPU 层 更改为你新的、基于 VRAM 优化后的数量（在我的例子中是 12 层）。
点击 保存 保存你的更新配置。
你现在应该看到类似的输出：llm_load_tensors: 正在将 12 个重复层转移到 GPU
llm_load_tensors: 已将 12/33 个层转移到 GPU
llm_load_tensors: CPU 缓存大小 = 25215.88 MiB
llm_load_tensors: CUDA0 缓存大小 = 9391.12 MiB
....................................................................................................
llama_kv_cache_init: CUDA_Host KV 缓存大小 = 1286.25 MiB
llama_kv_cache_init: CUDA0 KV 缓存大小 = 771.75 MiB
现在 KoboldCpp 已经使用了大约 11.5 GB 的 VRAM，离我的 12 GB VRAM 还剩下一点空间。这样设置比 KoboldCpp 自动生成的设置要好得多。恭喜！你（真的）完成了！<br>想了解更深入的 KoboldCpp 设置，可以查看 Kalmomaze 的 <a data-tooltip-position="top" aria-label="https://rentry.org/llama_v2_sillytavern" rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.org/llama_v2_sillytavern" target="_self">简单 Llama + SillyTavern 设置指南</a>。]]></description><link>sillytavern/2-使用指南/2.5.7-koboldcpp.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.7 KoboldCpp.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160336015.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160336015.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.8 Mancer]]></title><description><![CDATA[Mancer 是一个大型语言模型推理服务，允许你运行任何你想要的提示，并且不会对回答进行审查。大多数模型需要预加载余额才能开始聊天，但截至2024年11月28日，仍有一个免费模型可用。
<a data-tooltip-position="top" aria-label="https://mancer.tech/models" rel="noopener nofollow" class="external-link is-unresolved" href="https://mancer.tech/models" target="_self">模型</a>
<br><a data-tooltip-position="top" aria-label="https://mancer.tech/pricing" rel="noopener nofollow" class="external-link is-unresolved" href="https://mancer.tech/pricing" target="_self">定价</a> <br>在 <a data-tooltip-position="top" aria-label="https://mancer.tech/" rel="noopener nofollow" class="external-link is-unresolved" href="https://mancer.tech/" target="_self">mancer.tech</a> 上注册一个账户。
点击仪表盘并复制你的 API 密钥。
<br><img alt="mancer-dashboard" src="img/20241222160343571.png" target="_self">
在 SillyTavern 中，选择文本完成 API，然后在 API 类型中选择 Mancer。
输入你的 Mancer API 密钥并点击连接。
<br><img alt="mancer-key" src="img/20241222160343573.png" target="_self">API 密钥现在，你应该能够与任何你选择的 Mancer 模型进行对话。<br>如果你不介意你的聊天记录可能被用于训练模型、改善 Mancer 的服务、发布数据集或他们可能做的任何其他事情，你可以选择启用匿名日志记录，这样可以在选择模型时享受 25% 的代币折扣。只需访问你的 <a data-tooltip-position="top" aria-label="https://mancer.tech/dashboard.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://mancer.tech/dashboard.html" target="_self">Mancer 仪表盘</a>，并勾选 启用匿名日志。<br>如果你需要帮助，可以前往 SillyTavern Discord 上的 <a data-tooltip-position="top" aria-label="https://discord.gg/Ze9UyNu3" rel="noopener nofollow" class="external-link is-unresolved" href="https://discord.gg/Ze9UyNu3" target="_self"></a><a href=".?query=tag:mancer" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#mancer">#mancer</a> 支持频道。]]></description><link>sillytavern/2-使用指南/2.5.8-mancer.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.8 Mancer.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160343571.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160343571.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.5.9 NovelAI]]></title><description><![CDATA[NovelAI 是一个付费订阅服务，允许用户无限制地访问其高质量的内部文本生成、图像生成和文本到语音模型。注册账户以开始使用：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://novelai.net/" target="_self">https://novelai.net/</a>你将获得 50 次生成 的免费试用，用于评估该模型。当出现 "Not eligible for this model" 错误时，这意味着你已经用完了试用期，需要订阅付费计划。要获取 NovelAI 的 API 密钥，请按照以下步骤操作：
<br>
点击左侧边栏顶部的齿轮图标。
<img alt="novel-side" src="img/20241222160352040.png" target="_self"> <br>
在“用户设置”下选择“账户”。
<img alt="novel-user" src="img/20241222160352041.png" target="_self"> <br>
选择“获取持久 API 密钥”。
<img alt="novel-account" src="img/20241222160352042.png" target="_self"> <br>
点击复制图标，将 NovelAI API 密钥复制到剪贴板。
<img alt="novel-token" src="img/20241222160352043.png" target="_self"> 如果你有 Opus，那么 Erato 是推荐的模型。如果没有 Opus，那么 Kayra 是最好的可用模型。Clio 在 Tablet/scroll 等级上有更大的上下文大小，但 Kayra 的强大性能通常弥补了这一差异。设置文件位于这里（SillyTavern/data/&lt;用户用户名&gt;/NovelAI Settings）。你也可以手动添加自己的设置文件。每条消息生成的文本量。请注意，NovelAI 对每条回复有 150 个词元的限制。聊天中随时保留的词元数量。最大上下文大小取决于模型和你的订阅等级：
Kayra（Tablet） - 3072 词元
Kayra（Scroll） - 6144 词元
Erato（Opus 独享）、Kayra（Opus）和 Clio（所有等级） - 8192 词元
插入在聊天顶部的文本，用于修改写作风格。推荐的格式是短标签列表，例如 "[ Style: chat, detailed, sensory ]"。根据 NovelAI 的说明，默认预设适用于以下场景。
Golden Arrow - 一个不错的全能型预设。
Wilder - 词汇选择更丰富，重启时差异较大，容易出错。
Zany Scribe - 避免错误和重复，优先选择更复杂的词汇。
Dragonfruit - 语言丰富复杂，重复较少，容易出错和自相矛盾。
Shosetsu - 设计用于写作日文，但也适用于英文。 Asper - 适用于创意写作，常常有意想不到的转折。
Carefree - 一个不错的全能型预设。
Fresh-Coffee - 保持正轨，擅长处理指令。
Pro_Writer - 模拟畅销小说的节奏和感觉。
Stelenes - 更倾向选择合理的替代方案。重启时有更多变化。
Tea_Time - 开始时较慢，但一旦进入状态，效果不错。
Writers-Daemon - 极具创意，有时会过于天马行空。 Edgewise - 处理多种生成风格非常好。
Fresh Coffee - 保持正轨。
Long-Press - 适用于创意散文。
Talker Chat - 设计用于对话风格生成。
Vingt-Un - 一个不错的全能型预设，偏向散文风格。
在从其他 ST 后端 API 切换到 NovelAI 时，常常会遇到一些常见问题和疑问。其主要区别在于模型的训练目标。你可能已经使用过 OpenAI 或 Anthropic 模型（或是模仿这些模型的本地模型），这些模型是围绕着遵循用户指令构建的。而 NovelAI 的模型则是纯粹围绕着文本补全构建的：它们并不是将你的输入视为一条消息并生成回答，而是尝试继续输入的提示内容。由于这个区别，很多适用于其他 API 的提示和常识可能对 NovelAI 并不适用。在高级格式化（A 图标）下：
将“上下文模板”设置为“NovelAI”
将“分词器”设置为“最佳匹配”
勾选“始终将角色名字添加到提示中”
勾选“折叠连续的换行符”
取消勾选“Instruct 模式”下的“启用”框
在用户设置（齿轮图标）下：
开启“滑动”功能（虽然这不是 NovelAI 特有的，但它非常有用，建议开启）
为了优化你的角色卡片，使其适配 NovelAI，有两种推荐的写作方法：散文描述和属性列表。散文描述非常简单，可能看起来不太像有效的写作方法：例如，“Sylpheed 是一位看起来年轻但实际上有 900 岁的妖精。她个子矮小，身材娇小，拥有一头长长的白色头发，头发末端渐变成绿色，并且她的侧马尾编发里有绿色的渐变色，眼睛是像十字架一样的翡翠绿眼睛……” 真的，就是这样。只需要用正常的句子写出角色的外貌、行为等，AI 就能理解并生成相关内容。如果你对自己的写作能力不太自信，或者想采用一种更有结构化的方式，你可以使用属性方法，这种方法在 NovelAI 的训练数据中也有应用。这是一个简单的角色特征列表。以下是经过测试并有效的属性列表：Name:
AKA:
Type: character
Setting:
Nationality:
Species:
Gender:
Age:
Height:
Weight:
Appearance:
Clothing:
Attire:
Personality:
Mind:
Mental:
Likes:
Dislikes:
Sexuality:
Speech:
Voice:
Abilities:
Skills:
Quote:
Affiliation:
Occupation:
Reputation:
Secret:
Family:
Allies:
Enemies:
Background:
Description:
Attributes:
“Type: character” 是告诉 AI 这在描述一个角色（而不是位置、物体或其他类型的东西）。其余的属性都是可选的，有些可能是冗余的（例如 Personality、Mind 和 Mental 基本上是同义的），但这些属性经过测试，适用于 NovelAI 的模型。你只需填写与角色相关的部分。属性应使用小写字母，且用逗号分隔，不需要用引号括起来。例如：Skills: lockpicking, stealth, running away very fast
推荐使用这些方法，因为它们已经在 NovelAI 的训练数据中使用过，因此能特别适应该模型。这里有几张为 NovelAI 特别制作的示例卡片，展示了如何用不同的方法为 NovelAI 创建角色卡片。第一张卡片 Valka 使用了属性方法来描述角色，而第二张卡片 Eris 则使用了散文描述，并且加入了大量的示例对话。<br><img alt="image 15|image 15.png" src="img/20241222160352044.png" target="_self">Valka<br><img alt="image 1 6|image 1 6.png" src="img/20241222160352045.png" target="_self">Eris大多数现有的角色卡片格式并不适合 NovelAI。它们可以生成一些结果，甚至是不错的结果，但也有许多问题。W++ 就是一个很大的问题，它与 NovelAI 的训练数据差距较大，且它频繁使用括号/花括号/引号会消耗大量的 token，导致卡片内容膨胀，且没有实际的好处。在现有格式中，除了 NovelAI 原生支持的格式外，AliChat 是最可能适用于 NovelAI 的一个格式，因为它使用示例消息的方式来同时传达角色信息和角色的声音，这种方式符合 AI 输出的消息类型。对于其他格式，因为它们通常是列举角色特征的方式，可以较为简单地转换为属性方法。通常选择“不使用模块”会比较好。如果你想让角色说话更加华丽，可以使用“散文增强器”，但要小心不要过度使用。如果你想创建一个文本冒险风格的卡片或故事，可以使用“文本冒险”模块。你可以在需要时调用指令模块。创建一个新行，并将你的指令放在花括号中，像这样：{ CharName is offended by that seemingly innocuous statement }（花括号内的文本与外部的空格是必需的）。这样做会自动将 AI 切换到指令模块，并持续一段时间。你不希望一直使用指令模块，因为它往往会产生比其他模块更少的创造性输出，只在你需要将 AI 强烈引导到特定方向时使用。NovelAI 将响应的长度限制为大约 150 个 token，即使你将滑块设置得比这个值大。当达到滑块中的 token 数量或 150 个 token 时，以较小者为准，它将生成最多 20 个 token，寻找停顿序列或句子的结尾，因此实际的响应限制大约为 170 个 token，此时响应会停止，从而导致被截断。如果被截断，你可以选择“继续”选项（位于文本框左侧的三行菜单中）来让角色继续他们的回答。如果你经常需要超过 170 个 token 的回复，可以通过以下方式绕过限制：
将响应长度保持在 150 个 token。
在高级格式设置中启用“自动继续”。
将“目标长度”设置为所需长度。
这样会将多个生成连接起来，以获得更长的消息，但无法保证回复的长度会完全达到预期，因为模型可能决定在中途停止。请参阅上面的关于响应被截断的部分。那将有助于确保响应不会因为达到生成长度限制而过早被截断。如果你的回复没有被截断，但仍然太短，可能是因为“垃圾进，垃圾出”的原因——如果你给模型不好的例子，它会产生不好的输出。如果角色卡没有示例对话或对话很短，而你发送给机器人的消息也很短，模型会从中学到，并将其视为正确的方式，导致回复也会很短。所以，写更长的示例对话和更长的消息给机器人。（你也可以使用 NovelAI 为你写一些示例对话，而不是自己写。）
确保角色卡的第一条消息和示例对话中没有角色为你采取行动——如果有，重新编写它们，去除让角色为你行动的内容
确保选中了“始终将角色的名字添加到提示”选项
确保你当前使用的用户角色与整个聊天中的角色一致。如果你更改了用户角色而没有更改回来（或没有将用户角色锁定到此聊天中），通常的规则就无法停止为你生成内容
将["\\n\\{\\{user\\}\\}:"]添加到自定义停止字符串中（虽然通常不需要，但有时有帮助）
有很多原因可能导致这种情况，因此我们需要检查几个地方：
确保在高级格式设置中勾选了“始终将角色的名字添加到提示”选项
检查是否有来自 API 的错误。虽然你可以使用 SillyTavern 进行 NAI 免费试用，但试用期结束后你会收到错误信息
检查“自定义停止字符串”中是否有内容，如果这些内容出现在响应的开头，可能会导致提前被截断
通常你不应该使用作者注释。它会被插入到上下文的末尾，而在 NAI 的模型中，它经常会压倒其他上下文内容。它主要是旧版较弱模型中的遗留产物，在那个时候比较必要。将以下内容作为系统消息或在下一条消息的开头新建一行：***
[ 2天后 ]
然后在下一行继续写下你的消息。方括号中的文本可以是时间跳跃、新的地点，或者任何其他的内容。“__*”符号（幽默地被称为“dinkus”）告诉 AI 场景发生了变化，括号中的文本则为这个变化提供了更多的背景信息。如上所述，你可以将重复惩罚滑块稍微调高一点，虽然调得太高可能会导致输出变得不连贯。为了更彻底地解决问题，可以回到上下文中，特别是最近的消息，删除重复的单词/短语。将它从上下文中移除，能减少 AI 开始重复的可能性。]]></description><link>sillytavern/2-使用指南/2.5.9-novelai.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.9 NovelAI.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160352040.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160352040.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.6 提示词（Prompt）]]></title><description><![CDATA[当你向你的 AI 发送一条消息时，你所写的文本会与其他文本组合，形成一个统一的请求，这个统一的请求被称为“提示词（Prompt）”，有时也称为“请求（Request）”或“上下文（Context）”。提示词可以包含各种类型的文本，包括：
向 AI 提供的<a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a>，指导 AI 如何生成回复
<br>定义 AI 应该扮演的<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>
<br>定义你正在扮演的<a data-href="2.8 用户设置" href="sillytavern/2-使用指南/2.8-用户设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.8 用户设置</a>
<br>与 AI 交互时的<a data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.7 世界书（World Info）</a>
<br>来自<a data-href="2.9.6 数据库（RAG）" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.6 数据库（RAG）</a>的相关文档或信息
<br>对过去对话的<a data-href="3.13 总结（Summarize）" href="sillytavern/3-扩展功能/3.13-总结（summarize）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.13 总结（Summarize）</a>
<br><a data-href="3.18 网页搜索" href="sillytavern/3-扩展功能/3.18-网页搜索.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.18 网页搜索</a>或其他<a data-href="4.2 函数调用" href="sillytavern/4-开发与自动化/4.2-函数调用.html#_0" class="internal-link" target="_self" rel="noopener nofollow">4.2 函数调用</a>
对话中的上一条消息
你向 AI 发送的消息
<br>用于指导 AI 如何生成回复的<a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a>
这些内容可能非常繁杂！为了帮助你理解如何构建和修改发送给 AI 的请求，SillyTavern 标识了你可能想在提示词中包含的不同元素。你可以根据你希望与 AI 交互的方式来结构化你的提示词。<br>例如，若你想定义 AI 应扮演的角色，你可以在<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>中使用描述字段。阅读最终发送给 AI 的提示词非常有助于理解 AI 是如何生成回复的，并且有助于理解其生成过程。你可以通过以下方式查看提示词：
<br>
使用 AI 回复中的 提示词 查看 <img alt="image 9|image 9.png" src="img/20241222160456665.png" target="_self"> <br>
使用<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-PromptInspector" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-PromptInspector" target="_self">提示词检查器</a>扩展程序 检查你正在运行 SillyTavern 的终端窗口中的日志 检查浏览器开发工具中的控制台 以正确的方式向 AI 呈现提示词的所有部分对于获得最佳回复至关重要。你可以控制提示词的构建方式。<br>文本生成 API
使用<a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>面板自定义文本生成 API 的提示词构建方式。
<br>对话生成 API
使用<a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>自定义对话生成 API 的提示词构建方式。
主要提示词（或系统提示词）定义了模型应该遵循的整体指令。它为对话设定了语气和背景。例如，它可以告诉模型扮演 AI 助手、写作伙伴或虚构角色的角色。<br>文本生成 API
<a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>是<a data-href="2.6.2 上下文模板" href="sillytavern/2-使用指南/2.6.2-上下文模板.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.2 上下文模板</a>的一部分，通常是模型收到的第一个提示词。
<br>对话生成 API
主要提示词是<a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>中的默认提示词。它通常是上下文中的第一条消息，由系统角色发送。
默认的主要提示词是：
写出 {{char}} 和 {{user}} 之间虚拟聊天中的下一条回复。
{{char}} 和 {{user}} 占位符会被你在对话中定义的角色和人格名称替换。<br>你可以在主要提示词中使用任何支持的<a data-tooltip-position="top" aria-label="2.9.1 角色设计 > 宏（替换标签）" data-href="2.9.1 角色设计#宏（替换标签）" href="sillytavern/2-使用指南/2.9.1-角色设计.html#宏（替换标签）_0" class="internal-link" target="_self" rel="noopener nofollow">{{宏}}标签</a>，以包括在不同对话或对话过程中可能变化的信息。默认的主要提示词帮助模型理解如何处理随后的角色和人格信息、如何解读过去的对话，并生成什么样的回复。这是一个灵活的通用提示词，适用于许多情境，因为它设定了 AI 是在与你的人格进行对话时以角色身份进行写作。然而，你可以根据需要调整主要提示词，以便更好地适应你的需求。以下是一些常见的调整原因：
提供额外的指令：例如，你希望 AI 解释其推理过程、遵循特定规则或避免某些话题。
明确 AI 的角色：例如，你希望 AI 充当旁白、讲故事的人或向导。
改变对话的背景：例如，你希望 AI 作为 AI 助手、文字冒险游戏或写作伙伴进行回应。
<br>试试看，找出最适合你的方式
本指南中的所有示例都在其他用户中取得了不错的效果，但适用于你的需求和你使用的模型的提示词可能不同。你可以尝试不同的指令和提示风格，看看哪些最适合你。如果不确定该尝试什么，你可以随时在<a data-tooltip-position="top" aria-label="https://discord.gg/sillytavern" rel="noopener nofollow" class="external-link is-unresolved" href="https://discord.gg/sillytavern" target="_self">SillyTavern Discord</a>上寻求帮助。
Join the SillyTavern Discord Server!
SillyTavern - LLM Frontend for PowerUsers | 25661 members<br>
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://discord.gg/sillytavern" target="_self">https://discord.gg/sillytavern</a> 在主要提示词中给 AI 提供额外的指令有助于它理解你希望从对话中得到什么。例如：
仅写一条回复，写至少一个段落，最多四个段落。 启用 Markdown 格式。使用它来格式化你的回复。将代码片段用三个反引号括起来。 用引号标出角色对话，用括号标出{{char}}的想法。 你是一个针对 13 到 17 岁用户的动漫角色扮演生成模型。你始终生成有趣、适合年龄的回复。 真实回答，并一步一步地写出你的思考过程，以确保得到正确的答案。
AI 通常更容易遵循关于它应该做什么的指令，而不是它不应该做什么。例如，如果你希望 AI 避免以某种方式写作，比起告诉它“不要那样写”，更有效的方式是直接告诉它你希望它如何写。而且，尽管“不要决定{{user}}说了什么或做了什么”通常会被包含在提示词中，以防止 AI 控制你的角色，但一些用户发现“以尊重{{user}}自主性的方式写出{{char}}的回应”效果更好。通常，对于关于用户或角色的信息、修改角色的写作和说话风格，或者给出其他特定指令，主要提示词并不是最合适的地方。主要提示词最好用于提供关于整个对话或你希望进行的某种对话类型的总体指令。在调整主要提示词以改善 AI 的回复时，请考虑 AI 从消息历史中获取了很多信息。历史记录是它对过去事件、角色互动和关系的记忆，以及它选择词汇和写作风格的指南。<br>你可以利用这一点，通过提供<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>来展示你希望 AI 如何回应。展示你想要的内容往往比解释它更为直观！当对话已经有历史记录时，修改主要提示词对 AI 的回复效果是有限的。在事件和关系方面，AI 会假设主要提示词发生在遥远的过去，而消息历史会更新它。在写作风格和词汇选择方面，AI 假设历史中的所有消息都是根据当前的主要提示词生成的，并且它应该继续以相同的方式生成消息。以下是一些处理这种情况的建议：
<br>将当前的指令插入到消息历史的末尾或之后，例如通过使用<a data-href="2.9.5 作者注释" href="sillytavern/2-使用指南/2.9.5-作者注释.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.5 作者注释</a>。
通过开始新的对话来测试你对主要提示词的更改。
编辑消息历史，删除或纠正不希望出现的行为示例。
<br>使用<a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a>为 AI 提供最终指令。
一开始就做到完美！
不要让 AI“得逞”做出你不希望它做的事情。如果你不喜欢 AI 的回复，别继续按它是正确的那样进行对话。相反，修改提示词，重新生成消息，然后从那里继续。这将帮助 AI 学会你希望它做什么。
在某些情况下，“虚构聊天”可能并不是适合你对话的背景。你可以从主要提示词中移除“虚构”背景：
写出 {{char}} 和 {{user}} 之间的对话。
有时你可能不希望 AI 把自己看作是在进行角色扮演。为了避免将 AI 视为角色，你可以去掉“AI”的概念，而聚焦于角色：
你是{{char}}，一个有用的助手。你为{{user}}提供有用的信息，帮助他们解答问题。
如果你希望 AI 充当旁白，描述事件的全知视角，或者创造自己的角色和背景呢？<br>一种方法是为 AI 创建一个作为旁白使用的角色。这个角色可以被命名为“旁白”或“AI”，表明 AI 是一个通用的讲故事者，或者它可以根据特定情境或背景进行命名，从而赋予 AI 在该设定下叙述故事的任务。这个设定的详细信息可以在<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>或<a data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.7 世界书（World Info）</a>中定义。你需要调整默认的主要提示词来反映 AI 的角色。对于通用的旁白，你可以使用：
你是{{char}}，一个熟练且多才多艺的讲故事者。讲述这个故事。
或者对于特定的设定：
你是一个奇幻场景的旁白。扮演那些访问{{char}}的角色。
澄清用户在对话中的角色也很重要。你的消息是故事的一部分，还是向旁白发出的指示，告诉旁白你角色的行动或台词？下面是一个包含用户在故事中的示例：
故事应该根据{{user}}的行动和对话进展。用第三人称讲述故事。
下面是一个将用户排除在故事之外的示例：
进入冒险模式。根据{{user}}的对话和行动在“&gt;”符号后讲述故事。生动地描述周围环境。要详细、有创意、冗长并富有主动性。通过引入奇幻元素和有趣的角色推动故事向前发展。
明确用户的角色不仅有助于 AI 理解如何回应你的消息，还能帮助 AI 理解在何种程度上它被允许控制你的角色。这可以避免 AI 做出你宁愿自己决定的事情。<br>文本生成 API
历史后指令不能全局定义。你可以通过<a data-href="2.9.5 作者注释" href="sillytavern/2-使用指南/2.9.5-作者注释.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.5 作者注释</a>来实现相同的效果。
若要使用每个角色的历史后指令，可以将它们添加到角色的<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>，并启用两个选项：<a data-href="2.8 用户设置" href="sillytavern/2-使用指南/2.8-用户设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.8 用户设置</a>和<a data-href="2.6.2 上下文模板" href="sillytavern/2-使用指南/2.6.2-上下文模板.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.2 上下文模板</a>。
历史后指令会作为一个不可见的用户角色注入，出现在提示词最后一行（通常包含回应消息的“头部”）。
<br>对话生成 API
历史后指令是<a data-href="2.9.2 聊天文件管理" href="sillytavern/2-使用指南/2.9.2-聊天文件管理.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.2 聊天文件管理</a>中的默认提示词之一。它通常是模型接收到的上下文中的最后一条消息，由系统角色发送。如果你的对话生成 API 不支持系统角色，它通常会被归为用户角色发送。
<br>你可以使用<a data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.7 世界书（World Info）</a>功能，在提示词中插入任何额外的信息。通过设置何时插入这些信息的条件，你可以引导 AI 包含特定的细节、改变它的回应方式，或者为对话添加新的元素。世界信息的一些常见用途包括：
一个关于世界或设定的“历史书”或“百科全书”
管理各种角色和情境的系统提示词
存储 AI 应该在对话中“回忆”的记忆
创建、编辑和共享角色细节的更模块化的系统
为 AI 提供随机事件和惊喜，或让 AI 制造让你反应的事件！
<br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a><br><a data-href="2.6.2 上下文模板" href="sillytavern/2-使用指南/2.6.2-上下文模板.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.2 上下文模板</a><br><a data-href="2.6.3 指令模式" href="sillytavern/2-使用指南/2.6.3-指令模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.3 指令模式</a><br><a data-href="2.6.4 分词器（Tokenizer）" href="sillytavern/2-使用指南/2.6.4-分词器（tokenizer）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.4 分词器（Tokenizer）</a><br><a data-href="2.6.5 CFG" href="sillytavern/2-使用指南/2.6.5-cfg.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.5 CFG</a><br><a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>]]></description><link>sillytavern/2-使用指南/2.6-提示词（prompt）.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6 提示词（Prompt）.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160456665.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160456665.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.6.5 CFG]]></title><description><![CDATA[页面作者：kingbri贡献者：kingbri, Guillaume "Vermeille" Sanchez, AliCatCFG，或称为无分类器引导（Classifier-Free Guidance），是一种用于使提示词（prompt）的某些部分更突出或更不显眼的方法。当前支持的后端包括 oobabooga 的 textgen WebUI、NovelAI 和 TabbyAPI。NovelAI 为 CFG 提供了自己的<a data-tooltip-position="top" aria-label="https://web.archive.org/web/20240917150051/https://docs.novelai.net/text/cfg.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://web.archive.org/web/20240917150051/https://docs.novelai.net/text/cfg.html" target="_self">文档</a>。警告：CFG 会增加显存使用，因为它需要加载多个提示词！如果生成过程中显存不足，请考虑减少上下文大小、使用更小的模型参数，或完全关闭 CFG。访问 CFG 设置的方法与访问作者注释的方法相同：<br><img alt="cfg-hamburger" src="img/20241222160518232.png" target="_self">下面是 CFG 面板的界面：<br><img alt="cfg-panel" src="img/20241222160518233.png" target="_self">CFG 面板中有四个下拉菜单： 聊天 CFG
只作用于当前聊天的 CFG 规模和提示词。 角色 CFG
只作用于指定角色的 CFG 规模和提示词。 全局 CFG
全局覆盖 CFG 规模和提示词（也会覆盖模型预设！）。 CFG 高级设置（前称为 CFG 提示词级联）
用于组合前述三个下拉菜单中的提示词，并设置插入深度。 注意：如果引导规模设置为 1，则不发送任何内容，因为在此状态下 CFG 是关闭的。在群组聊天中，CFG 规模面板的界面如下：<br><img alt="cfg-groups" src="img/20241222160518234.png" target="_self">主要的变化是角色 CFG 被移除，聊天 CFG 下拉菜单中增加了一个复选框，名为“使用角色 CFG 规模”。勾选该复选框后，将使用当前角色的引导规模，而不是聊天 CFG 规模的设置。此功能的主要用途是根据每个角色的不同需求来调整引导规模。此外，在提示词级联中勾选“角色负面提示”复选框时，将附加独立角色的负面提示词与聊天提示词（如果启用）一起发送。是的，但也不完全一样。LLM（大语言模型）中的 CFG 工作原理与 Stable Diffusion 中的有所不同。LLM 中的 CFG 是基于“提示词混合”的原理。CFG 公式会将正面和负面提示词混合，然后计算它们之间的差异，最终生成一个组合提示词并生成响应。以下是一个帮助理解该概念的插图。红色代表负面提示词，蓝色代表中性提示词，紫色代表混合后的结果。所有白色区域在三个提示词中都是相同的，所以它们没有参与 CFG 混合。<br><img alt="cfg-diagram" src="img/20241222160518235.png" target="_self">如果你想了解更多关于 LLM 中的 CFG，Vermifuge 的原始论文可以参考。建议你阅读或收听：
<br>论文 - <a data-tooltip-position="top" aria-label="https://arxiv.org/abs//2306.17806" rel="noopener nofollow" class="external-link is-unresolved" href="https://arxiv.org/abs//2306.17806" target="_self">[2306.17806] Stay on topic with Classifier-Free Guidance (arxiv.org)</a>
<br>音频版 - <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=MGY00YFcyco" target="_self">https://www.youtube.com/watch?v=MGY00YFcyco</a>
不需要！CFG 提示词是完全可选的。只需将引导规模调整到 1 以上，也可以产生效果，进一步突出聊天和角色交互。如前所述，CFG 提示词与 Stable Diffusion 中的负面标签和嵌入有所不同。那么，如何创建提示词呢？警告：假设你已经使用 PLists 和 Ali:Chat 创建了一个角色。如果没有创建角色，可以尝试不同的提示词技巧。假设我有一个名为“John”的角色，John 应该始终表现得快乐和兴奋，但在与 John 对话时，他有时会显得悲伤和沮丧。此时，CFG 来救场！只需创建负面提示词[John的情绪：悲伤，沮丧]，就可以帮助去除悲伤的部分。你还可以选择创建正面提示词[John的情绪：快乐，喜悦]，进一步强化 John 的快乐情绪。在前面部分，我已经提到过了这一点，但我想再详细说明一下。正面提示词用于进一步强调角色的某些特质。以 John 为例，创建一个正面提示词[John的情绪：快乐，喜悦]，将使 John 的对话变得更加快乐，而不会显得像没有加入正面提示词时那样悲伤。这些只是经验性的宽松指南，适用于一种特定的角色格式。你可以尝试其他多种创建提示词的方式。欢迎与其他用户分享你的想法！这里有一个基本规则。引导规模为1时，表示 CFG 被禁用。实际上，当引导规模为 1 时，SillyTavern 不会向后端发送任何内容。引导规模大于 1 时，会呈现其他部分所显示的效果，效果的强弱取决于调整的程度。然而，如果引导规模小于 1，则会产生相反的效果，因为负面提示词将作为主要提示词使用。再次以 John 为例，负面提示词是[John的情绪：悲伤，沮丧]，正面提示词是[John的情绪：快乐，喜悦]，并且引导规模为0.8。这时，负面提示词的影响将更强，John 会表现得比正常更悲伤，而不是更快乐。总结：使用1.5的引导规模开始，然后根据输出的效果调整。负面和正面提示词可以在不同类型的 CFG 之间级联（这些类型包括每个聊天、每个角色和全局覆盖）。有关更多信息，请参见配置部分。遵循基本规则：提示词在生成文本时的位置越低，其影响力越大。对于聊天，我推荐使用默认的深度1，因为它在与其他 SillyTavern 组件兼容时非常灵活。然而，如果你想进行实验，可以尝试使用深度0。但请注意，过度修改插入深度可能会显著改变响应的结果，因此不推荐在此使用提示词级联！]]></description><link>sillytavern/2-使用指南/2.6.5-cfg.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6.5 CFG.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160518232.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160518232.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.8.2 视觉小说 (VN) 模式]]></title><description><![CDATA[视觉小说 模式是 SillyTavern 中的一个特殊屏幕布局，允许用户与角色进行对话，角色以类似《心跳文学社》、 《Grisaia 的果实》、 《Fate/stay night》等著名视觉小说游戏中的人物立绘（或角色卡图像）方式呈现。在 SillyTavern 中，视觉小说 模式是内置功能，可以通过进入用户设置（用户设置图标）并在无文本阴影下勾选 视觉小说 模式 来启用。<img alt="用户设置" src="img/20241222160545021.png" target="_self">用户设置禁用视觉小说模式与启用的步骤相同。只需取消勾选视觉小说模式，您将返回到普通的聊天界面。<br><img alt="VN 显示" src="img/20241222160545022.png" target="_self">VN 显示在视觉小说模式下，UI 会略有改变，以便展示角色立绘（或角色卡图像），这些图片通常位于屏幕中央。然而，在多人群聊中，多个角色的立绘会自动分布到合适的位置，避免重叠，如下所示：<br><img alt="群体 VN 显示" src="img/20241222160545023.png" target="_self">群体 VN 显示如果在用户设置中启用了 MovingUI，角色立绘（或角色卡图像）可以自由移动，您可以根据需要将它们放置在屏幕的任何位置。<br><img alt="群体 VN 显示（MovingUI）" src="img/20241222160545024.png" target="_self">群体 VN 显示（MovingUI）获取角色立绘可以通过浏览互联网寻找现有的立绘，例如来自《心跳文学社》或《CounterSide》这类视觉小说或游戏中的角色。如果您想要的角色没有现成的立绘，您还有以下几种选择：
搜索该角色的立绘包或相关链接。
使用 LoRA 和 Stable Diffusion 创建自己的立绘。
使用角色卡图像。虽然这不完全是立绘，但至少在屏幕上有些可视内容。请注意，VN 模式中无法使用多个角色卡图像。
Prome 视觉小说扩展是由 Bronya Rand 和 Prometheus 推出的第三方扩展，它进一步增强了 SillyTavern 中的视觉小说体验。此扩展包括了诸如 Letterbox 模式（将视觉小说 UI 变得更具“电影感”）、 Focus 模式（使角色立绘变暗）、传统 VN 模式（仅显示最后一条消息）等功能，未来还会有更多功能。<br>要安装 Prome 视觉小说扩展，您可以通过访问 下载扩展与资源 并找到 Prome 视觉小说扩展 来进行安装，或者按照 <a data-tooltip-position="top" aria-label="https://github.com/Bronya-Rand/Prome-VN-Extension?tab=readme-ov-file#installation-and-usage" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Bronya-Rand/Prome-VN-Extension?tab=readme-ov-file#installation-and-usage" target="_self">Prome 视觉小说扩展</a> GitHub 页面上的安装说明进行操作。调整 Prome 设置可通过 扩展 -&gt; Prome（视觉小说扩展） 或通过 🪄（魔杖）菜单进行。]]></description><link>sillytavern/2-使用指南/2.8.2-视觉小说-(vn)-模式.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.8.2 视觉小说 (VN) 模式.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222160545021.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222160545021.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.9.5 作者注释]]></title><description><![CDATA[作者注释是一种强大的工具，可以在任何位置、按照任何频率向提示词中插入一段文本内容，定制AI的回复。作者注释可以在聊天输入框左侧的选项菜单中找到。选项菜单<img alt="image 16|image 16.png" src="img/20241222161036860.png" target="_self">作者注释面板<br><img alt="image 1 7" src="img/20241222161419896.png" target="_self">作者注释面板顶部的框包含了当前聊天的作者注释内容。该框中的内容不会自动转移到新的聊天中。将作者注释插入到“场景”部分之后的提示词中。如果没有指定场景，则会被插入到角色定义的最后部分之后，示例消息之前。将作者注释插入到聊天历史的指定位置。深度0 = 插入到聊天历史的末尾。深度4 = 插入到最近的三条消息之前，使其成为聊天历史中的第四条内容。作者注释距离聊天历史末尾越近，对下一次AI回复的影响越大。这是你希望作者注释在聊天中插入的频率。频率0 = 作者注释将不会被插入。频率1 = 每次用户输入时，都会插入作者注释。频率4 = 每第四次用户输入时，都会插入作者注释。面板底部的框包含了默认的作者注释，将应用到每个新的聊天中。作者注释可用于指定AI应如何撰写回复。
[下次回复必须是300个单词。]
[用爱伦·坡的风格写下次回复。]
[使用Markdown的斜体字表示未说出的动作，使用引号表示口语。] [记住你在本聊天开始时收到的指令。] [{{char}} 在图书馆里。]
[{{user}} 受了腿部的伤，无法逃跑。]
[{{char}} 不能说话，必须通过手势进行交流。]
]]></description><link>sillytavern/2-使用指南/2.9.5-作者注释.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9.5 作者注释.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222161036860.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222161036860.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.10 目标功能]]></title><description><![CDATA[目标（Objective）扩展功能让用户在聊天过程中为AI指定一个目标。这个目标会被分解为逐步任务。任务可以分支，子任务可以自动或手动创建，从而形成复杂的任务树。在特定的时间间隔内，AI会检查每个任务的完成状态。与通过提示词（prompt）提供静态指令不同，目标扩展允许AI根据步骤和节奏自动地追求目标，无需用户干预。这种方式让AI真正地“努力”去完成目标，提供了更具沉浸感的体验。在开始之前，请确保已满足以下前提条件：
确保你使用的是最新版的SillyTavern。
在扩展面板（堆叠块图标）中的“下载扩展和资产”菜单里安装“目标（Objective）”扩展。
你的想象力才是限制，任何目标都可以指定给AI，它会为实现目标制定计划。例如，你可以要求AI规划如何击败恶魔、抢劫神庙、举办一场盛大的派对，甚至是统治世界。<img alt="目标设置面板" src="img/20241222231854728.png" target="_self">
该扩展可以在扩展菜单中的“目标（Objective）”选项下找到。
在顶部文本框中输入一个目标，然后点击“自动生成任务（Auto-Generate Tasks）”。这将向连接的API请求，生成一系列符合输入目标的任务。
注意：点击“自动生成任务”将删除当前目标下所有已存在的任务，并添加新的任务。
收到AI的响应后，一系列任务将自动生成并显示在目标输入框下方。任务创建后，可以进行编辑。
面板底部有两个选项框：“在聊天中的位置（Position in Chat）”和“任务检查频率（Task Check Frequency）”： 在聊天中的位置（Position in Chat）：这是当前任务在提示词（prompt）中被插入的“深度”。数值越低，AI越关注当前任务；数值越高，任务会被放到背景中，AI会更多关注对话内容，但设置过高可能导致AI永远不会“完成”任务。
任务检查频率（Task Check Frequency）：这是AI检查当前任务是否完成的频率。如果设置为“3”，则AI每三条消息检查一次任务的完成状态。 目标、任务及其描述会实时保存到当前聊天会话中。自定义提示词（prompt）会全局保存。
你可以自定义提示词（prompt），以便生成任务、检查任务完成情况，并进行提示词注入。编辑提示词后，它将保存在当前会话中。
点击“编辑提示词（Edit Prompts）”以打开提示词编辑窗口。你可以根据需要编辑提示词。
保存提示词时，输入名称并点击“保存提示词（Save Prompt）”。
若要加载提示词，从下拉菜单中选择提示词并点击加载。
若要删除保存的提示词，从下拉菜单中选择提示词并点击删除。
警告：任务检查会触发单独的API请求。如果将任务检查频率设置为1，AI的API调用次数将翻倍。若你使用的是收费服务，请谨慎使用此设置。默认情况下，目标扩展会自动跟踪所有任务及其完成状态。用户也可以随时手动创建、更新、删除任务，并标记任务为已完成。当前任务始终是列表中第一个未完成的任务。如果手动更新任务，AI会检查当前任务应该是什么。因此，如果你在已完成任务上方添加了新任务，新的任务会被设置为当前任务。一旦当前任务完成，AI会跳过已完成的任务，选择下一个未完成的任务作为“当前任务”。当使用父任务/子任务的任务树时，任务会按深度优先选择，这意味着所有子任务会先被选择，然后再继续处理当前目标/任务下的任务。点击“分支任务（Branch Task）”按钮，将当前任务设置为一个目标（Objective），你可以在此目标下自动生成或手动创建子任务。你可以继续将任何子任务转化为目标，并不断生成子任务。标记父任务为完成后，所有子任务会被跳过。所有子任务完成后，父任务会被标记为完成。你可以通过点击任务旁边的复选框手动切换任务的完成状态。这会自动选择下一个未完成的任务作为当前任务。如果你希望手动触发AI检查任务完成情况，可以点击聊天输入框右侧的“魔法棒”图标，选择“手动任务检查（Manual Task Check）”。<br><img alt="手动任务检查" src="img/20241222231854729.png" target="_self">当没有任务时，会显示一个“添加任务（Add Task）”按钮，允许你手动创建第一个任务。如果已有任务存在，可以点击每个任务旁边的“+”按钮，在其后插入一个新任务。点击任务旁的红色“x”可以删除现有任务。删除任务后，系统会自动选择下一个未完成的任务作为当前任务。删除含有子任务的任务会删除所有子任务及其后代任务。如果你希望不知晓AI正在尝试完成的任务，可以勾选“隐藏任务（Hide Tasks）”框，这样任务列表将被隐藏，AI的目标将成为一个谜。如果你想完全不知晓AI的目标，可以在点击“自动生成任务”之前就勾选此选项！]]></description><link>sillytavern/3-扩展功能/3.10-目标功能.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.10 目标功能.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231854728.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231854728.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.13 总结（Summarize）]]></title><description><![CDATA[这个扩展功能允许您根据聊天中的事件自动生成、存储和使用摘要。摘要有助于概述故事中发生的主要内容，这可能被解读为一种长期记忆，但请谨慎对待这一说法。由于摘要是由语言模型生成的，输出可能会丢失一些重要细节或包含幻觉，因此建议您始终跟踪摘要的状态，并在必要时手动进行更正。总结扩展功能在 SillyTavern 中是默认安装的，因此它会出现在 ST 的扩展面板（堆叠立方体图标）列表中，如下所示：<img alt="Summarize Config Panel" src="img/20241222231909807.png" target="_self">
当前摘要 - 显示并提供修改当前摘要的能力。摘要会在每次生成时更新，并嵌入到聊天文件的元数据中，摘要与最新的聊天消息一起存储。如果删除或编辑了附带摘要的消息，摘要会恢复到最后一次有效的状态。
恢复先前的摘要 - 移除当前摘要，将其回滚到先前的状态。如果摘要生成不准确或效果不好时，可以使用此功能。
暂停 - 勾选此选项可阻止摘要自动更新。如果您希望提供自定义摘要或有效地禁用摘要（通过清空框并停止更新），此功能非常有用。
弹出窗口 - 允许将摘要分离到可移动的 UI 面板中，显示在侧边栏中。在桌面布局中非常有用，可以轻松访问摘要设置，而无需导航到扩展菜单。
注入模板 - 定义在常规聊天提示中插入摘要的方式。应使用特殊的 {{summary}} 宏来标记当前摘要状态在提示文本中的确切位置。
注入位置 - 设置提示注入的位置，选项与作者注释（Author's Note）相同：在主要提示之前或之后，或在聊天中按指定深度插入。
摘要将由您当前选择的 AI 后端、模型和设置提供支持。此方法无需额外的设置，只需要一个有效的 API 连接。此选项有以下子模式，根据摘要提示的构建方式有所不同：
原始模式，阻塞：摘要将仅使用摘要提示词和聊天历史生成。后续的提示也会包括先前的摘要以及生成摘要后发送的消息（见例子）。此模式会生成很多变化的提示，因此不推荐在处理时间较长的后端上使用，例如 llama.cpp 及其衍生模型。
原始模式，非阻塞：与上面相同，但生成摘要时不会阻止聊天生成。如果后端不支持同时请求，当摘要生成失败时应切换到阻塞模式。
经典模式，阻塞：摘要提示词会作为中立的系统指令，在常规生成提示词的末尾发送，不会省略角色卡、主要提示词、示例对话等内容。这通常能确保提示词能够顺利复用，因此推荐在 llama.cpp 等模型上使用。 摘要提示词 - 定义用于创建摘要的提示词。可以包含已知的宏，以及特殊的 {{words}} 宏（见下文）。
目标摘要长度（词数） - 定义可插入摘要提示词的 {{words}} 宏的值。此设置是可选的，如果没有使用该宏，则不产生任何影响。
API 响应长度（标记数） - 允许为生成摘要设置一个覆盖的 API 响应长度，与全局设置的值不同。
每个请求的最大消息数 (仅原始模式) - 设置一次摘要请求中包含的最大消息数。0 表示没有明确限制，但摘要的消息数将依赖于最大上下文大小，计算公式为：最大摘要缓冲区 = 上下文大小 - 摘要提示词 - 先前的摘要 - 响应长度。在具有大上下文大小的模型上，使用此设置可使摘要更加集中。
无世界书/作者注释 - 在摘要时忽略世界书和作者注释。此选项仅在使用经典提示词构建器时有效，原始构建器总是忽略世界书/作者注释。
每 X 条消息更新 - 设置摘要生成的间隔。0 表示禁用自动摘要，但您仍然可以通过点击“立即摘要”按钮手动触发。此选项应根据提示缓冲区填满的速度进行调整。理想情况下，摘要应在消息开始被丢弃时生成。
每 X 个词更新 - 与上面相同，但使用词数（而非标记数）作为测量单位。由于聊天消息的内容通常不规则，使用词数可能更精确，但实际效果可能因情况而异。
如果“每 X 条消息更新”和“每 X 个词更新”都设置为非零值，那么它们会根据哪个条件最先满足来触发摘要更新。强烈建议在切换到具有不同上下文大小的模型时，适当调整这些值，否则摘要生成可能会触发得过于频繁或根本不触发。如果不确定间隔设置，可以点击“魔杖”按钮，根据一些简单的启发式算法来尝试猜测最优值。算法的简要描述如下：
计算所有聊天消息的标记数和词数。
根据目标摘要长度确定所需的摘要词数。
根据平均消息长度计算一次摘要请求中可包含的最大消息数。
如果设置了“最大消息数”，根据无法容纳的消息数调整平均值。
将调整后的平均消息数向下舍入为 5 的倍数。
原始提示词系统：
[摘要提示词] 先前的摘要。 用户：
消息 foo。 角色：
消息 bar。
经典提示词[主要提示词] [角色卡] [示例对话] 用户：
消息 foo。 角色：
消息 bar。 系统：
[摘要提示词]
Extras 服务器的 summarize 模块可以运行一个辅助的摘要模型（BART）。它的上下文大小非常小（约 1024 个标记），因此处理大型摘要的能力非常有限。要配置 Extras 摘要来源，请执行以下操作：
<br>安装或更新 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-extras" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-extras" target="_self">Extras</a> 至最新版本。
运行 Extras，并启用 summarize 模块：python server.py --enable-modules=summarize
<br>默认情况下，Summarize 使用 <a data-tooltip-position="top" aria-label="https://huggingface.co/Qiliang/bart-large-cnn-samsum-ChatGPT_v3" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/Qiliang/bart-large-cnn-samsum-ChatGPT_v3" target="_self">Qiliang/bart-large-cnn-samsum-ChatGPT_v3</a> 模型进行摘要生成。可以通过命令行参数 --summarization-model=(###Hugging-Face-Model-URL-Here###) 更改摘要模型。一个已知的替代摘要模型是 Qiliang/bart-large-cnn-samsum-ElectrifAi_v10。]]></description><link>sillytavern/3-扩展功能/3.13-总结（summarize）.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.13 总结（Summarize）.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231909807.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231909807.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.17 VRM]]></title><description><![CDATA[本指南将引导你完成为你的 SillyTavern 体验设置和自定义 VRM 扩展的过程。这个扩展允许你使用 VRM 动画模型作为角色，提供动态互动的元素，使你的虚拟角色更加生动。在开始之前，请确保你已满足以下前提条件：
分支选择：确保你使用的是 SillyTavern 的最新版本分支，以访问最新的功能和更新。
扩展安装：从扩展面板（由堆叠的方块图标表示）中的“下载扩展与资源”菜单安装“VRM”扩展。
模型文件夹位置：将你的 VRM 模型文件（.vrm）放置在/data/&lt;user-handle&gt;/assets/vrm/model目录下，将动画文件放置在/data/&lt;user-handle&gt;/assets/vrm/animation目录下。目前支持的动画文件格式为.fb 和.bvh，这些格式与 VRM 模型兼容。你可以使用 <a data-tooltip-position="top" aria-label="https://www.mixamo.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.mixamo.com/" target="_self">Mixamo</a> 下载的动画，也可以使用类似 <a data-tooltip-position="top" aria-label="https://github.com/ButzYung/SystemAnimatorOnline" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/ButzYung/SystemAnimatorOnline" target="_self">XR Animator</a> 等工具导出的动画。
VRM 扩展提供了各种设置，允许你自定义动画模型的行为。以下是关键设置：<br><img alt="UI global settings" src="img/20241222231513272.png" target="_self"> 启用： 勾选此复选框以激活扩展，允许你的 VRM 模型在 SillyTavern 中进行交互。
如果只想使用普通精灵，可以禁用此扩展。 注视摄像头： 勾选此复选框使 VRM 模型的眼睛注视摄像头。 眨眼： 勾选此复选框使 VRM 模型的眼睛以随机间隔眨眼。如果模型的表情已正确定义眨眼权重属性，否则模型可能会以闭眼的状态眨眼。如果发生这种情况，可以选择以下操作： 如果有.vroid 文件，可以修正模型。
不使用错误的面部表情。
禁用眨眼功能。 TTS 唇同步： 勾选此复选框以使 VRM 模型的嘴巴跟随 TTS 播放时的声音运动。仅适用于由 SillyTavern 本身播放的 TTS（例如 XTTS，非流模式）。如果禁用，则嘴巴将根据每次接收到的新字符消息的文本长度进行动画。 自动发送互动： 勾选此复选框以在点击映射消息的区域时自动触发角色互动（有关点击区域的更多信息，请参阅点击区域部分）。 身体点击框： 勾选此复选框启用对 VRM 模型各个部位的点击检测。根据模型的不同，可能检测以下区域：头部/胸部/手部/腹股沟/臀部/腿部/脚部。点击框的位置会在每一帧计算，并随着模型动画变化。如果禁用此选项，可能会提高性能。 使用模型缓存： 勾选此复选框以在切换模型时保留 VRM 模型在内存中，从而加速模型切换。如果你为同一角色使用不同的模型来更改服装或形态，这会非常有用，但可能会影响性能。 使用动画缓存： 勾选此复选框以在会话期间保留所有播放过的动画。当模型第一次出现时，所有为该模型分配的动画也会被加载。虽然第一次加载模型时会增加时间，但切换动画时将变得更为快速。可能会影响性能。 显示网格： 勾选此复选框可显示 3D 网格、模型拖拽框和身体点击框。 重载按钮： 点击此按钮可重新加载 3D 场景，清除缓存和所有 VRM 模型。如果出现错误或缓存影响性能时，请使用此按钮。 <br><img alt="UI scene settings" src="img/20241222231513274.png" target="_self"> 光源颜色： 设置 3D 场景中的光源颜色。点击重置按钮将其恢复为默认的白色。根据你的浏览器，你可以使用颜色选择器来选择背景图像的颜色，从而增加沉浸感。 光源强度： 使用滑动条设置光源强度的百分比。点击重置按钮将其恢复为默认值 100%。VRM 模型可能会根据模型内置的光照着色器的不同而对光源反应不同，你可以通过调整此值来观察效果。 <br><img alt="UI model settings" src="img/20241222231513275.png" target="_self">这些设置允许你管理角色，并为角色分配 VRM 模型。 刷新按钮： 点击刷新按钮以更新当前聊天中的角色列表。 选择角色： 使用下拉列表选择要为其分配 VRM 模型的角色。 删除按钮： 点击此按钮删除角色的已分配模型。 刷新按钮： 如果你的 VRM 模型未出现在列表中，点击刷新按钮。 选择模型： 从列表中选择一个模型并将其分配给所选角色。
模型文件必须位于/data/&lt;user-handle&gt;/assets/vrm/model目录下。 重置按钮： 点击此按钮将模型设置恢复为默认值。如果有与默认值相对应的动画文件，它们将被自动映射。详细的命名映射请参考文档末尾。 模型缩放： 使用滑动条调整模型的大小，使其变大或变小。 模型中心 X/Y 偏移： 使用这些滑动条调整模型相对于窗口中心的水平/垂直位置。 模型 X/Y 旋转： 使用这些滑动条调整模型相对于模型臀部的水平/垂直旋转。 设置是按模型保存的，而不是按角色保存的，并且会在不同聊天中继承。
如果你想为两个不同的角色使用相同的模型，但使用不同的设置，可以复制.vrm 文件。
你还可以用鼠标拖动模型，设置会被更新并保存。左键点击并保持按住以拖动模型，中键点击并保持按住以旋转模型，或使用 Shift+左键。将鼠标滚轮放在模型上时，可以调整模型的大小，或者使用 Ctrl+左键。
使用这些 UI 设置可以将模型重新拉回屏幕，如果不小心将其移出视图。还可以勾选“显示框架”复选框，以便清晰查看可点击的拖动区域。
<br><img alt="UI hitboxes settings" src="img/20241222231513276.png" target="_self">
根据模型的骨骼定义，可能会生成一些点击区域。这些区域将列在此部分，你可以为每个区域分配表情/动画/消息，点击该区域时会触发相应的内容。
<br><img alt="UI classify settings" src="img/20241222231513277.png" target="_self"> 要求 需要使用“分类表情”扩展；如果未启用，则会回退到默认动画。 映射 对于分类扩展检测到的每种情感，你可以为其分配表情/动作/消息。消息可以包含命令。 /vrmlightcolor 设置光源颜色
参数：颜色
示例："/vrmlightcolor white" 或 "/vrmlightcolor purple"。 /vrmlightintensity 设置光源强度（百分比）
参数：强度
示例："/vrmlightintensity 0" 或 "/vrmlightintensity 100" /vrmmodel 将 VRM 模型分配给角色
参数：角色，模型
示例："/vrmmodel Seraphina.vrm"（单人聊天）或 "/vrmmodel character=Seraphina model=Seraphina.vrm"（多人聊天） /vrmexpression 更改模型的表情
参数：角色，表情
示例："/vrmexpression happy"（单人聊天）或 "/vrmexpression character=Seraphina expression=happy"（多人聊天） /vrmmotion 更改模型的动画
参数：角色，动作，循环，随机
示例："/vrmmotion idle" 或 "/vrmmotion character=Seraphina motion=idle loop=true random=false" 如果你的动画文件命名方式如下，重置模型设置时，它们会被自动映射。例如，命名为"assets/vrm/animation/neutral.bvh"和"assets/vrm/animation/neutral1.fbx"的文件会被自动映射为默认和中性分类动画。点击框也会如此映射。// 回退
"default": "assets/vrm/animation/neutral", // 分类类
"admiration": "assets/vrm/animation/admiration",
"amusement": "assets/vrm/animation/amusement",
"anger": "assets/vrm/animation/anger",
"annoyance": "assets/vrm/animation/annoyance",
"approval": "assets/vrm/animation/approval",
"caring": "assets/vrm/animation/caring",
"confusion": "assets/vrm/animation/confusion",
"curiosity": "assets/vrm/animation/curiosity",
"desire": "assets/vrm/animation/desire",
"disappointment": "assets/vrm/animation/disappointment",
"disapproval": "assets/vrm/animation/disapproval",
"disgust": "assets/vrm/animation/disgust",
"embarrassment": "assets/vrm/animation/embarrassment",
"excitement": "assets/vrm/animation/excitement",
"fear": "assets/vrm/animation/fear",
"gratitude": "assets/vrm/animation/gratitude",
"grief": "assets/vrm/animation/grief",
"joy": "assets/vrm/animation/joy",
"love": "assets/vrm/animation/love",
"nervousness": "assets/vrm/animation/nervousness",
"neutral": "assets/vrm/animation/neutral",
"optimism": "assets/vrm/animation/optimism",
"pride": "assets/vrm/animation/pride",
"realization": "assets/vrm/animation/realization",
"relief": "assets/vrm/animation/relief",
"remorse": "assets/vrm/animation/remorse",
"sadness": "assets/vrm/animation/sadness",
"surprise": "assets/vrm/animation/surprise", // 点击框
"head": "assets/vrm/animation/hitarea_head",
"chest": "assets/vrm/animation/hitarea_chest",
"groin": "assets/vrm/animation/hitarea_groin",
"butt": "assets/vrm/animation/hitarea_butt",
"leftHand": "assets/vrm/animation/hitarea_hands",
"rightHand": "assets/vrm/animation/hitarea_hands",
"leftLeg": "assets/vrm/animation/hitarea_leg",
"rightLeg": "assets/vrm/animation/hitarea_leg",
"rightFoot": "assets/vrm/animation/hitarea_foot",
"leftFoot": "assets/vrm/animation/hitarea_foot"
感谢您遵循本指南！您的 SillyTavern 体验现在已通过动画和互动的 3D 模型得到增强。
加载的 VRM 模型是.vrm 文件，而不是.vroid 文件。
<br>动画文件应与 VRM 兼容，可以使用 <a data-tooltip-position="top" aria-label="https://github.com/ButzYung/SystemAnimatorOnline" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/ButzYung/SystemAnimatorOnline" target="_self">XR 动画工具</a> 来转换 FBX/BVH 动画文件。
你可以通过将文件命名为相同的名称并以不同的数字结尾（例如："idle1.bvh"、"idle2.bvh"、"idle3.bvh"）来创建动画组。当选择此组时，系统会随机播放其中的一个动画。这样可以为动画添加更多变化。
<br>你可以从以下仓库获取精选的动画：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/test157t/VRM-Animations-Pack-For-Silly-Tavern" target="_self">https://github.com/test157t/VRM-Animations-Pack-For-Silly-Tavern</a>
<br>Nitral 有关于如何使用扩展和动画资源库的教程视频：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/@nitralai" target="_self">https://www.youtube.com/@nitralai</a>
]]></description><link>sillytavern/3-扩展功能/3.17-vrm.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.17 VRM.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231513272.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231513272.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.2 聊天翻译]]></title><description><![CDATA[聊天翻译扩展能够通过多种翻译服务提供商实现实时翻译聊天消息。支持手动和自动翻译模式。<img alt="角色消息从英语翻译成中文，使用“翻译消息/翻译讯息”消息操作按钮" src="img/20241222152626046.png" target="_self">+++ 英语<br><img alt="&quot;Translate Chat&quot;, &quot;Translate Input&quot;" src="img/20241222152626047.png" target="_self">+++ 简体中文<br><img alt="&quot;翻译聊天&quot;, &quot;翻译输入&quot;" src="img/20241222152626048.png" target="_self">+++ 繁体中文<br><img alt="&quot;翻译聊天内容&quot;, &quot;翻译输入内容&quot;" src="img/20241222152626049.png" target="_self">+++ 韩语<br><img alt="&quot;채팅 번역하기&quot;, &quot;입력 번역하기&quot;" src="img/20241222152626050.png" target="_self">+++ 俄语<br><img alt="&quot;Перевести чат&quot;, &quot;Перевести моё сообщение&quot;" src="img/20241222152626051.png" target="_self">所有翻译聊天消息的方式：翻译聊天按钮在 扩展菜单中
一次性翻译整个聊天历史记录
翻译输入按钮在 扩展菜单中
只翻译当前的输入文本
在发送消息之前使用此功能
翻译消息图标在 消息操作工具栏中的任何消息上
单击翻译该消息
再次单击可恢复原始文本
自动模式配置位于 聊天翻译抽屉中的 扩展面板中
自动翻译用户输入、AI 响应或两者
/translate斜杠命令
使用 /translate [target=language_code] text 来翻译文本
配置选项位于 聊天翻译抽屉中的 扩展面板中。
<br>选择你偏好的 <a data-href="3.2 聊天翻译" href="sillytavern/3-扩展功能/3.2-聊天翻译.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.2 聊天翻译</a>
如果出现，点击 API 密钥图标以输入 API 密钥
如果出现，点击 自定义 URL图标以输入自定义 API URL
选择你想要编写消息的语言，或希望 AI 响应使用的语言。配置自动翻译行为。
无：不进行自动翻译
翻译响应：自动将 AI 响应翻译成目标语言
翻译输入：自动将用户输入翻译成英文
翻译两者：翻译用户输入和 AI 响应
清除翻译按钮会从当前聊天中移除所有翻译。原始消息将被保留。为了设置一个中文用户与英文 AI 之间的聊天工作流：
将自动模式设置为“翻译两者”
将目标语言设置为“简体中文”或“繁体中文”
选择一个具有良好语言自动检测功能的翻译提供商（例如 Google 或 DeepL）
此设置将会： 将用户的中文输入翻译成英文供 AI 使用
将 AI 的英文回应翻译回中文供用户查看
此设置依赖于自动语言检测来处理输入。为了更精确的控制，未来的更新可能会包括显式的源语言选择。
基于云的本地自定义 URL需要 API 密钥
德语、法语、意大利语、西班牙语、荷兰语、日语和俄语支持正式性等级
<br>通过 deepl.formality 在 <a class="internal-link" data-href="/Administration/config-yaml.md#deepl-configuration" href=".html" target="_self" rel="noopener nofollow">config.yaml</a> 中进行配置
使用 /translate 命令进行快速翻译。语法：/translate [target=language_code] text。如果没有提供目标语言，将使用扩展设置中的值。将文本翻译成当前目标语言并在弹出窗口中显示：/translate Welcome to the Tavern | /echo
<br><img alt="弹出窗口显示中文（简体），'欢迎来到酒馆/Welcome to the Tavern'" src="img/20241222152626052.png" target="_self">将文本翻译成西班牙语并添加到聊天：/translate target=es Hello world | /send
<br><img alt="用户消息显示西班牙语，'Hola Mundo/Hello world'" src="img/20241222152626053.png" target="_self">提示用户输入一条消息和语言，将消息翻译成该语言，再将其重新翻译成已配置的目标语言，并在弹出窗口中显示两个翻译版本。此示例使用 /input 和 /buttons 命令来收集用户输入：/input default="Hello, world!" &lt;span data-i18n="Test Message"&gt;Sample text&lt;/span&gt; |
/let key=input ||
/buttons labels=["zh-CN", "zh-TW", "es", "hu", "en"] &lt;span data-i18n="UI Language"&gt;Language&lt;/span&gt; |
/let key=lang ||
/translate target={{var::lang}} {{var::input}} | /let key=tx_target |
/translate | /let key=tx_orig ||
/echo escapeHtml=false cssClass=wider_dialogue_popup
&lt;b data-i18n="Test Message"&gt;Test message&lt;/b&gt;: {{var::input}} &lt;br/&gt;
&lt;b data-i18n="Output"&gt;Output&lt;/b&gt; ({{var::lang}}): {{var::tx_target}} &lt;br/&gt;
&lt;b data-i18n="Output"&gt;Output&lt;/b&gt; (&lt;span data-i18n="ext_translate_target_lang"&gt;target language&lt;/span&gt;): {{var::tx_orig}} &lt;br/&gt;
这对于检查翻译质量，尤其是在你不懂某种语言时，检查翻译准确性非常有用。<br><img alt="弹出窗口，'Welcome to the Tavern/欢迎来到酒馆/welcome to the pub'，en, zh-CN, en" src="img/20241222152626054.png" target="_self">弹出窗口，'Welcome to the Tavern/欢迎来到酒馆/welcome to the pub'，en, zh-CN, en<br><img alt="弹出窗口，'My hovercraft is full of eels/我的氣墊船裡裝滿了鰻魚/My hovercraft is filled with eels'，en, zh-TW, en" src="img/20241222152626055.png" target="_self">弹出窗口，'My hovercraft is full of eels/我的氣墊船裡裝滿了鰻魚/My hovercraft is filled with eels'，en, zh-TW, enUI 控件以当前区域设置的语言显示，而不受配置的目标语言影响。<br><img alt="Popup, '我的氣墊船裡裝滿了鰻魚/My hovercraft is full of eels', zh-TW -> en -> zh-TW" src="img/20241222152626059.png" target="_self">Popup, '我的氣墊船裡裝滿了鰻魚/My hovercraft is full of eels', zh-TW -&gt; en -&gt; zh-TW输入语言检测在以下示例中相当有效：<br><img alt="Popup, '(My hovercraft is full of eels)/A légpárnás hajóm tele van angolnával/我的氣墊船裡裝滿了鰻魚', zh-TW -> hu -> zh-TW" src="img/20241222152626060.png" target="_self">Popup, '(My hovercraft is full of eels)/A légpárnás hajóm tele van angolnával/我的氣墊船裡裝滿了鰻魚', zh-TW -&gt; hu -&gt; zh-TW<br><img alt="Popup, '我的氣墊船裡裝滿了鰻魚/Mi aerodeslizador está lleno de anguilas/My hovercraft is full of eels', zh-TW -> es -> en" src="img/20241222152626061.png" target="_self">Popup, '我的氣墊船裡裝滿了鰻魚/Mi aerodeslizador está lleno de anguilas/My hovercraft is full of eels', zh-TW -&gt; es -&gt; en<br><img alt="Popup, 'Il mio hovercraft è pieno di anguille/我的气垫船里装满了鳗鱼/My hovercraft is filled with eels', it -> zh-CN -> en" src="img/20241222152626062.png" target="_self">Popup, 'Il mio hovercraft è pieno di anguille/我的气垫船里装满了鳗鱼/My hovercraft is filled with eels', it -&gt; zh-CN -&gt; en
支持 UTF-8 编码、特殊字符和表情符号
通过将大消息拆分为多个块来处理长消息
保留消息中的格式和嵌入图片
缓存翻译以避免重复的 API 调用
internal_language 控制用户消息在发送到 AI 之前被自动翻译的语言。默认设置中硬编码为 'en'，无法通过 UI 修改。因此，消息 发送到 AI的目标语言始终是英语。先前的测试表明，当 AI 接收到英语消息时，它的表现更好，但随着更多的 LLM 被训练在更多样化的语言数据上，这种情况可能会发生变化。你可以在 settings.json 中修改 internal_language 来进行实验。该扩展支持简体和繁体中文，但并非所有翻译提供商都支持这两者。UI 将它们分别展示为“简体中文”和“繁体中文”，语言代码为 'zh-CN' 和 'zh-TW'。它们在翻译提供商中的映射如下：
Libre Translate：'zh-CN' 映射为 'zh'，'zh-TW' 映射为 'zt'。
DeepL 和 DeepLX：两者都映射为 'ZH'。
Bing：'zh-CN' 映射为 'zh-Hans'，'zh-TW' 保持不变。
其他提供商使用提供的 'zh-CN' 和 'zh-TW'。
某些提供商对每次请求的字符数有限制：
Yandex：5000 字符
DeepLX：1500 字符
Bing：1000 字符
Google：5000 字符
长文本会自动拆分为多个块进行翻译。
]]></description><link>sillytavern/3-扩展功能/3.2-聊天翻译.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.2 聊天翻译.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222152626046.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222152626046.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.6 表情图像（头像）]]></title><description><![CDATA[表情图像是显示在聊天窗口旁边（或后面）的人物图像（也称为“精灵”）。表情图像通过与 SillyTavern 主程序一起运行的分类模型进行自动切换。该模型根据 AI 最近的聊天响应中的情绪变化，自动更新表情图像。
打开扩展面板并展开“表情图像”部分。如果你已经打开了角色聊天，屏幕上会显示一个表情图像占位符的网格。<img alt="expression-drawer" src="img/20241222161450739.png" target="_self">
点击网格中每个图像左上方的“导入”按钮，选择你要应用到该情绪的图像。此操作会将图像保存为正确的文件名，并存放在 /data/&lt;user-handle&gt;/characters/(character_name_here)/ 文件夹内。
为了在 SillyTavern 窗口中显示该图像，上传后点击网格中的图像。
classify 模块使用一个小型的“情绪解析”模型，该模型运行在 SillyTavern 主机上（例如，在你的 PC 或 Colab 机器上）。这个模型解析 AI 的新输出，并检测文本中表达的情绪类型。尽管一条消息可能表达多种情绪，但模型只会选择最可能的情绪并将其返回给 SillyTavern。前端插件会根据返回的情绪显示相应的图像。
点击任何已上传的表情图像（精灵），以在聊天界面旁边显示（默认 UI 模式），或在视觉小说模式下显示在屏幕中央。
使用 /emote (name) 命令或相应的快捷回复来设置表情，而无需打开扩展面板。 确保你正在使用最新版的 SillyTavern。
打开扩展面板，展开“角色表情”插件菜单。
在分类来源下拉菜单中选择“本地”。
这将开始从 HuggingFace Hub 下载分类模型（大约 100 MB）。
生成一条消息以验证分类是否正常工作，并且表情图像会显示出来。你还可以查看服务器控制台的调试日志。 安装并运行 Extras，并启用 classify 模块：python server.py --enable-modules=classify
按上述方法导入表情图像。
在分类来源下拉菜单中选择“Extras”。
每当 AI 发送响应时，相关的表情图像会自动显示。 连接到任何支持且已正确配置的文本生成 API。
按上述方法导入表情图像。
在分类来源下拉菜单中选择“LLM”。
可选地，配置分类指令提示词（classification instruction prompt）。
生成任何消息以验证分类是否正常工作，并且表情图像会显示出来。你还可以查看服务器控制台的调试日志。
<br>本地分类默认支持 28 个情绪标签：<a data-tooltip-position="top" aria-label="https://huggingface.co/Cohee/distilbert-base-uncased-go-emotions-onnx" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/Cohee/distilbert-base-uncased-go-emotions-onnx" target="_self">Cohee/distilbert-base-uncased-go-emotions-onnx</a><br>要使用包含 6 个选项的分类模型，请打开 config.yaml 文件，使用文本编辑器编辑 classificationModel 变量，将其更改为 <a data-tooltip-position="top" aria-label="https://huggingface.co/Cohee/bert-base-uncased-emotion-onnx" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/Cohee/bert-base-uncased-emotion-onnx" target="_self">Cohee/bert-base-uncased-emotion-onnx</a>之后，重新启动 SillyTavern 服务器以重新下载模型。如果想恢复原来的设置，只需再次修改 config.yaml 文件。<br>Extras API 默认使用一个包含 6 个选项的分类模型：<a data-tooltip-position="top" aria-label="https://huggingface.co/nateraw/bert-base-uncased-emotion" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/nateraw/bert-base-uncased-emotion" target="_self">nateraw/bert-base-uncased-emotion</a><br>还有一个支持 28 个选项的模型：<a data-tooltip-position="top" aria-label="https://huggingface.co/joeddav/distilbert-base-uncased-go-emotions-student" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/joeddav/distilbert-base-uncased-go-emotions-student" target="_self">joeddav/distilbert-base-uncased-go-emotions-student</a>要使用此模型，需在 Extras 启动命令中添加以下参数（注意前后有空格）：--classification-model=joeddav/distilbert-base-uncased-go-emotions-student任何图像格式均可使用，包括 WebP 和动画 GIF。最常见的格式是带透明背景的 PNG 文件。Warning
此功能仅在启用本地分类或连接 Extras API 时才会激活。如果没有自定义的表情图像集，则无法手动显示默认表情图像。
<br><img alt="expression-default" src="img/20241222161450740.png" target="_self">如果你没有为某个角色提供自定义表情图像，可以使用 SillyTavern 默认安装的内置默认表情图像。这些是简单的表情符号样式图像。只需点击“表情图像”部分顶部的复选框即可启用。默认表情图像将在任何自定义图像集缺失某个情绪时与自定义表情一起显示。通过点击“导入 ZIP”按钮，可以导入包含一组表情图像的 ZIP 文件，这些图像会自动添加到当前选定角色的正确文件夹中。ZIP 文件必须采用扁平化的结构（没有子文件夹），且每个图像必须按照正确的命名方式命名。导入 ZIP 文件不会自动重命名图像以匹配情绪。如果有多个角色具有相同的显示名称，它们会共享同一组表情图像。如果希望相同名称的角色使用不同的图像集，可以使用精灵文件夹覆盖。
在 /data/&lt;user-handle&gt;/characters 文件夹中创建一个任意名称的文件夹，并将图像放入该文件夹中，例如：/data/&lt;user-handle&gt;/characters/Boris。
打开与该角色的聊天。
在“精灵文件夹覆盖”输入框中输入覆盖文件夹的名称并点击“提交”。
精灵列表会重新加载，且“精灵集”指示器应该显示覆盖文件夹。
或者，你也可以使用 /costume 命令来实现同样的结果：/costume Boris。
通过在覆盖文件夹名称前添加反斜杠，可以解析为当前角色精灵文件夹中的子文件夹，例如：/costume \tracksuit 会解析为 /data/&lt;user-handle&gt;/characters/Boris/tracksuit 文件夹。 你可以将自定义的表情标签添加到列表中，并上传对应的精灵图像。
但是，这些标签不会被分类模型自动标记。你需要手动设置它们（无论是通过点击还是使用 /emote 命令）。
]]></description><link>sillytavern/3-扩展功能/3.6-表情图像（头像）.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.6 表情图像（头像）.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222161450739.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222161450739.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.19.2.1 常见问题]]></title><description><![CDATA[本页列出了在安装 SillyTavern Extras 时常见的问题和解决方法。本地安装 Extras 在某些操作系统（尤其是 Termux）上可能会遇到困难或无法完成。
安装简单
免费使用
无需 Colab GPU 积分（可以使用 use_cpu 选项）
详情请参阅 <a class="internal-link" data-href="/extensions/Extras/running-extras-in-colab.md" href=".html" target="_self" rel="noopener nofollow">Colab 指南页面</a>。
此问题需要安装一个额外的包，因为它由于与 Colab 不兼容而未自动安装。安装其他依赖后运行以下命令：pip install wxpython<br>
无法连接到远程 SD 后端 <a rel="noopener nofollow" class="external-link is-unresolved" href="http://127.0.0.1:7860" target="_self">http://127.0.0.1:7860</a>！禁用 SD 模块...
确保启动 Stable Diffusion 时，webui-user.bat 文件中的 COMMANDLINE_ARGS 变量包含 --api 参数。在 "webui-user.bat" 文件中找到并替换这一行：set COMMANDLINE_ARGS=--api<br><img alt="正确的格式" src="img/20241222231936121.png" target="_self">如果 Stable Diffusion Web UI 中的 API 模式被禁用，Extras 服务器将无法建立连接，并且无法生成图像！确保按正确的顺序启动所有程序，并且每个程序都加载完成后再启动下一个：
启动 Stable Diffusion Web UI
启动 SillyTavern Extras
启动 SillyTavern
如果先加载了其他程序，Extras 服务器将无法重新连接到 Stable Diffusion API。
错误：无法为 hnswlib 构建轮子，hnswlib 是安装基于 pyproject.toml 项目的必需项
在安装 ChromaDB 模块之前，必须先执行以下操作之一：
<br>安装 Visual C++ 构建工具：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://visualstudio.microsoft.com/visual-cpp-build-tools/" target="_self">https://visualstudio.microsoft.com/visual-cpp-build-tools/</a>
使用 conda 安装 hnswlib 包：conda install -c conda-forge hnswlib 错误：未找到与 torch==2.0.0+cu117 匹配的发行版
Mac 不支持 CUDA，因此应安装不带 CUDA 支持的 torch 包。使用 requirements-silicon.txt 文件安装依赖。
您必须在 Python 命令行中指定模块名称列表，并使用 --enable-modules 修饰符。
<br>请参阅 <a class="internal-link" data-href="/extensions/Extras/Installation.md#decide-which-module-to-use" href=".html" target="_self" rel="noopener nofollow">模块</a> 部分。 SillyTavern 扩展面板中的 API 密钥框仅在您：
* 创建了一个名为 api_key.txt 的文本文件，位于您的 Extras 安装文件夹中，并且该文件包含您选择的 Extras '密码'。* 使用 --secure 命令行参数启动 Extras 时有效。
这会使 Extras API '密码锁定'，只有拥有该密钥的用户才能访问它。
主要适用于希望自己公开部署 Extras（例如在 colab 上）的用户。
在个人电脑上运行 Extras 的用户无需在 API 密钥框中输入任何内容。 社区中有一些用户成功在手机上通过 Termux 上的 Ubuntu 运行 Extras。
但请注意，Extras 并未针对移动设备进行优化。
对于在 Android 设备上运行 Extras 的问题，将不会提供支持。
请将您的问题直接向下面链接的教程作者提问。
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.org/STAI-Termux#downloading-and-running-tai-extras" target="_self">https://rentry.org/STAI-Termux#downloading-and-running-tai-extras</a>]]></description><link>sillytavern/3-扩展功能/3.19.2.1-常见问题.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.19.2.1 常见问题.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231936121.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231936121.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.19.3 智能上下文]]></title><description><![CDATA[Warning
声明
使用此扩展并不保证能提供更好的聊天体验或增强记忆功能。只有在理解了向量数据库的相关影响后，才建议使用此扩展。
智能上下文是一个 SillyTavern 扩展，使用了<a data-tooltip-position="top" aria-label="https://www.trychroma.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.trychroma.com" target="_self">ChromaDB 库</a>，旨在为你的 AI 角色提供超出正常聊天历史上下文限制的信息。如果你有一段非常长的聊天记录，大多数内容都超出了通常的上下文窗口，因此当 AI 写出回应时，这些内容是无法被使用的。智能上下文会自动将整个聊天记录存储到向量数据库中。每次你输入新的消息时，系统会对数据库进行搜索，如果找到与当前消息关键词匹配的聊天记录，这些消息会被加入上下文中，AI 可以参考它们来写出下一条回应。
将 SillyTavern 更新到至少版本 1.10.6。
在“下载扩展与资源”菜单（堆叠的方块图标）中，安装“智能上下文”扩展。
<br>安装或更新<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-extras" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-extras" target="_self">Extras</a>到最新版本。或者，使用<a data-tooltip-position="top" aria-label="https://colab.research.google.com/github/SillyTavern/SillyTavern/blob/release/colab/GPU.ipynb" rel="noopener nofollow" class="external-link is-unresolved" href="https://colab.research.google.com/github/SillyTavern/SillyTavern/blob/release/colab/GPU.ipynb" target="_self">Colab 笔记本</a>。
仅限本地安装： 安装requirements-complete.txt文件，以确保正确安装依赖项（即使之前已经安装过）。
运行 Extras，并启用 ChromaDB 模块：python server.py --enable-modules=chromadb
ERROR: Could not build wheels for hnswlib, which is required to install pyproject.toml-based projects
安装 ChromaDB 库时，您需要确保以下条件之一：
<br>已安装 Visual C++构建工具：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://visualstudio.microsoft.com/visual-cpp-build-tools/" target="_self">https://visualstudio.microsoft.com/visual-cpp-build-tools/</a>
使用 conda 安装 hnswlib：conda install -c conda-forge hnswlib
启用智能上下文后，您可以在 SillyTavern 的 UI 中进行配置。智能上下文的配置可以在扩展菜单中进行<br><img alt="扩展菜单图标" src="img/20241222231942905.png" target="_self"><br><img alt="智能上下文配置面板" src="img/20241222231942906.png" target="_self">有 4 个主要概念需要了解：
聊天历史保留
记忆注入量
单条记忆长度
注入策略 在新聊天开始时，ChromaDB 是非活动的。
当聊天记录累计到 10 条消息时，它会开始将所有消息录入数据库，并根据需要检索消息。
默认情况下，ChromaDB 会根据滑块设置保留最近的若干条自然聊天记录。超出此数量的消息将被移除，如果数据库中存在“记忆”，则会将这些记忆添加到历史消息位置，取而代之。智能上下文将注入到上下文中的最大“记忆”数量。并非每次注入尝试都会达到此数量。例如，如果你输入与“狗”相关的内容，而数据库中只有一条与狗相关的消息，那么仅会注入这条消息。这是每条注入“记忆”的最大允许长度（以字符为单位，非标记）。如果设置过小，记忆可能会被截断。例如：Ross：我喜欢长毛且尾巴蓬松的狗。我不喜欢短毛且尾巴短的狗。这条数据库“记忆”是 103 个字符长，所以您需要将滑块至少设置为103，以便完整地将其提取到上下文中。如果滑块小于 103，则该消息会被截断并按截断后的内容进行注入。这种策略保留 X 条最近的消息，删除这些消息之前的所有消息，并用“记忆”替换它们。优点
不容易超出上下文限制
存在于上下文顶部的记忆对响应的即时影响较小，但仍然能提供“背景信息”
缺点
旧消息直接插入到聊天历史中，没有特殊标记，且通常与保留的自然聊天消息没有立即的自然关联，可能会让较低智能的 AI 模型感到困惑。
这种策略保持聊天历史的自然状态，并在历史消息之后添加“记忆”，这些记忆将被格式化为[括号标头]。这意味着“保留的消息”滑块实际上被禁用。优点
不会改变或缩短当前的自然聊天历史
“记忆”存在于聊天之后，并对下次 AI 响应有较强的影响
缺点
由于没有消息被移除或替换，容易超出上下文限制。
由于记忆靠近上下文的末尾，它们可能对 AI 的回应产生过大的影响。
这种策略保持聊天历史的自然状态，并在你指定的模板深度插入“记忆”。这意味着“保留的消息”滑块实际上被禁用。自定义注入消息应包含{{memories}}模板标记，用于放置所有查询到的记忆。优点
可以灵活地实验记忆插入位置
可以在上下文中自定义记忆的介绍方式
缺点
由于没有消息被移除或替换，容易超出上下文限制。
注意：此策略与“添加到底部”策略不兼容，因为后者不会删除任何消息。当使用“替换最旧历史”策略时，勾选此框会启用滑块，以选择按百分比计算要用智能上下文记忆替换的聊天历史数量。这也会禁用两个用于手动选择消息数量的滑块。此策略会根据聊天历史的实际情况自动计算替换的百分比，而不是固定数量的消息。优点
比手动计算替换消息数量更简单
会根据可用的上下文大小自动调整百分比，无论聊天历史的大小如何，都能保持一致
缺点
基于估算的标记数计算要移除的历史消息数量，因此可能略有不准确
它将移除的消息数量四舍五入为最接近的 5 的倍数（0、5、10、15、20 等），所以不像手动选择数量那样精细。
这是智能上下文的默认行为，仅从当前聊天的 ChromaDB 集合中提取“记忆”。这是智能上下文的实验性行为，它会从所有选定角色的 ChromaDB 集合中提取“记忆”。理论上，这可以允许开发出跨多个互动的更强大记忆集。建议使用“添加到底部”或“自定义深度”策略，并将“保留的消息”设置为较小的数值，以便 ChromaDB 可以尽早从记忆中提取。启用并配置好智能上下文后，它会自动发生。ChromaDB 为每个打开的聊天创建一个新数据库。这个数据库会自动填充整个聊天记录。你还可以手动将文本文件插入数据库。这些文本文件不一定是聊天内容，也可以是任何东西（如维基百科条目、同人小说等）。你可以使用“清除数据库”按钮来清空当前聊天的数据库。如果发现存储了不准确的记忆（例如已删除或编辑的聊天消息），这将很有帮助。对于本地安装的 Extras 服务器，智能上下文会保存数据库。通常情况下不需要手动保存它们。对于 Colab 用户，数据库会在 Extras 服务器关闭时被清除。你可以使用导出按钮将数据库保存为 JSON 文件，之后下次使用时再导入。通常情况下，不需要手动保存智能上下文数据库。目前，我们提供了导入/导出功能，允许你保存聊天的数据库，并在以后再次使用。这不是智能上下文功能的理想使用方式。我们建议使用世界书（World Info）来实现这个目的。]]></description><link>sillytavern/3-扩展功能/3.19.3-智能上下文.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.19.3 智能上下文.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231942905.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231942905.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.19.4 TalkingHead]]></title><description><![CDATA[这是一个实现了 Talking Head Anime 3 Demo 的 AITuber 扩展。它具有以下功能：
从单张静态图片生成随机的 Live 2D 风格的动态动作。
对任何 TTS 输出的声音进行口型同步。
该扩展包含了 Talking Head(?) Anime from a Single Image 3: Now the Body Too 项目的原始演示程序。正如名字所示，该项目允许你通过单张图片将动漫角色动画化。此扩展包含两个演示程序：
manual_poser：允许你通过图形用户界面操作角色的面部表情、头部旋转、身体旋转和由于呼吸导致的胸部膨胀，从而保存为默认的表情（例如开心、悲伤、快乐等）。
ifacialmocap_puppeteer：允许你将自己的面部动作传递到动漫角色上。
你可以选择使用 CPU 模式或 GPU 模式（默认是 CPU 模式）。但是，在 CPU 模式下，预计帧率约为 1 帧/秒，而在 RTX 3060 的 GPU 模式下，我的帧率大约是 9-10 帧/秒。ifacialmocap_puppeteer需要一台能够从视频源计算混合形状参数的 iOS 设备。这意味着设备必须能够运行 iOS 11.0 或更高版本，并且必须配备 TrueDepth 前置摄像头。（更多信息，请参见该页面。）换句话说，如果你拥有 iPhone X 或更高版本的设备，你应该可以正常使用。要使 TalkingHead 正常工作，你需要启动附加模块：classify和talkinghead！ classify模块负责处理talkinghead.png文件。此外，你还可以使用--talkinghead-gpu将混合模型加载到 GPU 内存中，使动画速度提高 10 倍。强烈建议启用 GPU 加速！默认情况下，程序启动时会加载默认图片：SillyTavern-extras/talkinghead/tha3/images/lambda_00.png。你可以通过访问http://localhost:5100/api/talkinghead/result_feed或YOUR EXT URL:PORT/api/talkinghead/result_feed来验证它是否工作正常。
启动服务器后，转到扩展 API 标签并连接。然后，简单地选择一个角色卡片进行加载（启动server.py时使用--enable-modules=classify,talkinghead --talkinghead-gpu）。
选择角色表情。如果选中talkinghead框，脚本会将当前角色的表情替换为YOUR EXT URL:PORT/api/talkinghead/result_feed的结果。取消选中该框则应该恢复原始表情，但有时你需要发送新的消息以“重新加载”图片。
如果角色目录中没有talkinghead.png文件，它将显示默认图片或最后一个带有talkinghead.png文件的角色卡片。当角色卡片发生变化时，动画源图像也会随之更改。
现在，打开角色表情部分，向下滚动到talkinghead图片并上传符合要求的图片文件。
然后，勾选和取消勾选talkinghead框以重新加载角色。如果图像看起来很奇怪，可能是因为它没有透明通道或没有 alpha 层。否则，请遵循以下说明和模板。
为了确保系统能够良好运行，输入图像必须遵循以下约束：
图像分辨率应为 512 x 512。如果程序收到其他尺寸的图像，它将自动调整为此分辨率，并且输出也为此分辨率。
必须包含 alpha 通道。
图像中必须只有一个类人角色。
角色应该站立并正面朝向。
角色的双手应位于头部下方，且远离头部。
角色的头部应大致位于图像上半部分中央 128 x 128 像素的框内。
所有不属于角色的像素（即背景像素）的 alpha 通道值必须为 0。
<img alt="输入约束" src="img/20241222231955466.png" target="_self">除了基本功能（app.py），manual_poser和ifacialmocap_puppeteer还作为桌面应用程序提供。要运行这些程序，你需要设置一个 Python 环境，并确保安装以下软件包：
Python &gt;= 3.8
PyTorch &gt;= 1.11.0（支持 CUDA）
SciPY &gt;= 1.7.3
wxPython &gt;= 4.1.1
Matplotlib &gt;= 3.5.1
你可以通过安装 Anaconda 并在命令行中运行以下命令来设置环境：conda create -n talking-head-anime-3-demo python=3.8
conda activate talking-head-anime-3-demo
conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch
conda install scipy
pip install wxpython
conda install matplotlib
<br>默认情况下仅包含一个最轻量级的模型，如果你需要额外的混合模型，可以从<a data-tooltip-position="top" aria-label="https://www.dropbox.com/s/y7b8jl4n2euv8xe/talking-head-anime-3-models.zip?dl=0" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.dropbox.com/s/y7b8jl4n2euv8xe/talking-head-anime-3-models.zip?dl=0" target="_self">此处下载</a>并将其解压到SillyTavern-extras/talkinghead/tha3/models文件夹中。最终数据文件夹结构应如下所示：
tha3 models separable_float editor.pt
eyebrow_decomposer.pt
eyebrow_morphing_combiner.pt
face_morpher.pt
two_algo_face_body_rotator.pt separable_half editor.pt
two_algo_face_body_rotator.pt standard_float editor.pt
two_algo_face_body_rotator.pt standard_half editor.pt
two_algo_face_body_rotator.pt <br>这些模型文件是根据《知识共享署名 4.0 国际许可协议》分发的，意味着你可以将其用于商业目的。然而，Pramook Khungurn 的《Talking Head(?) Anime from a Single Image 3: Now the Body Too》<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/pkhungurn/talking-head-anime-3-demo" target="_self">https://github.com/pkhungurn/talking-head-anime-3-demo</a>是该项目的创作者。打开一个终端，切换到项目的根目录，然后运行：python tha3/app/manual_poser.py
请注意，在运行上述命令之前，你可能需要激活包含所需软件包的 Python 环境。conda activate extras
如果你还没有激活该环境。]]></description><link>sillytavern/3-扩展功能/3.19.4-talkinghead.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.19.4 TalkingHead.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231955466.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231955466.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.9 Live2D]]></title><description><![CDATA[本指南将引导您完成为 SillyTavern 设置和自定义 Live2D 扩展的过程。这个扩展允许您为角色使用 Live2D 动画模型，提供动态和互动元素，使虚拟角色更加生动。在开始之前，请确保您已满足以下前提条件：
分支选择：确保您正在使用 SillyTavern 的最新版本，以便访问最新的功能和更新。
扩展安装：在扩展面板（由堆叠的方块图标表示）中的“下载扩展和资产”菜单中安装“Live2D”扩展。
模型文件夹放置：将您的 Live2D 模型文件夹放置到 /data/&lt;用户名&gt;/assets/live2d 目录中。一个正确组织的 live2d 资产文件夹可能如下所示：
<img alt="资产文件夹示例" src="img/20241222231804174.png" target="_self">
Live2D 模型文件夹应包括所有必要的组件，例如表情、动作、纹理、声音和设置文件。特别是 ***.model.json 文件必须位于 Live2D 模型文件夹的根目录，以便扩展检测到该模型。在这个示例中，shizuku Live2D 模型文件夹可能如下所示：
<br><img alt="Live2D 模型文件夹示例" src="img/20241222231804175.png" target="_self">
注意：模型也可以放置在特定角色的文件夹中，例如 /data/&lt;用户名&gt;/characters/Shizuku/live2d/。然而，位于角色文件夹中的模型仅对该特定角色可用。
Live2D 扩展提供了多种设置，您可以用来自定义动画模型的行为。以下是关键设置：<br><img alt="UI 全局设置" src="img/20241222231804176.png" target="_self">
启用： 启用此复选框以激活扩展，使您的 Live2D 模型能够在 SillyTavern 中进行互动。
如果您仅想使用普通精灵，可以禁用此扩展。
如果您希望在群聊中使用普通精灵并稍后启用 Live2D 模型时，可以禁用此扩展。 跟随光标： 启用此复选框以使 Live2D 模型跟随光标移动，前提是模型支持此功能。 自动发送互动： 启用此复选框以在点击已映射消息的区域时自动触发角色互动（请参阅点击区域部分以了解详情）。
这些设置帮助您控制 Live2D 模型的行为和可见性，便于调试。
在动画之前重置模型： 启用此复选框以在任何动画开始之前重新加载模型。这将强制动画从兼容的状态开始，并允许您在必要时快速多次点击。某些模型可能需要此设置以确保动画从正确的状态开始。 显示模型框架： 启用此复选框以显示模型框架，便于识别点击并拖动模型的位置。它还会显示点击区域（如果有）。将鼠标悬停在点击区域上时，会显示其名称。 重新加载按钮： 点击此按钮以重新加载所有 Live2D 模型。如果模型出现故障，可以使用此按钮。
这些设置允许您管理角色并为它们分配 Live2D 模型。
刷新按钮： 点击刷新按钮以更新当前聊天中的角色列表。 选择角色： 使用下拉列表选择一个角色，并为其分配 Live2D 模型。 删除按钮： 点击此按钮以删除为角色分配的所有模型。将弹出确认提示框，确认是否删除。
<br><img alt="UI 模型列表" src="img/20241222231804178.png" target="_self">
刷新按钮： 如果您的 Live2D 模型未出现在列表中，点击刷新按钮。 选择模型： 从列表中选择一个模型，并将其分配给选定的角色。
模型可以位于资产文件夹或当前角色的文件夹中。
列表显示模型文件夹名称、其来源（资产或角色）以及检测到的模型设置文件的名称。
注意：某些模型文件夹可能包含同一模型的不同版本。您可以尝试不同的模型文件，以查看哪个版本效果最佳。
如果选择“无”，则会使用普通精灵（如果有）。
设置会根据角色和模型分别保存。
<br><img alt="UI 模型设置" src="img/20241222231804179.png" target="_self">
模型缩放： 使用滑块调整模型的大小，您可以使模型变大或变小。 模型水平居中偏移： 使用滑块调整模型相对于窗口中心的水平位置。 模型垂直居中偏移： 使用滑块调整模型相对于窗口中心的垂直位置。 设置会被保存并在不同的聊天中保持有效。
您也可以使用鼠标拖动模型，模型的位置和设置将自动更新并保存。
使用这些 UI 设置可以帮助您在不小心将模型移出视野时将其拉回屏幕上。如果您无法找到模型，可以勾选“显示框架”复选框，以查看点击区域，帮助您拖动模型。
<br><img alt="UI 模型对话" src="img/20241222231804180.png" target="_self">
参数口部张开 Y 值 ID： 从列表中选择与模型口部 Y 值对应的参数 ID。并非所有模型都有此项，名称可能因模型而异，通常为“PARAM_MOUTH_OPEN_Y”或“ParamMouthOpenY”。在选择元素时，您可以查看口部是否移动。 口部动画速度： 使用滑块调整口部动画的速度。 每个字符的时间： 设置每个字符的持续时间。口部动画的持续时间将是此时间乘以消息字符数。 并非所有模型和动画都支持口部动画。如果在参数列表中没有显示任何内容，可能是您的模型版本过老，无法正确访问参数。
<br><img alt="UI 模型动画" src="img/20241222231804181.png" target="_self">
启动动画： 从列表中选择一个表情和动作，这将在与角色开始聊天时播放。您还可以设置延迟，隐藏角色一段时间，以实现完美的效果。 默认动画： 从列表中选择一个表情和动作，这将在角色发送消息时播放。当使用分类表情扩展时，使用备用动画。 动画将在您选择后播放。
使用重播按钮可以重新播放已选择的动画。
有些模型将表情定义为动作。
如果列表中没有显示任何内容，可能是模型的设置文件中没有定义表情或动作。
<br><img alt="UI 模型映射" src="img/20241222231804182.png" target="_self">
默认点击动画： 从列表中选择一个表情和动作，这将在您点击模型时播放。您还可以设置一个用户消息，在点击时发送。 点击区域： 如果模型有点击区域，它们会被列出，您可以为每个区域分配动画或消息。 有些模型没有点击区域，但所有模型都会检测到默认点击。
如果您点击一个没有映射动画的点击区域，或点击没有任何点击区域的地方，将触发默认点击动画。
点击区域的优先级是由模型文件定义的。例如，“mouth”（嘴巴）位于“head”（头部）内部。如果模型行为不正常，可能是模型文件的问题。
对于某些模型，在开始另一个动画之前，当前动画必须完成。可以使用调试复选框强制刷新并快速播放动画。
<br><img alt="UI 模型分类" src="img/20241222231804183.png" target="_self">
要求： 需要使用分类表情扩展，否则将回退到默认动画。 映射： 对于分类扩展检测到的每种情感，您可以分配相应的表情或动作动画。 如果上一个动画未完成时收到新消息，可能会导致新动画无法播放。此行为依赖于 Live2D 模型的实现。如果想强制播放动画，可以使用调试复选框。
感谢您跟随本指南！现在，您的 SillyTavern 体验已经通过动态和互动的 Live2D 模型得到了提升。]]></description><link>sillytavern/3-扩展功能/3.9-live2d.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.9 Live2D.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222231804174.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222231804174.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4.1 STscript 语言参考]]></title><description><![CDATA[STscript 是一种简单而强大的脚本语言，可用于扩展 SillyTavern 的功能，而无需深入的编码知识，使您能够：
创建迷你游戏或极速挑战
构建 AI 驱动的聊天洞察
释放您的创意并与他人分享
STscript 基于斜杠命令引擎，利用命令批处理、数据管道、宏和变量。这些概念将在以下文档中详细介绍。 STscript 仍在积极开发中。 如果您计划使用其功能，建议使用 staging 分支。
强大的功能伴随着巨大的责任。请小心使用，并在执行脚本前仔细检查其内容。要运行您的第一个脚本，打开任何 SillyTavern 聊天框并在输入框中键入以下内容：/pass Hello, World! | /echo
<img alt="hello-world" src="img/20241222161559033.png" target="_self">您应该会看到顶部通知栏显示消息。现在让我们逐步分析这个脚本。一个脚本是由一组命令组成的，每个命令都以斜杠开头，可能包含命名和未命名的参数，并以命令分隔符字符| 结束。命令按顺序执行，彼此之间传递数据。
/pass 命令接受一个常量值 "Hello, World!" 作为未命名参数并将其写入管道。
/echo 命令接收来自前一个命令的值并将其作为通知显示。 提示： 要查看所有可用命令的列表，请在聊天框中输入 /help slash。
由于常量未命名参数和管道是可以互换的，我们可以简化这个脚本：
/echo Hello, World!
现在让我们给脚本添加一些互动性。我们将从用户那里接受输入值并显示在通知中。/input Enter your name |
/echo Hello, my name is {{pipe}} /input 命令用于显示一个输入框，显示提示词（prompt）作为未命名参数，并将用户输入的值写入管道。
因为 /echo 已经有一个未命名参数来设置输出模板，我们使用 {{pipe}} 宏来指定一个地方，将管道中的值渲染到这里。
<br><img alt="slim-input" src="img/20241222161559034.png" target="_self"><br><img alt="slim-output" src="img/20241222161559035.png" target="_self">
/popup (text) — 显示一个阻塞弹出框，支持轻量 HTML 格式化，例如：/popup &lt;font color=red&gt;I'm red!&lt;/font&gt;。
/setinput (text) — 替换用户输入框中的内容为提供的文本。
/speak voice="name" (text) — 使用所选的 TTS 引擎并通过角色语音播放文本，例如：/speak name="Donald Duck" Quack!。
/buttons labels=["a","b"] (text) — 显示一个阻塞弹出框，带有指定的文本和按钮标签。labels 必须是一个 JSON 格式的字符串数组或包含此数组的变量名。返回被点击的按钮标签，或者如果取消则返回空字符串。文本支持轻量 HTML 格式化。
/popup 和 /input 支持以下额外的命名参数：
large=on/off - 增加弹出框的垂直大小，默认：off。
wide=on/off - 增加弹出框的水平大小，默认：off。
okButton=string - 自定义"确认"按钮的文本，默认：Ok。
rows=number - （仅适用于 /input）增加输入框的行数，默认：1。
示例：
/popup large=on wide=on okButton="Accept" Please accept our terms and conditions....
/echo 支持以下值作为额外的 severity 参数，用于设置显示消息的样式。
warning
error
info（默认）
success
示例：
/echo severity=error Something really bad happened.
变量用于在脚本中存储和操作数据，可以通过命令或宏进行操作。变量可以是以下几种类型：
本地变量 — 保存于当前聊天的元数据中，仅在该聊天中唯一。
全局变量 — 保存于 settings.json 中，存在于整个应用中。 /getvar name 或 {{getvar::name}} — 获取本地变量的值。
/setvar key=name value 或 {{setvar::name::value}} — 设置本地变量的值。
/addvar key=name increment 或 {{addvar::name::increment}} — 将 increment 的值添加到本地变量。
/incvar name 或 {{incvar::name}} — 将本地变量的值增加 1。
/decvar name 或 {{decvar::name}} — 将本地变量的值减少 1。
/getglobalvar name 或 {{getglobalvar::name}} — 获取全局变量的值。
/setglobalvar key=name 或 {{setglobalvar::name::value}} — 设置全局变量的值。
/addglobalvar key=name 或 {{addglobalvar::name:increment}} — 将 increment 的值添加到全局变量。
/incglobalvar name 或 {{incglobalvar::name}} — 将全局变量的值增加 1。
/decglobalvar name 或 {{decglobalvar::name}} — 将全局变量的值减少 1。
/flushvar name — 删除本地变量的值。
/flushglobalvar name — 删除全局变量的值。 初次使用时，未定义的变量的默认值为一个空字符串或零（如果是 /addvar、/incvar、/decvar 命令的参数）。
/addvar 命令中的增量操作如果能够将增量和变量值转换为数字，则执行加法或减法运算，否则执行字符串连接。
如果命令参数接受变量名，并且存在同名的本地和全局变量，则优先使用 本地变量。
所有的 斜杠命令 会将结果值写入管道，以便后续命令使用。
对于 宏，只有 "get"、"inc" 和 "dec" 类型的宏会返回值，"add" 和 "set" 会被替换为空字符串。
现在，考虑以下示例：
/input What do you want to generate? |
/setvar key=SDinput |
/echo Requesting an image of {{getvar::SDinput}} |
/getvar SDinput |
/imagine 用户的输入值被保存在本地变量 SDinput 中。
getvar 宏被用来在 /echo 命令中显示这个值。
getvar 命令用来获取变量的值，并将其传递给下一个命令。
这个值被传递给 /imagine 命令（图像生成插件），作为输入提示词（prompt）。
由于变量在脚本执行期间被保存，并且不会在执行间被清除，您可以在其他脚本中引用该变量，它将解析为脚本执行时的相同值。如果要确保值会被丢弃，可以在脚本中添加
/flushvar 命令。
变量值可以包含 JSON 格式化的数组或键值对对象。示例： 数组：["apple","banana","orange"] 对象：{"fruits":["apple","banana","orange"]}
可以对命令进行以下修改，以便操作这些类型的变量： /len 命令获取数组的元素数量。 可以在 /getvar 或 /setvar 命令中使用 index=number/string 作为命名参数来获取或设置数组的子值，或获取对象的键值。 如果数组变量使用数字索引且该索引不存在，变量会被创建为一个空数组 []。
如果对象变量使用字符串索引且该索引不存在，变量会被创建为一个空对象 {}。 /addvar 和 /addglobalvar 命令支持将新值推送到数组类型的变量。 您可以使用 /if 命令创建条件表达式，根据定义的规则分支执行。/if left=valueA right=valueB rule=comparison else="(false command)" "(true command)"我们来看看以下示例：/input What's your favorite drink? |
/if left={{pipe}} right="black tea" rule=eq else="/echo You shall not pass \\\\\\\\| /abort" "/echo Welcome to the club, \\\\\\\\{\\\\\\\\{user\\\\\\\\}\\\\\\\\}"
这个脚本根据用户输入的值判断并显示不同的消息。 left 是第一个操作数，我们称其为 A。 right 是第二个操作数，我们称其为 B。 rule 是应用于操作数的运算符。 else 是可选的字符串，表示如果布尔比较结果为假时执行的子命令。 未命名的参数是布尔比较结果为真时执行的子命令。
操作数值的评估顺序如下： 数字字面量 本地变量名 全局变量名 字符串字面量
命名参数的字符串可以用引号转义，以允许多单词字符串，转义后的引号会被丢弃。 支持以下布尔比较规则，操作结果为布尔值（真或假）：
eq（等于）=&gt; A = B
neq（不等于）=&gt; A != B
lt（小于）=&gt; A &lt; B
gt（大于）=&gt; A &gt; B
lte（小于或等于）=&gt; A &lt;= B
gte（大于或等于）=&gt; A &gt;= B
not（否定）=&gt; !A
in（包含子字符串）=&gt; A 包含 B，忽略大小写
nin（不包含子字符串）=&gt; A 不包含 B，忽略大小写
子命令是一个包含多个斜杠命令的字符串。 为了在子命令中使用命令批处理，命令分隔符字符应转义（见下文）。 由于宏值在条件进入时被执行，而不是在子命令执行时，因此可以转义宏，以延迟它们的执行时间。 子命令执行的结果将被传递给 /if 后的命令。 /abort 命令会中止脚本执行。
/if 命令也可以作为三元运算符使用。以下示例将在变量 a 等于 5 时，将 "true" 字符串传递给下一个命令，否则传递 "false" 字符串。 /if left=a right=5 rule=eq else="/pass false" "/pass true" |
/echo
宏的转义方法与以前一样。不过，在使用闭包时，通常需要转义宏的次数会少得多。你只需转义两个大括号的开头，或者同时转义开头和结尾的大括号对。/echo \\\\\\\\{\\\\\\\\{char}} |
/echo \\\\\\\\{\\\\\\\\{char\\\\\\\\}\\\\\\\\}
在闭包中，管道符不需要转义（当用作命令分隔符时）。在其他地方，如果你希望使用字面量管道符而不是命令分隔符，必须进行转义。/echo title="a\\\\\\\\|b" c\\\\\\\\|d |
/echo title=a\\\\\\\\|b c\\\\\\\\|d |
启用解析器标志 STRICT_ESCAPING 后，你不需要在引号值中转义管道符。/parser-flag STRICT_ESCAPING |
/echo title="a|b" c\\\\\\\\|d |
/echo title=a\\\\\\\\|b c\\\\\\\\|d |
要在引号值内使用字面量的引号字符，必须进行转义。/echo title="a \\\\\\\\"b\\\\\\\\" c" d "e" f
要在命名参数的值中使用空格，你必须用引号将值括起来，或者转义空格字符。/echo title="a b" c d |
/echo title=a\\\\\\\\ b c d
如果你想使用标记闭包开始或结束的字符组合，则需要用一个反斜杠转义该序列。/echo \\\\\\\\{: |
/echo \\\\\\\\:}
||
为了防止前一个命令的输出自动作为未命名参数传递给下一个命令，可以在两个命令之间放置双管道符。/echo we don't want to pass this on ||
/world
{: ... :}
闭包（块语句、匿名函数、匿名函数等的说法）是一系列命令，它们被包裹在 {: 和 :} 之间，只有在执行该部分代码时才会被评估。闭包使得使用子命令变得更加容易，且不再需要转义管道符和宏。// 没有闭包的 if |
/if left=1 rule=eq right=1 else=" /echo not equal \\\\\\\\| /return 0 " /echo equal \\\\\\\\| /return \\\\\\\\{\\\\\\\\{pipe\\\\\\\\}}
// 有闭包的 if |
/if left=1 rule=eq right=1 else={: /echo not equal | /return 0 :} {: /echo equal | /return {{pipe}} :}
闭包有自己的作用域，并且支持作用域变量。作用域变量通过 /let 声明，使用 /var 设置和获取其值。另一种获取作用域变量的方法是使用 {{var::}} 宏。/let x |
/let y 2 |
/var x 1 |
/var y |
/echo x is {{var::x}} and y is {{pipe}}.
在闭包内，你可以访问该闭包内或其父闭包中声明的所有变量。你不能访问闭包后代中声明的变量。如果在闭包中声明了与父闭包中同名的变量，你将无法访问父闭包中的变量。/let x this is root x |
/let y this is root y |
/return {: /echo called from level-1: x is "{{var::x}}" and y is "{{var::y}}" | /delay 500 | /let x this is level-1 x | /echo called from level-1: x is "{{var::x}}" and y is "{{var::y}}" | /delay 500 | /return {: /echo called from level-2: x is "{{var::x}}" and y is "{{var::y}}" | /let x this is level-2 x | /echo called from level-2: x is "{{var::x}}" and y is "{{var::y}}" | /delay 500 :}()
:}() |
/echo called from root: x is "{{var::x}}" and y is "{{var::y}}"
/let x {: ... :} | /:x
闭包可以被分配给变量（仅限作用域变量），以便稍后调用或作为子命令使用。/let myClosure {: /echo this is my closure
:} |
/:myClosure
/let myClosure {: /echo this is my closure | /delay 500
:} |
/times 3 {{var::myClosure}}
/: 也可以用来执行快速回复，它是 /run 的快捷方式。/:QrSetName.QrButtonLabel |
/run QrSetName.QrButtonLabel
命名闭包可以像斜杠命令一样接受命名参数，参数可以有默认值。/let myClosure {: a=1 b= /echo a is {{var::a}} and b is {{var::b}}
:} |
/:myClosure b=10
父闭包的管道值不会自动注入到子闭包的第一个命令的未命名参数中。你仍然可以通过{{pipe}} 显式引用父闭包的管道值，但如果你让子闭包的第一个命令的未命名参数为空值，管道值不会自动注入。/* 以前这会尝试将模型改为 "foo"，因为外部 /echo 的值 "foo" 被注入到了内部 /model 命令。 现在它只是简单地回显当前模型，而不尝试修改它。
*|
/echo foo |
/times 2 {: /model | /echo |
:} |
/* 你仍然可以通过显式使用 {{pipe}} 宏来恢复以前的行为。
*|
/echo foo |
/times 2 {: /model {{pipe}} | /echo |
:} |
{: ... :}()
闭包可以立即执行，意味着它们会被替换为返回值。这对于在没有显式支持闭包的地方非常有用，或者可以缩短一些需要多个中间变量的命令。// 没有闭包的简单长度比较 |
/len foo |
/var lenOfFoo {{pipe}} |
/len bar |
/var lenOfBar {{pipe}} |
/if left={{var::lenOfFoo}} rule=eq right={{var:lenOfBar}} /echo yay!
// 使用立即执行闭包进行相同的比较 |
/if left={:/len foo:}() rule=eq right={:/len bar:}() /echo yay!
除了运行保存在作用域变量中的命名闭包外，/run 命令也可以用来立即执行闭包。/run {: /add 1 2 3 4 |
:} |
/echo |
// ... | /# ...
注释是对脚本代码的可读说明或注解，注释不会中断管道。// this is a comment |
/echo foo |
/# this is also a comment
块注释可用于快速注释掉多条命令。它们不会终止管道。/echo foo |
/*
/echo bar |
/echo foobar |
*|
/echo foo again |
如果你需要在某个条件满足时运行一些命令，可以使用 /while 命令。/while left=valueA right=valueB rule=operation guard=on "commands"
每一步，循环都会比较变量 A 和变量 B 的值，如果条件为真，则执行被引号括起来的任何有效斜杠命令，否则退出循环。该命令不会写入输出管道。可用的布尔比较、变量处理、字面值和子命令集与 **/if** 命令相同。
可选的
guard 命名参数（默认为 on）用于防止死循环，将迭代次数限制为 100 次。要禁用并允许死循环，请设置 guard=off
。
该示例将 1 加到
i 的值，直到其达到 10，然后输出结果值（在本例中为 10）。/setvar key=i 0 |
/while left=i right=10 rule=lt "/addvar key=i 1" |
/echo {{getvar::i}} |
/flushvar i
该命令会重复指定的子命令若干次。/times (repeats) "(command)" —— 任何有效的斜杠命令将重复若干次，例如 /setvar key=i 1 | /times 5 "/addvar key=i 1" 将 i 增加 1 5 次。
{{timesIndex}} 会被替换为迭代次数（从零开始），例如 /times 4 "/echo {{timesIndex}}" 会依次回显数字 0 到 4。
循环默认最多执行 100 次，传递 guard=off 可禁用此限制。
/break |
/break 命令可用于提前跳出循环（/while 或 /times）或闭包。/break 的未命名参数可以用于传递不同于当前管道的值。/break 目前在以下命令中实现：
/while - 提前退出循环
/times - 提前退出循环
/run（带闭包或通过变量的闭包） - 提前退出闭包
/:（带闭包） - 提前退出闭包
/times 10 {: /echo {{timesIndex}} /delay 500 | /if left={{timesIndex}} rule=gt right=3 {: /break :} |
:} |
/let x {: iterations=2 /if left={{var::iterations}} rule=gt right=10 {: /break too many iterations! | :} | /times {{var::iterations}} {: /delay 500 | /echo {{timesIndex}} | :} |
:} |
/:x iterations=30 |
/echo the final result is: {{pipe}}
/run {: /break 1 | /pass 2 |
:} |
/echo pipe will be one: {{pipe}} |
/let x {: /break 1 | /pass 2 |
:} |
/:x |
/echo pipe will be one: {{pipe}} | 以下所有操作都接受一系列数字或变量名并将结果输出到管道。
无效操作（如除以零）以及导致 NaN 值或无穷大的运算返回零。
乘法、加法、最小值和最大值可以接受多个参数，参数之间用空格分隔。
减法、除法、指数和取余操作仅接受两个参数，参数之间用空格分隔。
正弦、余弦、自然对数、平方根、绝对值和四舍五入操作仅接受一个参数。
操作列表： /add (a b c d) – 对一组值进行加法运算，例如 /add 10 i 30 j
/mul (a b c d) – 对一组值进行乘法运算，例如 /mul 10 i 30 j
/max (a b c d) – 返回一组值中的最大值，例如 /max 1 0 4 k
/min (a b c d) – 返回一组值中的最小值，例如 /min 5 4 i 2
/sub (a b) – 对两个值进行减法运算，例如 /sub i 5
/div (a b) – 对两个值进行除法运算，例如 /div 10 i
/mod (a b) – 对两个值进行取余运算，例如 /mod i 2
/pow (a b) – 对两个值进行指数运算，例如 /pow i 2
/sin (a) – 对一个值进行正弦运算，例如 /sin i
/cos (a) – 对一个值进行余弦运算，例如 /cos i
/log (a) – 对一个值进行自然对数运算，例如 /log i
/abs (a) – 对一个值进行绝对值运算，例如 /abs -10
/sqrt (a)– 对一个值进行平方根运算，例如 /sqrt 9
/round (a) – 对一个值进行四舍五入运算，例如 /round 3.14
/rand (round=round|ceil|floor from=number=0 to=number=1) – 返回一个在 from 和 to 之间的随机数，例如 /rand 或 /rand 10 或 /rand from=5 to=10。范围是包含端点的。返回的值将包含小数部分。使用round参数可以返回整数值，例如 /rand round=ceil 向上取整，round=floor 向下取整，round=round 四舍五入。
/setglobalvar key=PI 3.1415 |
/setvar key=r 50 |
/mul r r PI |
/round |
/echo 圆的面积: {{pipe}}
/setvar key=input 5 |
/setvar key=i 1 |
/setvar key=product 1 |
/while left=i right=input rule=lte "/mul product i \\\\\\\\| /setvar key=product \\\\\\\\| /addvar key=i 1" |
/getvar product |
/echo {{getvar::input}}的阶乘: {{pipe}} |
/flushvar input |
/flushvar i |
/flushvar product
脚本可以通过以下命令向当前连接的 LLM API 发出请求：
/gen (prompt) — 使用提供的提示词生成文本，按照选定角色生成，包括聊天消息。
/genraw (prompt) — 使用纯提示词生成文本，忽略当前角色和聊天。
/trigger — 触发正常生成（相当于点击“发送”按钮）。如果是群聊，可以选择提供一个 1 基的组员索引或角色名，其他情况下则按群设置触发一次群聊轮次。
/genraw lock=on/off stop=[] instruct=on/off (prompt) lock — 可以设置为 on 或 off。指定在生成进行时是否禁止用户输入。默认：off。
stop — JSON 序列化数组的字符串。为此生成提供自定义停止字符串（如果 API 支持）。默认：无。
instruct（仅对/genraw有效）— 可以设置为 on 或 off。允许在输入提示词时使用指令格式（如果 API 支持并且启用了指令模式）。设置为off可以强制使用纯提示词。默认：on。
as（对于文本补全 API）— 可以设置为 system（默认）或 char。定义最后的提示行格式。char将使用角色名称，system则使用中立格式。
生成的文本将通过管道传递到下一个命令，并可以保存到变量或通过输入输出能力显示：
/genraw 写一条来自克苏鲁的幽默信息，谈论征服世界。使用表情符号。 |
/popup &lt;h3&gt;克苏鲁说:&lt;/h3&gt;&lt;div&gt;{{pipe}}&lt;/div&gt;
<br><img alt="image 10|image 10.png" src="img/20241222161559036.png" target="_self">脚本可以添加自定义的 LLM 提示词注入，基本相当于无限制的作者注释。
/inject (text) — 将任何文本插入到当前聊天的正常 LLM 提示词中，并需要一个唯一的标识符。保存到聊天元数据。
/listinjects — 显示当前聊天中由脚本添加的所有提示词注入。
/flushinjects — 删除当前聊天中由脚本添加的所有提示词注入。
/note (text) — 设置当前聊天的作者注释值。保存到聊天元数据。
/interval — 设置当前聊天的作者注释插入间隔。
/depth — 设置当前聊天的作者注释插入深度。
/position — 设置当前聊天的作者注释插入位置。
/inject id=IdGoesHere position=chat depth=4 我的提示词注入 id — 一个标识符字符串或变量引用。后续调用相同 ID 的/inject将覆盖之前的文本注入。必须提供该参数。
position — 设置插入的位置。默认：after。可能的值： after：在主提示词之后。
before：在主提示词之前。
chat：插入到聊天中。 depth — 设置插入的深度，0 表示插入到最后一条消息之后，1 表示插入到最后一条消息之前，依此类推。默认：4。
未命名的参数是要插入的文本。如果为空字符串，则会删除该标识符之前的值。
您可以使用 /messages 命令访问当前选定聊天中的消息。/messages names=on/off start-finish names 参数用于指定是否希望包含角色名称，默认值：on。
未命名参数接受消息索引或范围，格式为 start-finish。范围是包含端点的！
如果范围无法满足（例如提供了无效索引或请求的消息数量超出了存在的消息数量），则返回空字符串。
隐藏的消息（由鬼魂图标标记）将被排除在输出之外。
若要了解最新消息的索引，请使用 {{lastMessageId}}，{{lastMessage}} 将获取最新的消息本身。
要计算范围的起始索引，例如，当您需要获取最后 N 条消息时，可以使用变量减法。 以下示例将获取最近的 3 条消息：
/setvar key=start {{lastMessageId}} |
/addvar key=start -2 |
/messages names=off {{getvar::start}}-{{lastMessageId}} |
/setinput
脚本可以以用户、角色、人物、或中立叙述者身份发送消息，也可以添加评论。 /send (text) — 以当前选定的身份添加一条消息。 /sendas name=charname (text) — 以任何角色的身份添加消息，name 参数是必需的。使用 {{char}} 宏来发送当前角色的消息。 /sys (text) — 以中立叙述者身份添加消息，该消息不属于用户或角色。显示的名称纯粹是装饰性，可以使用 /sysname 命令自定义。 /comment (text) — 添加一条隐藏评论，该评论在聊天中显示，但不会出现在提示词中。 /addswipe (text) — 为最后的角色消息添加一个滑动动作。
不能对用户或隐藏的消息添加滑动动作。 6.
/hide (message id or range) — 根据提供的消息索引或范围（start-finish格式）隐藏一条或多条消息。 7. /unhide (message id or range) — 根据提供的消息索引或范围（start-finish格式）恢复一条或多条消息。
/send、/sendas、/sys 和 /comment 命令都可以选择性地接受 at 参数，指定消息插入的确切位置。默认情况下，新的消息会插入到聊天日志的末尾。
以下将用户消息插入到聊天历史的开头： /send at=0 我使用Linux。
这些命令是潜在的破坏性操作，没有“撤销”功能。请检查 **/backups/** 文件夹，避免误删重要内容。
/cut (message id or range) — 根据提供的消息索引或范围（start-finish格式）剪切一条或多条消息。
/del (number) — 删除最近的 N 条消息。
/delswipe (1-based swipe id) — 根据提供的 1 基索引删除最后一条角色消息中的滑动动作。
/delname (character name) — 删除当前聊天中所有属于指定角色的消息。
/delchat — 删除当前聊天。
<br>世界书（也称为 Lorebook）是一个高度实用的工具，用于动态地将数据插入到提示词（prompt）中。请参见专门的页面以获取更详细的说明：<a data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.7 世界书（World Info）</a>。
/getchatbook – 获取与当前聊天绑定的世界书文件的名称，如果未绑定，则创建一个新文件，并将其传递给后续命令。
/findentry file=bookName field=fieldName [text] – 使用模糊匹配查找指定文件中字段值与提供的文本（默认为key字段）匹配的记录，并将 UID 传递给后续命令。例如：/findentry file=chatLore field=key Shadowfang。
/getentryfield file=bookName field=field [UID] – 获取指定世界书文件中指定 UID 的记录的字段值（默认为content字段），并将其传递给后续命令。例如：/getentryfield file={{getvar::chatLore}} field=content 123。
/setentryfield file=bookName uid=UID field=field [text] – 设置指定世界书文件中 UID（或指向 UID 的变量）记录的字段值（默认为content字段）。要为关键字段设置多个值，请使用逗号分隔的列表。例如：/setentryfield file=chatLore uid=123 field=key Shadowfang,sword,weapon。
/createentry file=bookName key=keyValue [content text] – 在指定文件中创建一条新的记录，并传递 UID（key和content两个参数均为可选）。例如：/createentry file=chatLore key=Shadowfang The sword of the king。 逻辑值 0 = AND ANY（任何都满足）
1 = NOT ALL（不是所有都满足）
2 = NOT ANY（没有任何满足）
3 = AND ALL（所有都满足） 位置值 0 = 主提示词之前
1 = 主提示词之后
2 = 作者注释顶部
3 = 作者注释底部
4 = 在聊天中按深度显示
5 = 示例消息顶部
6 = 示例消息底部 角色值（仅适用于位置 = 4） 0 = 系统
1 = 用户
2 = 助手 /getchatbook | /setvar key=chatLore |
/findentry file={{getvar::chatLore}} field=key Shadowfang |
/getentryfield file={{getvar::chatLore}} field=key |
/echo
/getchatbook | /setvar key=chatLore |
/createentry file={{getvar::chatLore}} key="Milla" Milla Basset is a friend of Lilac and Carol. She is a hush basset puppy who possesses the power of alchemy. |
/echo
/getchatbook | /setvar key=chatLore |
/findentry file={{getvar::chatLore}} field=key Milla |
/setvar key=millaUid |
/getentryfield file={{getvar::chatLore}} field=content |
/setvar key=millaContent |
/gen lock=on Tell me more about Milla Basset based on the provided conversation history. Incorporate existing information into your reply: {{getvar::millaContent}} |
/setvar key=millaContent |
/echo New content: {{pipe}} |
/setentryfield file={{getvar::chatLore}} uid=millaUid field=content {{getvar::millaContent}}
有一系列有用的文本处理工具命令，可以在各种脚本场景中使用。
/trimtokens — 将输入文本修剪至指定数量的文本标记，从开头或结尾修剪，并将结果传递给后续命令。
/trimstart — 将输入文本修剪至第一个完整句子的开始部分，并将结果传递给后续命令。
/trimend — 将输入文本修剪至最后一个完整句子的结束部分，并将结果传递给后续命令。
/fuzzy — 执行模糊匹配，将输入文本与一组字符串进行匹配，并将最佳匹配项传递给后续命令。
/regex name=scriptName [text] — 执行正则表达式脚本，处理指定的文本。该脚本必须已启用。
/trimtokens limit=number direction=start/end (input) direction 设置修剪方向，可以是 start 或 end。默认值为 end。
limit 设置保留的文本标记数。也可以指定包含数量的变量名。必填参数。
未命名参数是要修剪的输入文本。
]]></description><link>sillytavern/4-开发与自动化/4.1-stscript-语言参考.html</link><guid isPermaLink="false">SillyTavern/4-开发与自动化/4.1 STscript 语言参考.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222161559033.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222161559033.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4.5 国际化 (i18n)]]></title><description><![CDATA[SillyTavern 支持多种语言。本文指南解释了如何添加和管理翻译。你可能是因为某些文本在你的语言中没有翻译，导致感到困扰而来。首先，我将展示如何修复在中文（繁体）语言环境中缺失的翻译。这些问题的原因各不相同，因此你可以了解到如何修复自己语言环境中的缺失翻译。在下半部分，我们将讨论：
<a data-tooltip-position="top" aria-label="4.5 国际化 (i18n) > 翻译是如何工作的" data-href="4.5 国际化 (i18n)#翻译是如何工作的" href="sillytavern/4-开发与自动化/4.5-国际化-(i18n).html#翻译是如何工作的_0" class="internal-link" target="_self" rel="noopener nofollow">i18n 如何工作</a> 在 SillyTavern 中
<br><a data-tooltip-position="top" aria-label="4.5 国际化 (i18n) > 语言文件" data-href="4.5 国际化 (i18n)#语言文件" href="sillytavern/4-开发与自动化/4.5-国际化-(i18n).html#语言文件_0" class="internal-link" target="_self" rel="noopener nofollow">如何编写翻译</a> 以及如何使用它们的代码
<br>调试功能来 <a data-tooltip-position="top" aria-label="4.5 国际化 (i18n) > 查找缺失的翻译" data-href="4.5 国际化 (i18n)#查找缺失的翻译" href="sillytavern/4-开发与自动化/4.5-国际化-(i18n).html#查找缺失的翻译_0" class="internal-link" target="_self" rel="noopener nofollow">查找缺失的翻译</a>
<br>如何 <a data-tooltip-position="top" aria-label="4.5 国际化 (i18n) > 添加新语言" data-href="4.5 国际化 (i18n)#添加新语言" href="sillytavern/4-开发与自动化/4.5-国际化-(i18n).html#添加新语言_0" class="internal-link" target="_self" rel="noopener nofollow">添加新语言</a>
<br>以及 <a data-tooltip-position="top" aria-label="4.5 国际化 (i18n) > 贡献" data-href="4.5 国际化 (i18n)#贡献" href="sillytavern/4-开发与自动化/4.5-国际化-(i18n).html#贡献_0" class="internal-link" target="_self" rel="noopener nofollow">贡献你的更改</a>
如果你正在开发扩展或修改核心代码，记得在编写 HTML 和 JavaScript 时考虑到 i18n。这将使你的工作为其他人翻译成他们的语言做好准备。没有人能懂 15 种语言。我们一起合作，确保 SillyTavern 对每个人都能无障碍使用。每个人都应该能在手机和电脑上使用自己的语言。Note
所有这三个问题都需要修改代码来修复。如果你只是添加新的翻译，可能不需要触及代码。恰好最近有人为中文（繁体）语言文件添加了大量缺失的翻译，所以剩下的问题都出在代码上。在其他语言环境中，很多缺失的翻译可以直接通过修改 JSON 文件来修复，而不需要修改代码。
中文（繁体）语言环境中，“Generate Image”（生成图像）文本没有翻译。为什么呢？<br><img alt="generate-image-pre" src="img/20241222161516881.png" target="_self">右键点击该元素并检查它。你会看到以下 HTML 代码：&lt;!-- 渲染后的 HTML --&gt;
&lt;div class="list-group-item flex-container flexGap5 interactable" id="sd_gen" tabindex="0"
&gt; &lt;div data-i18n="[title]Trigger Stable Diffusion" title="觸發 Stable Diffusion" class="fa-solid fa-paintbrush extensionsMenuExtensionButton" &gt;&lt;/div&gt; &lt;span&gt;Generate Image&lt;/span&gt;
&lt;/div&gt;
它的 data-i18n 属性在哪里呢？缺少了！我们需要在源代码中添加它：&lt;!-- public/scripts/extensions/stable-diffusion/button.html --&gt;
&lt;div id="sd_gen" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-paintbrush extensionsMenuExtensionButton" title="Trigger Stable Diffusion" data-i18n="[title]Trigger Stable Diffusion" &gt;&lt;/div&gt; &lt;span&gt;Generate Image&lt;/span&gt;
&lt;/div&gt;
&lt;div id="sd_stop_gen" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-circle-stop extensionsMenuExtensionButton" title="Abort current image generation task" data-i18n="[title]Abort current image generation task" &gt;&lt;/div&gt; &lt;span&gt;Stop Image Generation&lt;/span&gt;
&lt;/div&gt;
幸运的是，Generate Image 这个字符串已经在许多语言文件中，包括中文（繁体）：<br><img alt="generate-image-lang.png" src="img/20241222161516873.png" target="_self">{ "Generate Image": "生成图片"
}
为什么它没有显示出来呢？我们需要正确地将元素与翻译绑定：&lt;!-- public/scripts/extensions/stable-diffusion/button.html --&gt;
&lt;div id="sd_gen" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-paintbrush extensionsMenuExtensionButton" title="Trigger Stable Diffusion" data-i18n="[title]Trigger Stable Diffusion" &gt;&lt;/div&gt; &lt;span data-i18n="Generate Image"&gt;Generate Image&lt;/span&gt;
&lt;/div&gt;
&lt;div id="sd_stop_gen" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-circle-stop extensionsMenuExtensionButton" title="Abort current image generation task" data-i18n="[title]Abort current image generation task" &gt;&lt;/div&gt; &lt;span&gt;Stop Image Generation&lt;/span&gt;
&lt;/div&gt;
现在它就能正常工作了！重新加载页面查看效果。<br><img alt="generate-image-post.png" src="img/20241222161516874.png" target="_self">但是，在打开 HTML 代码时，我们看到 “Stop Image Generation”（停止图像生成）下方的文本似乎有问题。当我们生成一张图片并且在生成过程中打开魔杖菜单时，看到的文本仍然没有翻译。<br><img alt="stop-generating-image-pre.png" src="img/20241222161516875.png" target="_self">首先修复 HTML 代码：&lt;!-- public/scripts/extensions/stable-diffusion/button.html --&gt;
&lt;div id="sd_gen" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-paintbrush extensionsMenuExtensionButton" title="Trigger Stable Diffusion" data-i18n="[title]Trigger Stable Diffusion" &gt;&lt;/div&gt; &lt;span data-i18n="Generate Image"&gt;Generate Image&lt;/span&gt;
&lt;/div&gt;
&lt;div id="sd_stop_gen" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-circle-stop extensionsMenuExtensionButton" title="Abort current image generation task" data-i18n="[title]Abort current image generation task" &gt;&lt;/div&gt; &lt;span data-i18n="Stop Image Generation"&gt;Stop Image Generation&lt;/span&gt;
&lt;/div&gt;
这仅仅是修复的一部分。“Stop Image Generation”（停止图像生成）在中文（繁体）语言文件中没有翻译。我们需要添加它！以下是一个可能的翻译：{ "Stop Image Generation": "停止生成图片"
}
...然后将其添加到 JSON 文件中，就像我们添加“Generate Image”翻译一样。{ "Generate Image": "生成图片", "Stop Image Generation": "停止生成图片"
}
经过一些讨论后，我们决定使用以下翻译：
繁体中文：Stop Image Generation → 終止圖片生成
简体中文：Stop Image Generation → 中止图像生成
日语：Stop Image Generation → 画像生成を停止
<br><img alt="stop-generating-post-2.png" src="img/20241222161516876.png" target="_self">“Generate Caption”（生成图片说明）在中文（繁体）语言环境中没有翻译。我们来修复它！<br><img alt="generate-image-post.png" src="img/20241222161516874.png" target="_self">它在哪里呢？右键检查元素。&lt;!-- 渲染后的 HTML --&gt;
&lt;div id="send_picture" class="list-group-item flex-container flexGap5 interactable" tabindex="0"
&gt; &lt;div class="fa-solid fa-image extensionsMenuExtensionButton"&gt;&lt;/div&gt; Generate Caption
&lt;/div&gt;
原来这个 HTML 是由 JavaScript 生成的。我们来找一下源代码。// public/scripts/extensions/caption/index.js
const sendButton = $(` &lt;div id="send_picture" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-image extensionsMenuExtensionButton"&gt;&lt;/div&gt; Generate Caption &lt;/div&gt;`);
我们首先需要修复代码：// public/scripts/extensions/caption/index.js
const sendButton = $(` &lt;div id="send_picture" class="list-group-item flex-container flexGap5"&gt; &lt;div class="fa-solid fa-image extensionsMenuExtensionButton"&gt;&lt;/div&gt; &lt;span data-i18n="Generate Caption"&gt;Generate Caption&lt;/span&gt; &lt;/div&gt;`);
同时，中文（繁体）语言文件中也没有“Generate Caption”（生成图片说明）的翻译。我们需要添加它！{ "Generate Caption": "生成圖片說明"
}
我们将使用以下翻译：
繁体中文：Generate Caption → 生成圖片說明
简体中文：Generate Caption → 生成图片说明
日语：Generate Caption → 画像説明を生成
<br><img alt="generate-caption-post.png" src="img/20241222161516878.png" target="_self">“Inspect Prompts”（检查提示词）在中文（繁体）语言环境中没有翻译。为什么呢？这个问题稍微复杂一些。该文本是由 JavaScript 生成的，并且翻译缺失。// Extension-PromptInspector/index.js
const enabledText = "Stop Inspecting";
const disabledText = "Inspect Prompts";
没错，这两个短语都不在 i18n 文件中。我们需要将它们添加到 JSON 文件：{ "Stop Inspecting": "停止檢查", "Inspect Prompts": "檢查提示詞"
}
接着，我们需要修复 JavaScript 代码。它需要使用 t 函数来获取翻译。// Extension-PromptInspector/index.js
import { t } from "///i18n.js"; const enabledText = t`Stop Inspecting`;
const disabledText = t`Inspect Prompts`;
我们得到以下建议： 简体中文（zh-cn）：
const enabledText = t`停止检查`;
const disabledText = t`检查提示词`; 繁体中文（zh-tw）：
const enabledText = t`停止檢查`;
const disabledText = t`檢查提示詞`; 日语（ja-jp）：
const enabledText = t`検査を停止`;
const disabledText = t`プロンプトを検査`; 将这些翻译合并到 JSON 文件中：{ "Stop Inspecting": "停止检查", "Inspect Prompts": "检查提示词"
}
{ "Stop Inspecting": "停止檢查", "Inspect Prompts": "檢查提示詞"
}
{ "Stop Inspecting": "検査を停止", "Inspect Prompts": "プロンプトを検査"
}
<br><img alt="toggle-prompt-inspection-post-tt.png" src="img/20241222161516879.png" target="_self">遗憾的是，关于工具提示（tooltip）的问题，代码并没有使用 t 函数。launchButton.title = "Toggle prompt inspection";
我们需要在扩展代码中修复它：launchButton.title = t`Toggle prompt inspection`;
我们还需要将翻译添加到 JSON 文件：{ "Toggle prompt inspection": "切换提示检查"
}
{ "Toggle prompt inspection": "切换提示词检查"
}
{ "Toggle prompt inspection": "プロンプト検査の切り替え"
}
<br>Prompt Inspector 是一个独立的扩展，所以我们将在该扩展的仓库中提交代码修复：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-PromptInspector/pull/1" target="_self">https://github.com/SillyTavern/Extension-PromptInspector/pull/1</a><br>翻译将会被添加到 SillyTavern 的主仓库中：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/pull/3198" target="_self">https://github.com/SillyTavern/SillyTavern/pull/3198</a><br><img alt="start-inspecting-post.png" src="img/20241222161516880.png" target="_self">每种语言在 public/locales/ 目录下都有一个以语言代码命名的 JSON 文件（例如，ru-ru.json）。该文件包含键值对，其中：
键是原始的英文文本或唯一标识符
值是翻译后的文本
示例：{ "Save": "保存", "Cancel": "取消", "Could not find proxy with name '${0}'": "找不到名为 '${0}' 的代理"
}
翻译在应用程序中有两种使用方式： HTML 元素：使用 data-i18n 属性
&lt;div data-i18n="some_key"&gt;默认文本&lt;/div&gt; 如果翻译可用，HTML 中的默认文本将被翻译后的文本替换。 模板字符串：在 JavaScript 代码中使用 t 函数
t`Some text with ${variable}`; 这些字符串应保持 ${0}、${1} 等占位符不变。 SillyTavern 使用带有 data-i18n 属性的 HTML 元素来标记可翻译的内容。这里有几种使用方式：对于简单的文本内容：&lt;span data-i18n="Role:"&gt;Role:&lt;/span&gt;
{ "Role:": "角色："
}
这将把元素的文本内容替换为“Role:”的翻译。要翻译诸如 title 或 placeholder 之类的属性：&lt;a class="menu_button fa-chain fa-solid fa-fw" title="Insert prompt" data-i18n="[title]Insert prompt"
&gt;&lt;/a&gt;
{ "Insert prompt": "插入提示词"
}
[title] 前缀指示要翻译的属性。其余的属性值是 JSON 文件中将用于查找的文本。通常，开发人员会使用英文文本作为键，但这不是强制要求。键可以是任何唯一的标识符。请注意，原始英文文本必须存在于相应的属性中（例如 title="Insert prompt"）。它在翻译缺失时作为回退使用。最重要的是，英文文本文件通常不包含翻译。下面是使用唯一标识符 no_items_text 作为键，而不是英文文本的例子：&lt;!--suppress HtmlUnknownAttribute --&gt;
&lt;div class="openai_logit_bias_list" no_items_text="No items" data-i18n="[no_items_text]openai_logit_bias_no_items"
&gt;&lt;/div&gt;
{ "openai_logit_bias_no_items": "没有相关产品"
}
有些元素需要同时翻译其内容和属性，通过分号分隔。最常见的模式是同时翻译元素的文本内容和 title 属性：&lt;div data-source="openrouter" class="menu_button menu_button_icon openrouter_authorize" title="Get your OpenRouter API token using OAuth flow. You will be redirected to openrouter.ai" data-i18n="Authorize;[title]Get your OpenRouter API token using OAuth flow. You will be redirected to openrouter.ai"
&gt; Authorize
&lt;/div&gt;
{ "Authorize": "授权", "Get your OpenRouter API token using OAuth flow. You will be redirected to openrouter.ai": "通过 OAuth 流程获取您的 OpenRouter API 令牌，您将被重定向到 openrouter.ai"
}
这将翻译：
使用键 "Authorize" 来翻译元素的文本内容
使用键 "Get your OpenRouter API token using OAuth flow. You will be redirected to openrouter.ai" 来翻译 title 属性
请注意，title 属性和元素文本内容在没有翻译时都提供了英文回退。你还可以翻译多个属性：&lt;!--suppress HtmlUnknownAttribute --&gt;
&lt;textarea id="send_textarea" name="text" class="mdHotkeys" data-i18n="[no_connection_text]Not connected to API!;[connected_text]Type a message, or /? for help" placeholder="Not connected to API!" no_connection_text="Not connected to API!" connected_text="Type a message, or /? for help"
&gt;&lt;/textarea&gt;
对应的翻译 JSON 文件应如下所示：{ "Not connected to API!": "无法连接到 API！", "Type a message, or /? for help": "输入消息，或 /? 获取帮助"
}
当页面加载时，系统会：
查找所有带有 data-i18n 属性的元素
解析任何属性前缀（如 [title] 或 [placeholder]）
在语言的 JSON 文件中查找每个键
用翻译后的文本替换元素的内容或属性
对于 JavaScript 代码中的动态文本，翻译使用以下两种方式： 使用 t 函数的模板字面量：
toastr.warn(t`Tag ${tagName} not found.`); 直接翻译函数：
translate("Some text", "optional_key"); 有些字符串包含用于动态值的占位符，格式为 ${0}、${1} 等：toastr.error(t`Could not find proxy with name '${presetName}'`);
{ "Could not find proxy with name '${0}'": "找不到名为 '${0}' 的代理"
}
保持占位符在键和翻译中一致。系统会用 ${0} 等替换 presetName 等值。假设你不仅想修复一个烦人的缺失翻译，而是想找到所有的缺失翻译。这是一个宏大的目标！即使修复一个翻译也很值得。但如果你想全面抓取缺失翻译，你需要一个工具。<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-i18n" target="_self">https://github.com/SillyTavern/SillyTavern-i18n</a>用于处理前端本地化文件的工具。特点：
自动从 HTML 文件中添加需要翻译的新键。
从本地化文件中删除缺失的键。
使用自动的 Google 翻译填充缺失的值。
按键对 JSON 文件进行排序。
这些功能在 用户设置 &gt; 调试菜单 下。检测当前语言环境中缺失的本地化数据，并将数据输出到浏览器控制台。如果当前语言环境是英文，则搜索所有其他语言环境。控制台将显示缺失翻译的表格，包含以下内容：
键：需要翻译的文本或标识符
语言：当前语言代码
值：需要翻译的英文文本
重新应用当前选择的语言环境到页面
警告：这些工具并不完美 它们不能捕捉 JavaScript 代码中缺失的翻译
它们不能捕捉 HTML 中缺失的 data-i18n 属性，它们只会捕捉缺失的键
getMissingTranslations 代码存在 bug：键前缀不应该包含 [title] 或 [placeholder] 要添加对新语言的支持： 将你的语言添加到 public/locales/lang.json 中：
{ "lang": "xx-xx", "display": "语言名称（英文名称）"
} 创建 public/locales/xx-xx.json 文件，并填入你的翻译内容 当你的翻译准备好后：
验证你的 JSON 文件是否有效
在应用程序中彻底测试
通过 GitHub 提交拉取请求
]]></description><link>sillytavern/4-开发与自动化/4.5-国际化-(i18n).html</link><guid isPermaLink="false">SillyTavern/4-开发与自动化/4.5 国际化 (i18n).md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222161516881.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222161516881.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[什么是SillyTavern？]]></title><description><![CDATA[<img alt="banner" src="img/20241222151733954.png" target="_self">SillyTavern - 高级用户的 LLM 前端界面SillyTavern（简称 ST）是一个本地安装的用户界面，允许你与文本生成 LLM（大语言模型）、图像生成引擎和 TTS（文本转语音）语音模型进行交互。我们的目标是为用户提供尽可能多的 LLM 提示控制和实用功能，将陡峭的学习曲线视为乐趣的一部分。SillyTavern 是一个由 LLM 爱好者组成的社区推动的激情项目，始于 2023 年 2 月，基于 TavernAI 1.2.8 的一个分支，现在已经有超过 100 名贡献者，并且经历了 2 年的独立开发，仍然是高级 AI 爱好者的领先软件之一。
<br>
API 连接
<img alt="screenshot1" src="img/20241222152902599.jpg" target="_self"> <br>
聊天界面 (Chat UI)
<img alt="screenshot2" src="img/20241222152902600.jpg" target="_self"> <br>
高级格式 (Advanced Formatting)
<img alt="screenshot3" src="img/20241222152902601.jpg" target="_self"> <br>
世界信息 (World Info)
<img alt="screenshot4" src="img/20241222152902602.jpg" target="_self"> 硬件要求很低：它可以运行在任何支持 NodeJS 18 或更高版本的设备上。如果你打算在本地计算机上进行 LLM 推理，推荐使用一款 3000 系列的 NVIDIA 显卡，VRAM 至少为 6GB。按照你的平台选择以下安装指南：
<br><a data-href="1.1 Windows" href="sillytavern/1-安装/1.1-windows.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.1 Windows</a>
<br><a data-href="1.2 Linux 和 Mac" href="sillytavern/1-安装/1.2-linux-和-mac.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.2 Linux 和 Mac</a>
<br><a data-href="1.3 Android" href="sillytavern/1-安装/1.3-android.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.3 Android</a>
<br><a data-href="1.4 Docker" href="sillytavern/1-安装/1.4-docker.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.4 Docker</a>
SillyTavern 采用双分支系统，以确保所有用户的顺利体验。
release - 🌟 推荐大多数用户使用。这是最稳定的分支，只有在推出重要版本时才会更新，适合大多数用户。通常每月更新一次。
staging - ⚠️ 不推荐普通用户使用。此分支包含最新功能，但请小心，它可能随时出现问题。仅供高级用户和爱好者使用。每天多次更新。
<br>由于 SillyTavern 只是一个界面，你需要一个 LLM 后端来进行推理。你可以使用 AI Horde 来进行即时的聊天体验。除此之外，我们支持许多其他本地和云端 LLM 后端：OpenAI 兼容的 API、KoboldAI、Tabby 等等。你可以在 <a data-tooltip-position="top" aria-label="2.5 API 连接" data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">API 连接</a> 部分了解更多支持的 API。SillyTavern 是围绕“角色卡片”这一概念构建的。角色卡片是一组设置 LLM 行为的提示，必须有它才能在 SillyTavern 中进行持久对话。它们的功能类似于 ChatGPT 的 GPT 或 Poe 的机器人。角色卡片的内容可以是任何东西：抽象的场景、专门为某个任务定制的助手、名人或虚拟角色。名称字段是唯一需要填写的必需项。要与语言模型进行中立的对话，只需创建一个名为“Assistant”的新卡片，其他字段可以留空。为了进行更具主题性的对话，你可以为语言模型提供各种背景信息、行为和写作模式，以及一个情景以启动对话。如果不选择角色卡片，或者只是想测试 LLM 连接，可以直接在 SillyTavern 的欢迎屏幕上的输入框中输入你的提示内容。请注意，这样的对话是临时的，不会被保存。要了解如何定义角色卡片，可以查看默认角色（Seraphina）或从“下载扩展与资产”菜单中下载一些社区制作的卡片。<br>你还可以从头开始创建自己的角色卡片。有关更多信息，请参考 <a data-tooltip-position="top" aria-label="2.9.1 角色设计" data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">角色设计</a> 指南。
<br>高级 <a data-tooltip-position="top" aria-label="2.6.1 高级格式化" data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">文本生成设置</a>，包括许多社区制作的预设
<br><a data-tooltip-position="top" aria-label="2.7 世界书（World Info）" data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">世界信息支持</a>: 创建丰富的背景故事或在角色卡片中节省标记
<br><a data-tooltip-position="top" aria-label="2.9.3 群聊" data-href="2.9.3 群聊" href="sillytavern/2-使用指南/2.9.3-群聊.html#_0" class="internal-link" target="_self" rel="noopener nofollow">群聊功能</a>: 多机器人房间，角色可以与你和/或彼此对话
<br><a data-tooltip-position="top" aria-label="4.3 UI 扩展" data-href="4.3 UI 扩展" href="sillytavern/4-开发与自动化/4.3-ui-扩展.html#_0" class="internal-link" target="_self" rel="noopener nofollow">丰富的 UI 自定义选项</a>: 主题颜色、背景图片、CSS 自定义等
<br><a data-tooltip-position="top" aria-label="2.8 用户设置" data-href="2.8 用户设置" href="sillytavern/2-使用指南/2.8-用户设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">用户人物设定</a>: 让 AI 了解你的一些信息，增强沉浸感
<br><a data-tooltip-position="top" aria-label="2.9.6 数据库（RAG）" data-href="2.9.6 数据库（RAG）" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">内置 RAG 支持</a>: 向对话中添加文档，供 AI 参考
<br>丰富的 <a data-tooltip-position="top" aria-label="2.3.1 斜杠命令" data-href="2.3.1 斜杠命令" href="sillytavern/2-使用指南/2.3.1-斜杠命令.html#_0" class="internal-link" target="_self" rel="noopener nofollow">聊天命令</a> 系统和自己的 <a data-tooltip-position="top" aria-label="4.1 STscript 语言参考" data-href="4.1 STscript 语言参考" href="sillytavern/4-开发与自动化/4.1-stscript-语言参考.html#_0" class="internal-link" target="_self" rel="noopener nofollow">脚本引擎</a>
SillyTavern 支持扩展功能。
<br><a data-tooltip-position="top" aria-label="3.6 表情图像（头像）" data-href="3.6 表情图像（头像）" href="sillytavern/3-扩展功能/3.6-表情图像（头像）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">表情图像（头像）</a>
<br><a data-tooltip-position="top" aria-label="3.13 总结（Summarize）" data-href="3.13 总结（Summarize）" href="sillytavern/3-扩展功能/3.13-总结（summarize）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">自动摘要聊天记录</a>
<br>自动 UI 和 <a data-tooltip-position="top" aria-label="3.2 聊天翻译" data-href="3.2 聊天翻译" href="sillytavern/3-扩展功能/3.2-聊天翻译.html#_0" class="internal-link" target="_self" rel="noopener nofollow">聊天翻译</a>
<br><a data-tooltip-position="top" aria-label="3.8 图像生成" data-href="3.8 图像生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#_0" class="internal-link" target="_self" rel="noopener nofollow">稳定扩散/FLUX/DALL-E 图像生成</a>
<br>AI 回复消息的<a data-tooltip-position="top" aria-label="3.14 文本转语音 (TTS)" data-href="3.14 文本转语音 (TTS)" href="sillytavern/3-扩展功能/3.14-文本转语音-(tts).html#_0" class="internal-link" target="_self" rel="noopener nofollow">文本转语音</a>（通过 ElevenLabs、Silero 或操作系统自带的 TTS）
<br><a data-tooltip-position="top" aria-label="3.18 网页搜索" data-href="3.18 网页搜索" href="sillytavern/3-扩展功能/3.18-网页搜索.html#_0" class="internal-link" target="_self" rel="noopener nofollow">网页搜索</a>功能，为你的提示提供更多的现实世界背景信息
还有更多可从“下载扩展与资产（Download Extensions &amp; Assets）”菜单中下载。 Discord: cohee, rossascends, wolfsblvt
<br>Reddit: <a data-tooltip-position="top" aria-label="https://www.reddit.com/user/RossAscends/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.reddit.com/user/RossAscends/" target="_self">/u/RossAscends</a>, <a data-tooltip-position="top" aria-label="https://www.reddit.com/user/sillylossy/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.reddit.com/user/sillylossy/" target="_self">/u/sillylossy</a>, <a data-tooltip-position="top" aria-label="https://www.reddit.com/user/Wolfsblvt/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.reddit.com/user/Wolfsblvt/" target="_self">u/Wolfsblvt</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern/issues" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/issues" target="_self">在 GitHub 上提交问题</a> <br>我们欢迎提交 Pull 请求！按照 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern/blob/release/CONTRIBUTING.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/blob/release/CONTRIBUTING.md" target="_self">贡献指南</a> 开始。
我们也欢迎提供有帮助和充分信息的 bug 报告，按照 GitHub 提供的模板提交。
我们不接受对项目本身的捐赠。
对于单个贡献者的支持，我们表示感激，但不会影响 SillyTavern 的整体开发方向。
<br>RossAscends 个人有 <a data-tooltip-position="top" aria-label="https://www.patreon.com/RossAscends" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.patreon.com/RossAscends" target="_self">Patreon</a> 和 <a data-tooltip-position="top" aria-label="https://ko-fi.com/rossascends" rel="noopener nofollow" class="external-link is-unresolved" href="https://ko-fi.com/rossascends" target="_self">Ko-fi</a> 页面
<br>SillyTavern 是一个免费的开源项目，采用 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern/blob/release/LICENSE" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/blob/release/LICENSE" target="_self">AGPL-3.0 许可证</a> 发布。]]></description><link>sillytavern/什么是sillytavern？.html</link><guid isPermaLink="false">SillyTavern/什么是SillyTavern？.md</guid><pubDate>Sun, 22 Dec 2024 21:54:44 GMT</pubDate><enclosure url="img/20241222151733954.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;img/20241222151733954.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.19.2 本地安装]]></title><description><![CDATA[本页面包含在本地设备上安装 SillyTavern Extras 的说明。已停用
Extras 项目已于 2024 年 4 月停用，不再进行任何更新或模块开发。绝大多数模块已在主 SillyTavern 应用中原生提供。您仍然可以安装并使用该项目，但如果遇到任何问题，请不期望能得到即时支持。
本地安装 Extras 可能在某些操作系统（尤其是 Termux）上较为复杂或无法实现。
简单的设置
免费使用
无需 Colab GPU 积分（使用 use_cpu 选项）
详见 <a class="internal-link" data-href="/extensions/Extras/running-extras-in-colab.md" href=".html" target="_self" rel="noopener nofollow">Colab 指南页面</a>
推荐使用此方法，因为 Conda 会创建一个“虚拟环境”，将 Extras 所需的依赖包放在其中，不会影响系统全局的 Python 设置。
<br>
安装 <a data-tooltip-position="top" aria-label="https://docs.conda.io/en/latest/miniconda.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.conda.io/en/latest/miniconda.html" target="_self">Miniconda</a>
(重要！) 阅读 <a data-tooltip-position="top" aria-label="https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html" target="_self">如何使用 Conda</a> <br>
安装 <a data-tooltip-position="top" aria-label="https://git-scm.com/downloads" rel="noopener nofollow" class="external-link is-unresolved" href="https://git-scm.com/downloads" target="_self">git</a>
(已经通过 git 安装了 SillyTavern 的用户可以跳过此步骤！)
安装好 Miniconda 和 git 后...
在 Conda 命令提示符窗口 中逐一输入以下命令并按下 Enter 键。 创建一个新的 Conda 环境（我们称之为 extras）：
conda create -n extras 激活新环境：
conda activate extras 你应该能看到命令行中左侧出现 (extras)。 安装所需的系统包（这可能需要一些时间）：
conda install python=3.11 git 克隆 Extras 的 GitHub 仓库：
git clone https://github.com/SillyTavern/SillyTavern-extras 进入克隆的 Extras 仓库文件夹：
cd SillyTavern-extras 使用以下命令之一安装 Extras 的依赖包（同样会花费一些时间）： pip install -r requirements.txt - 安装基本功能
pip install -r requirements-rvc.txt - 安装实时语音克隆功能
<br>pip install -r requirements-coqui.txt - 安装 Coqui TTS（不推荐） 如果在这一步遇到问题，请参阅 <a data-tooltip-position="top" aria-label="3.19.2.1 常见问题" data-href="3.19.2.1 常见问题" href="sillytavern/3-扩展功能/3.19.2.1-常见问题.html#_0" class="internal-link" target="_self" rel="noopener nofollow">常见问题</a> 页面解决！ 见下文“安装后如何运行”部分。 这种方法比较简单，但会影响系统全局的 Python 安装。如果你与多个具有不同要求的 Python 程序打交道，这可能会导致冲突。如果这是你第一次接触 Python 环境，应该不会有问题。
<br>安装 Python 3.11: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.python.org/downloads/release/python-3115/" target="_self">https://www.python.org/downloads/release/python-3115/</a>
<br>安装 git: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://git-scm.com/downloads" target="_self">https://git-scm.com/downloads</a>
打开命令提示符窗口并进入一个你具有完全访问权限的文件夹。
克隆仓库：git clone https://github.com/SillyTavern/SillyTavern-extras，按下 Enter。
克隆完成后，输入 cd SillyTavern-extras，按下 Enter。
输入 python -m pip install -r requirements.txt
见下文“安装后如何运行”部分。 打开名为 config.yaml 的文件。该文件位于 SillyTavern 的基础安装文件夹中。
找到名为 enableExtensions 的行。
确保该行的值为 true，而不是 false。
（仅需做一次）
Extras 总是通过 Python 命令行启动。
python server.py 是最基本的启动命令，但它不会启用任何有用的模块。
要启用模块，你需要使用 --enable-modules= 参数，并指定一个以逗号分隔的模块名称列表。
例如：python server.py --enable-modules=caption,summarize,classify这将启用图片描述、文本摘要和实时更新的角色表情模块。以下是模块的描述表：
选择你想要添加到 Python 命令行中的模块。
它们将在下一步中使用。
注意：在 Python 命令行的模块列表中，模块之间必须完全没有空格！在命令提示符窗口中，仍然在 Extras 安装文件夹内...
如果你使用 Conda 安装方法，确保 Conda 环境已经激活。
如果环境没有激活，请输入 conda activate extras。
输入 python server.py --enable-modules=YOUR,SELECTED,MODULE,LIST,HERE。
Extras 服务器将启动。
一段时间后，它将在最后显示一个 URL，默认情况下，本地安装的 URL 为 http://localhost:5100。
复制该 API URL。 启动 SillyTavern 服务器，并在浏览器中查看 SillyTavern 界面。
打开扩展面板（通过页面顶部的“堆叠块”图标）。
将 API URL 粘贴到输入框中。
点击 Connect（连接）。
要再次运行 Extras，只需激活环境并在命令提示符中运行以下命令。conda activate extras，按下 Enter。
python server.py，按下 Enter。
根据你的设置，确保添加了 server.py 额外的命令行选项（见下文）。此步骤为可选，仅适用于 Windows，但在 MacOS 上也可以实现类似功能。 在桌面上右键点击，选择 新建，然后点击 文本文档。 会出现一个新的文件，要求你为其命名。 将文件命名为 STExtras.txt。 打开新创建的文件，使用文本编辑器。 将以下代码粘贴到文件中：
cd C:\_你的_\_完整_\_Extras_\_文件夹_\_路径_\
call conda activate extras
python server.py --enable-modules=YOUR,SELECTED,MODULE,LIST,HERE,WITH,NO,SPACES
call conda deactivate
pause 将占位符中的文件夹路径替换为你实际的 Extras 安装文件夹路径。 将 Python 命令行替换为你实际的命令行。 使用 文件 &gt;&gt; 另存为 保存文件，命名为 STExtras.bat。 你现在可以通过双击该 .bat 文件轻松启动 Extras。如果以后你想更改模块列表（或任何其他命令行修饰符），只需编辑 .bat 文件中的 Python 命令。<br><a data-href="3.19.2.1 常见问题" href="sillytavern/3-扩展功能/3.19.2.1-常见问题.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.19.2.1 常见问题</a>]]></description><link>sillytavern/3-扩展功能/3.19.2-本地安装.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.19.2 本地安装.md</guid><pubDate>Sun, 22 Dec 2024 15:31:18 GMT</pubDate></item><item><title><![CDATA[5.5 VPN 和隧道]]></title><description><![CDATA[VPN 和隧道是一种安全的方式，让你可以从世界任何地方访问你的家庭网络。本指南将向你展示如何使用 VPN 或隧道从任何地方访问你的 SillyTavern 实例。许多路由器提供了在路由器管理页面上托管 VPN 服务器的功能（主要是 OpenVPN 或 WireGuard）。请参考你的路由器手册来设置 VPN，并将你的设备添加到 VPN 中。一旦连接，直接访问你为 SillyTavern 设置的私有 IP 地址，就可以顺利连接。对于普通用户，尤其是 Windows 用户来说，这种方法较为简便。Cloudflare Zero Trust 是 Cloudflare 提供的一项免费的组织功能，允许你添加最多 50 个用户。这将通过 Cloudflare 代理你的流量，并通过使用 cloudflared 将你的 ST 计算机设置为隧道，你可以像在家中一样连接到 SillyTavern 实例。需要注意的是，建立隧道后，你还需要向路由器的私有 IP 地址添加路由，并计算 IP CIDR 值，才能通过 Cloudflare Zero Trust 实现全局本地访问。与 AI 后端连接的方式类似，你也可以通过 Cloudflare 隧道连接你的 ST 实例，并打开 Cloudflare 隧道页面。但是，每次你想使用 ST 时，你需要复制并粘贴 Cloudflare/NGROK 生成的每个新链接。Tailscale 是一个 VPN 提供商，能够实现安全的远程连接到你的计算机。Tailscale 是一个 VPN 提供商，允许你安全地远程连接到计算机。Tailscale 的开源实现也存在，你也可以使用 <a data-tooltip-position="top" aria-label="https://github.com/juanfont/headscale" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/juanfont/headscale" target="_self">Headscale</a> 来托管 Tailscale 服务器，但这超出了本教程的范围。
<br>访问 <a data-tooltip-position="top" aria-label="https://tailscale.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://tailscale.com/" target="_self">Tailscale 官网</a> 并创建一个新账户。
注意： 对于单人日常使用，Tailscale 永久免费。如果你担心潜在的费用，只需不添加任何支付选项即可。
<br>访问 <a data-tooltip-position="top" aria-label="https://tailscale.com/download" rel="noopener nofollow" class="external-link is-unresolved" href="https://tailscale.com/download" target="_self">Tailscale 下载页面</a>，下载客户端/应用到运行 SillyTavern 的设备和你希望远程连接的设备。
在两个设备上使用你之前创建的账户登录。
<br>访问 <a data-tooltip-position="top" aria-label="https://login.tailscale.com/admin/machines" rel="noopener nofollow" class="external-link is-unresolved" href="https://login.tailscale.com/admin/machines" target="_self">Tailscale 管理页面</a>，并批准两个设备。
记下两个连接设备的名称。 <br>按照 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 通过白名单进行访问控制" data-href="5.4 远程连接#通过白名单进行访问控制" href="sillytavern/5-管理/5.4-远程连接.html#通过白名单进行访问控制_0" class="internal-link" target="_self" rel="noopener nofollow">管理白名单 IP 地址</a> 的指南，将你要用来远程访问 SillyTavern 的设备的机器名称添加到 SillyTavern 的白名单中。
现在，每当你想从任何地方使用 SillyTavern 时，只需执行以下步骤：
在运行 SillyTavern 的计算机和你想要远程连接的设备上打开 Tailscale。
在想要连接的设备上打开浏览器，访问 http://&lt;运行 SillyTavern 的计算机名称&gt;:8000/。 告诉你的朋友创建他们自己的 Tailscale 账户，并在他们的设备上下载客户端。
<br>访问 <a data-tooltip-position="top" aria-label="https://login.tailscale.com/admin/machines" rel="noopener nofollow" class="external-link is-unresolved" href="https://login.tailscale.com/admin/machines" target="_self">Tailscale 管理页面</a>。
在你的计算机上悬停在三个点按钮上，然后点击 "Share..." 或点击三个点按钮并选择 "Sharing settings..."。
取消勾选 "Allow use as an exit node"（除非你希望你的朋友能够通过你的计算机路由他们的所有互联网流量）。
你可以通过电子邮件发送分享链接，或切换到 "Copy share link" 标签，点击大蓝色按钮，然后通过任何方式将链接发送给你的朋友。
你的朋友点击分享链接后，便会看到你的计算机出现在他们的 Tailscale 网络中。
发送给你的朋友与你使用的相同链接，按照上一步骤访问 SillyTavern。
注意： 这将给予你的朋友对你计算机上所有本地服务的完全访问权限，包括 SillyTavern、automatic1111 等等。只有在你完全信任你的朋友时才应进行此操作。]]></description><link>sillytavern/5-管理/5.5-vpn-和隧道.html</link><guid isPermaLink="false">SillyTavern/5-管理/5.5 VPN 和隧道.md</guid><pubDate>Sun, 22 Dec 2024 15:29:51 GMT</pubDate></item><item><title><![CDATA[1.5 更新]]></title><description><![CDATA[根据你的操作系统，找到相应的更新步骤。如果需要安装说明，请参考<a data-href="1 安装" href="sillytavern/1-安装/1-安装.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1 安装</a> 。
本指南假设你已经至少安装并运行过一次 SillyTavern。
你应该是通过 Git 安装的，所以只需要在 SillyTavern 目录下执行 'git pull'。
使用 cd SillyTavern 进入正确的文件夹。
使用 git pull 获取更新。
使用 ./start.sh 或 bash start.sh 启动 SillyTavern。 首先尝试使用位于 SillyTavern 安装根目录下的 UpdateAndStart.bat 文件进行更新。
如果该方法失败，请继续阅读。我们始终推荐用户使用 'git' 进行安装，原因如下：<br>如果你是通过 git clone 安装的，更新时只需在 ST 文件夹中输入 git pull 即可。<a data-tooltip-position="top" aria-label="https://www.google.com/search?q=how+to+open+command+prompt+in+a+folder" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.google.com/search?q=how+to+open+command+prompt+in+a+folder" target="_self">在命令行中进入 ST 文件夹</a>。如果命令提示符遇到问题且已安装 GitHub Desktop，你也可以通过 GitHub Desktop 的 Repository 菜单选择 Pull 来更新。更新会自动并安全地应用。"我最初是通过 Zip 安装的，现在想转换为 Git 安装"你做出了一个明智的选择。如果你是通过 Zip 安装的，你需要重新通过 git 进行安装。<br>幸运的是，我们有<a data-href="1.1 Windows" href="sillytavern/1-安装/1.1-windows.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.1 Windows</a>，你可以按照步骤重新进行 Git 安装。当你在一个新的文件夹中完成 Git 安装后，返回此页面并继续执行 'Zip 更新' 的第 4 步。如果你坚持通过 Zip 安装，这里是更新的繁琐过程： 下载新的发布版本 zip 文件。 将其解压到当前 ST 安装目录外的一个文件夹。 按照你操作系统的常规步骤安装 NodeJS 相关依赖。 根据需要（*）从旧的 ST 安装中复制以下文件/文件夹：
（*）"根据需要" = "如果你对这些文件夹有任何自定义内容"。
更新 &gt;=1.12.0
从旧版本安装中复制 /data 目录和 config.yaml 文件到新安装目录。
从 &lt;1.12.0 更新到 &gt;1.12.0
1.12.0 版本包含自动迁移程序，只有在迁移过程被中断或出错时，才需要以下步骤。 至少运行一次更新后的服务器安装，以创建 /data/default-user 目录。 如果需要，将旧的 /public 文件夹中的文件转移到新的 /data/default-user 目录中。
这些文件夹都不是强制性的，所以仅复制你需要的文件。
注意：不要复制整个 /PUBLIC/ 文件夹
复制整个文件夹可能会破坏新的安装，导致新功能无法使用。
Assets
Backgrounds
Characters
Chats
Context
Groups
Group chats
Instruct
movingUI
KoboldAI Settings
NovelAI Settings
OpenAI Settings
QuickReplies
TextGen Settings (textgen = ooba)
Themes
User Avatars
Worlds
User
settings.json
secrets.json &lt;---- 这个在根目录，而非 /public/ 将这些文件/文件夹复制到新安装目录中的 /data/default-user 文件夹（secrets.json 放到文件夹根目录）。 重新使用适合你操作系统的方法启动 SillyTavern，确保一切正常。 如果一切正常，你可以安全地删除旧的 ST 文件夹。 你必须按照Docker 容器更新指南 更新卷映射，以适应 1.12.0 引入的新数据模型。这意味着你修改了默认文件，而这些文件在远程仓库中已经发生了变化（比如设置了预设）。要解决此问题，请在终端中运行以下命令。请谨慎使用，因为它可能会导致数据丢失。如果需要，请先备份。git merge --abort
git reset --hard
git pull --rebase --autostash 如果你修改了 SillyTavern 系统文件，git pull 可能会失败。
有时候更新可能需要我们修改一个重要文件，这也会导致类似问题。
通常是默认的预设文件或 package-lock.json 文件。
在这种情况下，你可以尝试将文件移动到其他文件夹（或删除文件），然后再执行 git pull。
另一个解决方案是使用 git pull --rebase --autostash。 这意味着 SillyTavern 新增了 npm 包依赖。
运行 npm install 来解决这个问题，提供的 Start.bat 和 start.sh 脚本会自动执行此操作。
如果没有解决问题，删除 node_modules 文件夹后再试。
Windowsrmdir /s /q node_modules
npm cache clean --force
npm install
Unix/Linuxrm -rf node_modules
npm cache clean --force
npm install
<br><a data-href="1.5.1 迁移指南 1.12.0" href="sillytavern/1-安装/1.5.1-迁移指南-1.12.0.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.5.1 迁移指南 1.12.0</a><br><a data-href="1.5.2 迁移指南 1.9.0" href="sillytavern/1-安装/1.5.2-迁移指南-1.9.0.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.5.2 迁移指南 1.9.0</a>]]></description><link>sillytavern/1-安装/1.5-更新.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.5 更新.md</guid><pubDate>Sun, 22 Dec 2024 15:14:42 GMT</pubDate></item><item><title><![CDATA[5.6 反向代理]]></title><description><![CDATA[危险
本节不涉及OpenAI/Claude的反向代理。这里所指的是HTTP/HTTPS反向代理。
在设置Termux时是否感到困惑？是否厌倦了在每台设备上更新和安装ST？想要组织你的聊天和角色吗？那么你很幸运。本指南将尽可能地介绍如何在你的PC上托管SillyTavern，你可以从任何地方连接并在运行AI模型的同一台PC上与机器人聊天！警告
本指南不适合初学者。它将非常技术性。
对于Windows用户
本指南不适用于Windows用户。我们建议使用Linux虚拟机或WSL2来按照本指南进行操作。
对于Linux用户
你需要具备以下知识： Linux命令行操作
DNS记录
公共IP地址
<a data-tooltip-position="top" aria-label="https://www.docker.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.docker.com" target="_self">Docker</a> <br>你必须为自己购买一个域名，并为你的SillyTavern页面配置一个CNAME。我们建议通过<a data-tooltip-position="top" aria-label="https://www.cloudflare.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.cloudflare.com" target="_self">Cloudflare</a>购买或添加域名，因为本指南将介绍如何使用Cloudflare进行配置。<br>对于Linux，我们将通过<a data-tooltip-position="top" aria-label="https://traefik.io/traefik/" rel="noopener nofollow" class="external-link is-unresolved" href="https://traefik.io/traefik/" target="_self">Traefik</a>来反向代理SillyTavern。虽然还有其他选择，如NGINX或Caddy，但本指南将使用Traefik，因为我们自己就是这样做的。
使用ifconfig或从路由器获取计算机的私有IP。
提示
建议将私有IP设置为静态IP。请参考路由器手册或Google搜索如何配置静态IP。 通过Google搜索“what's my ip”获取你路由器的公共IP。
关于公共IP
大多数家庭/住宅网络使用动态IP，这会在几个月后更新。如果你有动态IP，使用DDClient或者记得时常检查并在Cloudflare面板中更改你的公共IP。 <br>按照Docker安装指南<a data-tooltip-position="top" aria-label="https://docs.docker.com/engine/install/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.docker.com/engine/install/" target="_self">这里</a>安装Docker。
危险
不要安装Docker Desktop。 <br>按照<a data-tooltip-position="top" aria-label="https://docs.docker.com/engine/install/linux-postinstall/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.docker.com/engine/install/linux-postinstall/" target="_self">Docker后安装指南</a>中的以非root用户管理Docker步骤进行操作。
进入Linux的根目录并创建一个名为docker的新文件夹。
cd /
sudo mkdir docker &amp;&amp; cd docker 执行chown命令，将&lt;USER&gt;替换为你的Linux用户名，以设置docker文件夹的权限。
sudo chown -R &lt;USER&gt;:&lt;USER&gt; . 在docker文件夹中创建一个名为secrets的文件夹，并在其中创建cloudflare文件夹。
mkdir secrets &amp;&amp; mkdir secrets/cloudflare 在docker文件夹中创建一个名为appdata的文件夹，并在其中创建traefik文件夹，然后进入appdata/traefik文件夹。
mkdir appdata &amp;&amp; mkdir appdata/traefik
cd appdata/traefik 使用touch命令创建一个acme.json文件，并将其权限设置为600。
touch acme.json
chmod 600 acme.json 使用nano或其他编辑器创建一个名为traefik.yml的文件，并粘贴以下内容。将模板中的电子邮件替换为你自己的电子邮件，保存文件。
api: dashboard: true debug: true insecure: true
entryPoints: http: address: ":80" http: redirections: entryPoint: to: https scheme: https https: address: ":443"
serversTransport: insecureSkipVerify: true
providers: docker: endpoint: "unix:///var/run/docker.sock" exposedByDefault: false file: filename: /config.yml watch: true
certificatesResolvers: cloudflare: acme: email: YOUR_CLOUDFLARE_EMAIL@DOMAIN.com storage: acme.json dnsChallenge: provider: cloudflare
#disablePropagationCheck: true # 如果在通过cloudflare拉取证书时遇到问题，可以取消注释此行，禁用等待TXT记录传播到所有授权名称服务器的检查。
resolvers: - "1.1.1.1:53" - "1.0.0.1:53" 返回docker文件夹。
cd /docker 使用nano或其他编辑器创建一个名为docker-compose.yaml的文件，并粘贴以下内容。保存文件后继续。
secrets: CF_DNS_API_KEY: file: ./secrets/cloudflare/CF_DNS_API_KEY
services: traefik: image: traefik:latest container_name: traefik restart: unless-stopped secrets: - CF_DNS_API_KEY ports: - 80:80 - 443:443 - 8080:8080 environment: CLOUDFLARE_DNS_API_TOKEN_FILE: /run/secrets/CF_DNS_API_KEY CLOUDFLARE_ZONE_API_TOKEN_FILE: /run/secrets/CF_DNS_API_KEY volumes: - /var/run/docker.sock:/var/run/docker.sock:ro - ./appdata/traefik/traefik.yml:/traefik.yml:ro - ./appdata/traefik/config.yml:/config.yml:ro - ./appdata/traefik/acme.json:/acme.json - /etc/localtime:/etc/localtime:ro
networks: internal: driver: bridge 登录到Cloudflare并点击你的域名，然后点击获取你的API令牌。
点击创建令牌，然后选择创建自定义令牌，并确保给你的令牌以下权限：
令牌权限
Zone -&gt; DNS -&gt; 编辑
Zone -&gt; Zone -&gt; 阅读
点击继续到总结，然后点击创建令牌。
复制给你的令牌密钥并将其保存在安全的地方。
cd进入secrets/cloudflare，使用nano或类似编辑器创建一个名为CF_DNS_API_KEY的文件，并将你的令牌粘贴进去。
返回你的域名页面，进入DNS。使用添加记录创建两个类型为A的记录，如下所示。将PUBLIC_IP替换为你自己的公共IP，然后点击保存。 创建另一个类型为CNAME的记录，然后点击保存。在Cloudflare面板上它应如下所示： cd进入appdata/traefik，使用nano或类似编辑器创建一个名为config.yml的文件，并粘贴以下内容。将PRIVATE_IP替换为你获取的私有IP，并将silly.DOMAIN.com替换为你为子域名和域名页面设置的名称，然后保存文件。
http: routers: sillytavern: entryPoints: - "https" rule: "Host(`silly.DOMAIN.com`)" middlewares: - https-redirectscheme tls: {} service: sillytavern services: sillytavern: loadBalancer: servers: - url: "http://PRIVATE_IP:8000" passHostHeader: true middlewares: https-redirectscheme: redirectScheme: scheme: https permanent: true 使用以下命令运行Docker Compose：
cd /docker
docker compose up -d 进入你的SillyTavern文件夹并编辑config.yaml，启用监听模式和基本认证，同时禁用whitelistMode。
listen: yes
whitelistMode: false
basicAuthMode: true
提示
确保将默认的用户名和密码更改为你可以记住的强密码。
或者使用SillyTavern帐户作为用户名和密码：basicAuthMode: true
enableUserAccounts: true
perUserBasicAuth: true
提示
在启用perUserBasicAuth之前，确保你有一个有效的多用户设置，并且密码工作正常。 等待几分钟，然后打开你为ST设置的域名页面。此时，你应该能够通过一个URL和一个帐户从任何地方打开SillyTavern。
提示
如果过了几分钟仍然没有反应，请检查Traefik容器的日志，看是否有任何错误。 祝你使用愉快！ :D
注意
请注意，我们是在裸金属Linux上运行SillyTavern并通过Docker使用的。这只是我们如何在其他Docker容器中运行ST的粗略想法。 按照Linux（裸金属SillyTavern）的步骤1-11操作。
登录到Cloudflare并点击你的域名，然后点击获取你的API令牌。
点击创建令牌，然后选择创建自定义令牌，并确保给你的令牌以下权限：
令牌权限
Zone -&gt; DNS -&gt; 编辑
Zone -&gt; Zone -&gt; 阅读
点击继续到总结，然后点击创建令牌。
复制给你的令牌密钥并将其保存在安全的地方。
cd进入secrets/cloudflare，使用nano或类似编辑器创建一个名为CF_DNS_API_KEY的文件，并将你的令牌粘贴进去。
返回你的域名页面，进入DNS。使用添加记录创建两个类型为A的记录，如下所示。将PUBLIC_IP替换为你自己的公共IP，并将示例域名替换为你的域名，然后点击保存。 创建另一个类型为CNAME的记录，然后点击保存。在Cloudflare面板上它应如下所示： 在docker文件夹中使用git clone命令克隆SillyTavern代码库。
cd /docker &amp;&amp; git clone https://github.com/SillyTavern/SillyTavern 使用nano或其他编辑器创建一个名为docker-compose.yaml的文件并粘贴以下内容。将silly.DOMAIN.com替换为你刚才添加的子域名，保存文件。
secrets: CF_DNS_API_KEY: file: ./secrets/cloudflare/CF_DNS_API_KEY
services: traefik: image: traefik:latest container_name: traefik restart: unless-stopped secrets: - CF_DNS_API_KEY ports: - "80:80" - 443:443 - 8080:8080 environment: CLOUDFLARE_DNS_API_TOKEN_FILE: /run/secrets/CF_DNS_API_KEY CLOUDFLARE_ZONE_API_TOKEN_FILE: /run/secrets/CF_DNS_API_KEY volumes: - /var/run/docker.sock:/var/run/docker.sock:ro - ./appdata/traefik/traefik.yml:/traefik.yml:ro - ./appdata/traefik/config.yml:/config.yml:ro - ./appdata/traefik/acme.json:/acme.json - /etc/localtime:/etc/localtime:ro sillytavern: build: ./SillyTavern container_name: sillytavern hostname: sillytavern image: ghcr.io/sillytavern/sillytavern:latest volumes: - "./appdata/sillytavern/config:/home/node/app/config" - "./appdata/sillytavern/data:/home/node/app/data" restart: unless-stopped labels: - "traefik.enable=true" - "traefik.http.routers.sillytavern.entrypoints=http" - "traefik.http.routers.sillytavern.rule=Host(`silly.DOMAIN.com`)" - "traefik.http.middlewares.sillytavern-https-redirect.redirectscheme.scheme=https" - "traefik.http.routers.sillytavern.middlewares=sillytavern-https-redirect" - "traefik.http.routers.sillytavern-secure.entrypoints=https" - "traefik.http.routers.sillytavern-secure.rule=Host(`silly.DOMAIN.com`)" - "traefik.http.routers.sillytavern-secure.tls=true" - "traefik.http.routers.sillytavern-secure.service=sillytavern" - "traefik.http.services.sillytavern.loadbalancer.server.port=8000"
networks: internal: driver: bridge 使用以下命令启动Docker Compose：
docker compose up -d 停止SillyTavern Docker容器。
docker compose stop sillytavern 进入SillyTavern文件夹（appdata/sillytavern/config）并编辑config.yaml，启用监听模式和基本认证，同时禁用whitelistMode。
listen: yes
whitelistMode: false
basicAuthMode: true
提示
确保将默认的用户名和密码更改为你可以记住的强密码。 再次启动SillyTavern Docker容器。
docker compose up -d sillytavern 等待几分钟，然后打开你为ST设置的域名页面。此时，你应该能够通过一个URL和一个帐户从任何地方打开SillyTavern。
提示
如果过了几分钟仍然没有反应，请检查Traefik容器的日志，看是否有任何错误。 祝你使用愉快！ :D
<br><a data-tooltip-position="top" aria-label="https://ddclient.net/" rel="noopener nofollow" class="external-link is-unresolved" href="https://ddclient.net/" target="_self"><strong></strong></a>DDClient允许你在ISP更改公共IP的情况下同步你的公共IP到Cloudflare，这样你就能继续像以前一样访问你的ST实例。]]></description><link>sillytavern/5-管理/5.6-反向代理.html</link><guid isPermaLink="false">SillyTavern/5-管理/5.6 反向代理.md</guid><pubDate>Sun, 22 Dec 2024 14:57:11 GMT</pubDate></item><item><title><![CDATA[6-许可证与版权]]></title><description><![CDATA[本程序以它可能对您有所帮助的方式分发，但不提供任何形式的担保；甚至不包含适销性或特定用途适用性的隐含担保。详情请参见 GNU Affero 通用公共许可证。原始 <a data-tooltip-position="top" aria-label="https://github.com/TavernAI/TavernAI" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/TavernAI/TavernAI" target="_self">TavernAI</a> 1.2.8 版本由 Humi 开发：MIT 许可证Git 提交历史已被压缩至 1.9.0 版本的状态。不幸的是，压缩提交历史也意味着丢失了代码贡献历史。如果您为 SillyTavern 的开发做出了贡献，并希望在 README 文件和文档网站上看到您的名字，请与我们联系！点击下方 ↓ 查看完整的 SillyTavern 文档贡献者名单。<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Docs/graphs/contributors" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Docs/graphs/contributors" target="_self">SillyTavern/SillyTavern-Docs 的贡献者 --- Contributors to SillyTavern/SillyTavern-Docs</a>]]></description><link>sillytavern/6-许可证与版权.html</link><guid isPermaLink="false">SillyTavern/6-许可证与版权.md</guid><pubDate>Sun, 22 Dec 2024 14:57:10 GMT</pubDate></item><item><title><![CDATA[5.4 远程连接]]></title><description><![CDATA[通常，这是指用户希望在手机上使用 SillyTavern，同时让其 PC 在同一 WiFi 网络内运行 ST 服务器的情况。这也是允许从外部网络进行远程连接的第一步。警告
不要使用端口转发将 ST 服务器暴露到互联网。 推荐使用 VPN 或隧道服务，如 Cloudflare Zero Trust、ngrok 或 Tailscale。更多信息请参见 <a data-tooltip-position="top" aria-label="5.5 VPN 和隧道" data-href="5.5 VPN 和隧道" href="sillytavern/5-管理/5.5-vpn-和隧道.html#_0" class="internal-link" target="_self" rel="noopener nofollow">VPN 和隧道</a> 指南。
危险声明
在没有确保适当安全措施的情况下，永远不要将任何实例托管到开放的互联网。
如果由于不当或不充分的安全实施导致未经授权的访问，我们不对任何损坏或损失负责。
默认情况下，ST 服务器仅接受来自其运行机器的连接（localhost）。要允许它监听来自其他设备的连接，请将 config.yaml 中的 listen 选项设置为 true。# 监听传入的连接 listen: true
当 ST 正在监听远程连接时，您应在控制台中看到以下信息：
SillyTavern is listening on IPv4: 0.0.0.0:8000 并且会有一些解释说明。当 ST 没有 监听远程连接时，控制台中应显示以下信息：
SillyTavern is listening on IPv4: 127.0.0.1:8000 启用远程连接监听后，您必须开启至少一种访问控制方法，否则服务器将拒绝启动。
在 SillyTavern 基本安装文件夹中创建一个名为 whitelist.txt 的新文本文件。
使用文本编辑器打开该文件，添加您希望允许连接的 IP 列表。
每个 IP 地址必须单独占一行。
127.0.0.1 必须包含在列表中，否则您将无法从主机机器连接。
可以接受单个 IP 地址和通配符（_）IP 范围。
还可以使用 CIDR 掩码（例如 10.0.0.0/24）。
保存 whitelist.txt 文件。
重新启动您的 SillyTavern 服务器。 允许本地网络中的任何设备连接： 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 127.0.0.1 ::1 如果您不确定本地网络使用的地址，可以使用上述白名单。
仅允许两个特定设备连接： 192.168.0.2 192.168.0.5 127.0.0.1 允许 192.168.0.* 子网中的任何设备连接： 192.168.0.* 127.0.0.1 Note
config.yaml 也有一个 whitelist 数组，您可以以相同的方式使用它，但如果存在 whitelist.txt，此数组将被忽略。我们不建议使用 config.yaml 中的 IP 列表，因为使用 whitelist.txt 更简单。
移除通过白名单进行的访问控制
将 whitelistMode 设置为 false，删除（或重命名）SillyTavern 基本安装文件夹中的 whitelist.txt 文件，然后重新启动服务器。
警告
HTTP 基本认证不提供强大的安全性。<br>
没有速率限制来防止暴力破解攻击。如果这是一个问题，建议使用带有 TLS 和速率限制的反向代理，以及一个专用的 <a class="internal-link" data-href="/sso.md" href=".html" target="_self" rel="noopener nofollow">身份验证服务</a>。
当客户端通过 HTTP 连接时，服务器将要求输入用户名和密码。这仅在启用远程连接（listen: true）时有效。要启用 HTTP 基本认证，打开 SillyTavern 基本目录中的 config.yaml 文件，搜索 basicAuthMode，将 basicAuthMode 设置为 true 并设置用户名和密码。注意：config.yaml 只有在 ST 至少执行过一次后才会存在。basicAuthMode: true
basicAuthUser: username: "MyUsername" password: "MyPassword"
或者，您可以按如下方式启用基本认证：basicAuthMode: true
enableUserAccounts: true
perUserBasicAuth: true
在 perUserBasicAuth 模式下，基本认证的用户名和密码将与任何有效的具有密码的多用户帐户相同。此外，SillyTavern 将直接登录到该帐户。启用 perUserBasicAuth 之前，请确保您有一个设置了密码的帐户。保存文件并重新启动 SillyTavern（如果它已经在运行）。您应该在连接到 ST 时看到提示输入用户名和密码。用户名和密码以明文形式传输。如果您对此有所担忧，可以通过 HTTPS 服务 ST。设置好白名单后，您需要获取 ST 主机设备的 IP 地址。如果 ST 主机设备在同一 WiFi 网络中，您将使用 ST 主机的内部 WiFi IP：
在 Windows 上：点击 Windows 按钮 &gt; 在搜索栏中输入 cmd.exe &gt; 在控制台中输入 ipconfig，按回车 &gt; 查找 IPv4 列表。
如果您（或其他人）希望在不在同一网络下连接到您的 ST 托管服务器，您将需要 ST 主机设备的公共 IP 地址。
<br>在使用 ST 主机设备时，访问 <a data-tooltip-position="top" aria-label="https://whatismyipaddress.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://whatismyipaddress.com/" target="_self">此页面</a>，查找 IPv4，这就是您从远程设备连接时需要使用的 IP 地址。
根据您所得到的 IP 地址和端口号，将其输入到远程设备的网页浏览器中。一个典型的同一 WiFi 网络内的 ST 主机地址可能是：http://192.168.0.5:8000请使用 http:// 而不是 https://新的连接将显示在控制台窗口中，并记录在 SillyTavern 基本目录中的 access.log 文件中。同一台机器上的浏览器连接的控制台消息如下：
New connection from 127.0.0.1; User Agent: ... 来自同一网络中其他机器的浏览器连接的控制台消息可能是：
New connection from 192.168.116.187; User Agent: ... 如果连接被拒绝，控制台消息将如下所示：
New connection from 192.168.116.211; User Agent: ... Forbidden: Connection attempt from 192.168.116.211. If you are attempting to connect, please add your IP address in whitelist or disable whitelist mode in config.yaml in root of SillyTavern folder. access.log 文件将包含连接信息和时间戳，但不包含连接是否被接受或拒绝的信息。仍然无法连接？
<br>如果连接尝试在控制台中显示（<a data-tooltip-position="top" aria-label="5.4 远程连接 > 连接日志" data-href="5.4 远程连接#连接日志" href="sillytavern/5-管理/5.4-远程连接.html#连接日志_0" class="internal-link" target="_self" rel="noopener nofollow">连接日志</a>），但被拒绝，则可能是一个 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 通过白名单进行访问控制" data-href="5.4 远程连接#通过白名单进行访问控制" href="sillytavern/5-管理/5.4-远程连接.html#通过白名单进行访问控制_0" class="internal-link" target="_self" rel="noopener nofollow">白名单问题</a>。
<br>如果 ST 正在监听远程连接，但连接尝试没有出现在控制台中，则可能是一个 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 网络问题" data-href="5.4 远程连接#网络问题" href="sillytavern/5-管理/5.4-远程连接.html#网络问题_0" class="internal-link" target="_self" rel="noopener nofollow">网络问题</a>。
<br>如果 ST 没有监听远程连接，则可能是一个 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 允许远程连接" data-href="5.4 远程连接#允许远程连接" href="sillytavern/5-管理/5.4-远程连接.html#允许远程连接_0" class="internal-link" target="_self" rel="noopener nofollow">读取问题</a>。 在 Windows 上，应用程序可能会被应用程序防火墙阻止。解决此问题的最快方法是卸载并重新安装 Node.js，在防火墙提示时允许它访问网络。否则，您需要手动允许 Node.js 应用程序通过 Windows 应用程序防火墙。
在 Windows 11 上，请在设置 &gt; 网络和互联网 &gt; 以太网中启用私人网络配置文件类型。这对于 Windows 11 非常重要，否则您将无法连接，即使有上述防火墙规则。
在 Linux 上，您可能需要通过防火墙允许端口。可以使用命令 sudo ufw allow 8000 来允许 8000 端口的流量。
请勿修改路由器上的端口转发设置。对于在本地网络中访问 ST，这是不必要的，且可能会将您的服务器暴露到互联网。<br>如果您尝试从 <a data-tooltip-position="top" aria-label="5.4 远程连接" data-href="5.4 远程连接" href="sillytavern/5-管理/5.4-远程连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">外部网络</a> 访问您的 ST 服务器，但无法连接，请识别问题是在远程设备与隧道/VPN 端点之间，还是在服务器上的隧道端点与 ST 服务之间。否则，您将花费很多时间去排除错误的地方。SillyTavern要加密从 ST 实例到 ST 实例的流量，请使用 --ssl 标志启动服务器。示例：
node server.js --ssl 默认情况下，ST 会在 certs 文件夹中查找您的证书。如果您的文件位于其他地方，您可以使用 --keyPath 和 --certPath 参数。示例：
node server.js --ssl --keyPath /home/user/certificates/privkey.pem --certPath /home/user/certificates/cert.pem 运行 SillyTavern 的用户需要对证书文件具有读取权限。<br>获取证书的最简单、最快速的方法是使用 <a data-tooltip-position="top" aria-label="https://letsencrypt.org/getting-started/" rel="noopener nofollow" class="external-link is-unresolved" href="https://letsencrypt.org/getting-started/" target="_self">certbot</a>。]]></description><link>sillytavern/5-管理/5.4-远程连接.html</link><guid isPermaLink="false">SillyTavern/5-管理/5.4 远程连接.md</guid><pubDate>Sun, 22 Dec 2024 14:57:10 GMT</pubDate></item><item><title><![CDATA[5.2 多用户模式]]></title><description><![CDATA[多用户模式允许多个用户使用同一个 SillyTavern 服务器。每个用户都有自己的设置、扩展和数据。用户账户也可以设置密码保护。警告
用户密码提供了多用户设置中的基本隐私保护，但不能视为安全功能。所有用户数据（包括聊天记录、API 密钥和其他敏感信息）都以明文形式存储在服务器上，任何有权限访问服务器文件系统的人都可以查看和修改这些数据。不要在公共服务器上或与不可信的用户一起使用 SillyTavern。
要启用并使用多用户模式，请编辑 config.yaml 文件：# 启用多用户模式 enableUserAccounts: true # 启用隐私登录模式：隐藏登录屏幕上的用户列表 enableDiscreetLogin: true 当用户账户设置被禁用时，系统会使用 default-user 作为回退的管理员账户来存储用户数据。
当隐私登录设置被禁用时，登录屏幕上会显示活动用户列表。如果启用了该设置，用户必须手动输入其账户名称。 当 enableUserAccounts 设置为 false 时，您不能 删除 default-user 账户，因为它用于提供用户数据。但是，您可以 禁用 它以隐藏该账户并禁止登录。
用户标识（Handle）是每个用户的唯一标识符。它只能由小写字母、数字和连字符组成。用户数据目录的路径遵循以下模式：%DATA_ROOT%/%USER_HANDLE%。有效的用户标识示例：
default-user
juan555
flux-the-cat
cool-guy1337 管理员（Admin） - 可以管理（创建、删除、修改）其他用户。
用户（User） - 不能管理其他用户。
除了拥有管理员面板访问权限外，管理员和用户的功能基本相同，都可以无限制地使用 SillyTavern 的全部功能。用户权限的实现待定。所有用户账户首次创建时都是普通用户，之后可以根据需要提升为管理员。在登录界面，用户可以选择要使用的账户。如果 enableDiscreetLogin 配置为启用，登录界面会有两种显示风格。当只有一个活动用户且该用户未设置密码时，登录界面将被绕过，不会显示。您可以通过顶栏菜单中的“用户设置”面板访问账户自管理菜单。
显示名称 - 用于登录界面，可以更改。它与角色无关，也不会在 AI API 中显示——您仍然可以使用多个角色。
头像 - 用于登录界面。您可以选择使用自定义图片、默认角色图片（如果已设置），否则使用最后使用的角色图片。
密码 - 锁图标表示账户保护状态（打开的锁表示没有密码）。可以通过“更改密码”按钮设置、更改或删除密码。
设置快照 - 访问并查看您的 settings.json 文件的备份，支持创建或恢复快照。
下载备份 - 下载您的用户数据文件夹的归档文件。
重置设置 - 重置为出厂默认设置，同时保留其他数据（如角色、聊天记录）。 您可以在登录界面恢复密码。您需要访问服务器控制台获取一次性恢复代码（由 4 位数字组成）。
或者，您可以使用 SillyTavern 服务器中的实用脚本通过提供用户标识来重置密码。 用法: node recover.js [account] (password) 示例: node recover.js admin SecurePassword ]]></description><link>sillytavern/5-管理/5.2-多用户模式.html</link><guid isPermaLink="false">SillyTavern/5-管理/5.2 多用户模式.md</guid><pubDate>Sun, 22 Dec 2024 14:57:05 GMT</pubDate></item><item><title><![CDATA[5.3 单点登录 (SSO)]]></title><description><![CDATA[SSO（单点登录）允许您通过登录门户创建用户并保护多个页面，这些门户展示在您希望保护的网站上。尽管设置较为复杂，但它是学习 SSO 和将您的 ST 实例安全地发布到互联网上的一个有效方法。<a data-tooltip-position="top" aria-label="https://www.authelia.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.authelia.com/" target="_self"><strong></strong></a>Authelia 和 <a data-tooltip-position="top" aria-label="https://goauthentik.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://goauthentik.io/" target="_self"><strong></strong></a>Authentik 是可以与 SillyTavern 一起使用的开源 SSO 提供者。如果您的 SSO 提供的用户名与 SillyTavern 用户账户的用户名完全匹配，您可以通过 SSO 作为该用户登录 SillyTavern。要做到这一点，请在 config.yaml 文件中启用 autheliaAuth。autheliaAuth: true
<br>这将增强或替代 <a data-tooltip-position="top" aria-label="2.8 用户设置 > 账户管理" data-href="2.8 用户设置#账户管理" href="sillytavern/2-使用指南/2.8-用户设置.html#账户管理_0" class="internal-link" target="_self" rel="noopener nofollow">密码管理</a> 组件，适用于 <a data-tooltip-position="top" aria-label="5.2 多用户模式" data-href="5.2 多用户模式" href="sillytavern/5-管理/5.2-多用户模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">多用户模式</a> 设置。<br>SSO 还可以替代 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 通过白名单进行访问控制" data-href="5.4 远程连接#通过白名单进行访问控制" href="sillytavern/5-管理/5.4-远程连接.html#通过白名单进行访问控制_0" class="internal-link" target="_self" rel="noopener nofollow">HTTP 基本认证</a> 作为 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 访问控制" data-href="5.4 远程连接#访问控制" href="sillytavern/5-管理/5.4-远程连接.html#访问控制_0" class="internal-link" target="_self" rel="noopener nofollow">远程连接</a> 的访问控制机制。推荐使用 SSO，因为它提供比 HTTP BA 更好的安全性和功能。<br>要使用 SSO 提供者替代 HTTP BA，请在 config.yaml 文件中启用 securityOverride。否则，SillyTavern 将 <a data-tooltip-position="top" aria-label="5.4 远程连接 > 访问控制" data-href="5.4 远程连接#访问控制" href="sillytavern/5-管理/5.4-远程连接.html#访问控制_0" class="internal-link" target="_self" rel="noopener nofollow">拒绝启动</a>。autheliaAuth: true
basicAuthMode: false
securityOverride: true
]]></description><link>sillytavern/5-管理/5.3-单点登录-(sso).html</link><guid isPermaLink="false">SillyTavern/5-管理/5.3 单点登录 (SSO).md</guid><pubDate>Sun, 22 Dec 2024 14:57:01 GMT</pubDate></item><item><title><![CDATA[5.1 配置文件]]></title><description><![CDATA[声明
本文档可能已经过时、不完整或不准确。请参考您安装目录中的 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern/blob/release/default/config.yaml" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/blob/release/default/config.yaml" target="_self">默认 config.yaml</a> 文件，以获取最新的设置列表。
config.yaml 是 SillyTavern 服务器的主要配置文件，您可以在安装完成后在根目录中找到该文件。它是一个 YAML 文件，包含各种设置，如网络设置、安全设置和后端特定选项。对该文件所做的更改将在重启服务器后生效。当上游版本添加了新设置时，您可以在运行 npm install（或专门运行 post-install.js 脚本）以更新仓库后，默认值会自动填充。然后，您可以根据需要修改这些设置。对于嵌套设置，使用点表示法来指示层级。例如，protocol.ipv6: false 表示 protocol 部分下的 ipv6 设置，值为 false。protocol: ipv6: false
<br>重要！
仅当提示词前缀是静态的且在请求之间不会更改时使用。{{random}} 宏、世界书（World Info）、摘要等可能会使缓存无效，并浪费缓存失效的费用。行为可能不可预测，因此无法提供任何保证。
参见：<a data-tooltip-position="top" aria-label="https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching" target="_self">提示词缓存</a>
]]></description><link>sillytavern/5-管理/5.1-配置文件.html</link><guid isPermaLink="false">SillyTavern/5-管理/5.1 配置文件.md</guid><pubDate>Sun, 22 Dec 2024 14:57:00 GMT</pubDate></item><item><title><![CDATA[5 管理]]></title><description><![CDATA[警告
尽管遵循了许多安全最佳实践，但 SillyTavern 服务器对于公开互联网暴露来说仍然不够安全。
在确保适当的安全措施之前，绝对不要将任何实例公开暴露到互联网。
如果因不当或不足的安全实施导致未经授权的访问，我们不对任何损失或损害负责。
<a data-tooltip-position="top" aria-label="5.2 多用户模式" data-href="5.2 多用户模式" href="sillytavern/5-管理/5.2-多用户模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">多用户</a>要与他人共享您的 SillyTavern 实例，您可以创建多个用户帐户。每个用户都有自己的设置、扩展和数据。用户帐户也可以设置密码保护。<br><a data-tooltip-position="top" aria-label="5.4 远程连接" data-href="5.4 远程连接" href="sillytavern/5-管理/5.4-远程连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">远程连接</a>您可以从手机、平板电脑或其他计算机访问您的 SillyTavern 实例。<br><a data-tooltip-position="top" aria-label="5.5 VPN 和隧道" data-href="5.5 VPN 和隧道" href="sillytavern/5-管理/5.5-vpn-和隧道.html#_0" class="internal-link" target="_self" rel="noopener nofollow">VPN 和隧道</a>要通过互联网访问您的 SillyTavern 实例，您可以使用 VPN 或隧道服务，如 Cloudflare Zero Trust、ngrok 或 Tailscale。<br><a data-tooltip-position="top" aria-label="5.6 反向代理" data-href="5.6 反向代理" href="sillytavern/5-管理/5.6-反向代理.html#_0" class="internal-link" target="_self" rel="noopener nofollow">反向代理</a>对于爱好者，您可以设置反向代理来通过互联网访问您的 SillyTavern 实例。这只是一个建议。在将您的 SillyTavern 实例公开之前，请咨询专业的 Web 应用安全专家。
保持操作系统和运行时软件（如 Node.js）更新。这将确保您的系统具有最新的安全补丁和修复，帮助防止潜在的漏洞。
使用白名单和网络防火墙。仅允许受信任的 IP 范围访问服务器。
启用基本身份验证。在进入前端应用程序之前，作为“主密码”进行身份验证。
<br>或者，配置外部身份验证。一些已知的服务有 <a data-tooltip-position="top" aria-label="https://www.authelia.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.authelia.com/" target="_self">Authelia</a> 和 <a data-tooltip-position="top" aria-label="https://goauthentik.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://goauthentik.io/" target="_self">authentik</a>。更多内容请参见 <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/sso.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/sso.md" target="_self">SSO 指南</a>。
永远不要让管理员帐户没有密码保护。如果没有密码保护的管理员帐户，服务器在启动时会发出警告。
在局域网之外启用“隐藏登录”设置。这将隐藏用户列表，避免外部人士查看。
经常检查访问日志。日志记录到服务器控制台和 access.log 文件中，提供有关传入连接的信息，例如 IP 地址和用户代理。
<br>配置 HTTPS。对于本地主机服务器，您可以生成并使用自签名证书。否则，您可能需要部署一个代理 Web 服务器，如 <a data-tooltip-position="top" aria-label="https://traefik.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://traefik.io/" target="_self">Traefik</a> 或 <a data-tooltip-position="top" aria-label="https://caddyserver.com/docs/getting-started" rel="noopener nofollow" class="external-link is-unresolved" href="https://caddyserver.com/docs/getting-started" target="_self">Caddy</a>。
<br>有关安全代理的更多信息，请参阅以下指南：<a data-tooltip-position="top" aria-label="5.6 反向代理" data-href="5.6 反向代理" href="sillytavern/5-管理/5.6-反向代理.html#_0" class="internal-link" target="_self" rel="noopener nofollow">反向代理 SillyTavern</a>。<br><a data-href="5.1 配置文件" href="sillytavern/5-管理/5.1-配置文件.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.1 配置文件</a><br><a data-href="5.2 多用户模式" href="sillytavern/5-管理/5.2-多用户模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.2 多用户模式</a><br><a data-href="5.3 单点登录 (SSO)" href="sillytavern/5-管理/5.3-单点登录-(sso).html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.3 单点登录 (SSO)</a><br><a data-href="5.4 远程连接" href="sillytavern/5-管理/5.4-远程连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.4 远程连接</a><br><a data-href="5.5 VPN 和隧道" href="sillytavern/5-管理/5.5-vpn-和隧道.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.5 VPN 和隧道</a><br><a data-href="5.6 反向代理" href="sillytavern/5-管理/5.6-反向代理.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.6 反向代理</a>]]></description><link>sillytavern/5-管理/5-管理.html</link><guid isPermaLink="false">SillyTavern/5-管理/5 管理.md</guid><pubDate>Sun, 22 Dec 2024 14:57:00 GMT</pubDate></item><item><title><![CDATA[4.4 服务器插件]]></title><description><![CDATA[这些插件允许添加一些通过仅使用 UI 扩展无法实现的功能，例如创建新的 API 端点或使用在浏览器环境中无法使用的 Node.js 包。插件位于 SillyTavern 的 plugins 目录中，并在服务器启动时加载，但只有在 config.yaml 文件中的 enableServerPlugins 设置为 true 时，插件才会被加载。
插件不受沙盒限制，请小心安装和运行！
一个可执行的 JavaScript 文件，扩展名为 ".js"（用于 CommonJS 模块）或 ".mjs"（用于 ES 模块），该文件包含一个导出 init 函数，该函数接受一个 Express 路由（专门为你的插件创建的）作为参数，并返回一个 Promise。模块还应导出一个 info 对象，包含插件的信息（id、name 和 description 字符串）。这将为加载器提供插件的信息。你可以通过路由器注册路由，这些路由会被注册到 /api/plugins/{id}/{route} 路径下。例如，router.get('/foo') 对于插件 example 将生成 /api/plugins/example/foo 路径。插件还可以选择性地导出一个 exit 函数，在关闭服务器时执行清理操作。该函数不接受任何参数，且必须返回一个 Promise。插件导出的 TypeScript 合约：interface PluginInfo { id: string; name: string; description: string;
} interface Plugin { init: (router: Router) =&gt; Promise&lt;void&gt;; exit: () =&gt; Promise&lt;void&gt;; info: PluginInfo;
}
以下是一个“Hello World!”插件的示例：/** * 初始化插件。 * @param {import('express').Router} router Express 路由 * @returns {Promise&lt;any&gt;} 插件初始化完成时解析的 Promise */
async function init(router) { // 在此处执行初始化操作... router.get("/foo", req, res, function () { res.send("bar"); }); console.log("示例插件已加载！"); return Promise.resolve();
} async function exit() { // 在此处执行清理操作... return Promise.resolve();
} module.exports = { init, exit, info: { id: "example", name: "示例", description: "我的酷插件！", },
};
你可以通过以下方式从 plugins 目录中的子目录加载插件（按照检查顺序）：
包含指向可执行文件路径的 package.json 文件，其中 "main" 字段指定了可执行文件的路径。
包含 index.js 文件的 CommonJS 模块。
包含 index.mjs 文件的 ES 模块。
结果文件必须导出一个 init 函数和 info 对象，其要求与单个文件插件相同。目录插件的示例（包含 index.js 文件）：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-DiscordRichPresence-Server" target="_self">https://github.com/SillyTavern/SillyTavern-DiscordRichPresence-Server</a>最好使用打包工具（如 Webpack 或 Browserify）将所有依赖打包成一个文件。确保设置构建目标为 "Node"。<br>使用 Webpack 和 TypeScript 的插件模板仓库：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Plugin-WebpackTemplate" target="_self">https://github.com/SillyTavern/Plugin-WebpackTemplate</a>]]></description><link>sillytavern/4-开发与自动化/4.4-服务器插件.html</link><guid isPermaLink="false">SillyTavern/4-开发与自动化/4.4 服务器插件.md</guid><pubDate>Sun, 22 Dec 2024 14:57:00 GMT</pubDate></item><item><title><![CDATA[4.3 UI 扩展]]></title><description><![CDATA[UI 扩展通过连接到其事件和 API，扩展了 SillyTavern 的功能。您可以轻松创建自己的扩展。想要将您的扩展贡献给<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Content" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Content" target="_self">官方仓库</a>吗？请与我们联系！查看简单的 SillyTavern 扩展示例：
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/city-unit/st-extension-example" target="_self">https://github.com/city-unit/st-extension-example</a> - 基本扩展模板。展示了清单创建、本地脚本导入、添加设置 UI 面板以及使用持久扩展设置。
扩展还可以利用打包功能将自己与其他模块隔离，并使用来自 NPM 的任何依赖项，包括 Vue、React 等 UI 框架。
<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-ReactTemplate" target="_self">https://github.com/SillyTavern/Extension-ReactTemplate</a> - 使用 React 和 Webpack 的裸模板扩展仓库。
要使用来自打包的相对导入，您可能需要创建一个导入包装器。以下是 Webpack 的示例：// 定义 async function importFromScript(what) { const module = await import( /* webpackIgnore: true */ "../../../../../script.js" ); return module[what];
} // 使用 const generateRaw = await importFromScript("generateRaw");
每个扩展都必须在 data/&lt;user-handle&gt;/extensions 文件夹中，并包含一个 manifest.json 文件，该文件包含插件的元数据以及一个 JS 脚本文件。{ "display_name": "插件名称", "loading_order": 1, "requires": [], "optional": [], "js": "index.js", "css": "style.css", "author": "作者姓名", "version": "1.0.0", "homePage": "https://github.com/your/plugin", "auto_update": true
} display_name 是必填项。显示在“管理扩展”菜单中。
loading_order 是可选的。数字越大，加载越晚。
requires 指定扩展所需的外部模块依赖项。除非连接的 Extras API 提供了所有这些模块，否则扩展将不会加载。
optional 指定可选的外部模块依赖项。
js 是主 JS 文件的引用，且是必需的。
css 是可选的样式文件引用。
author 是必填项。它应该包含作者的姓名或联系信息。
auto_update 如果扩展应在 ST 包版本变化时自动更新，则设置为 true。
可下载的扩展被挂载到 /scripts/extensions/third-party 文件夹中，因此相对导入应基于此路径。请小心在开发期间创建扩展位置，特别是在从 GitHub 安装时，避免覆盖third-party文件夹中的内容。
requires - 扩展可以安装，但在用户连接到提供所有指定模块的 Extras API 之前不会加载。
optional - 扩展可以安装并始终加载，但如果缺少任何 Extras API 模块，它们将在“管理扩展”菜单中高亮显示。
要检查当前连接的 Extras API 提供了哪些模块，可以从 scripts/extensions.js 导入 modules 数组。getContext() 函数可以让您访问 SillyTavern 的上下文：import { getContext } from "../../extensions.js"; const context = getContext(); context.chat; // 聊天记录 context.characters; // 角色列表 context.groups; // 群组列表 // 还有更多...
您还可以使用全局定义的 window 对象：SillyTavern.getContext()。除非您正在构建一个打包扩展，否则可以从其他 JS 文件导入变量和函数。例如，下面的代码片段将在后台生成来自当前选定 API 的回复：import { generateQuietPrompt } from "../../../script.js"; async function handleMessage(data) { const text = data.message; const translated = await generateQuietPrompt(text); // ...
}
从 SillyTavern 代码中使用导入是不可靠的，并且如果 ST 的模块内部结构发生变化，可能会中断。getContext 提供了一个更稳定的 API。如果您在 getContext 中缺少任何功能或属性，请与开发人员联系或提交一个 Pull Request！尽管 registerSlashCommand 仍然存在以兼容旧版本，但新的斜杠命令应该通过 SlashCommandParser.addCommandObject() 注册，以便向解析器提供扩展的命令及其参数详细信息（也方便自动补全和命令帮助）。SlashCommandParser.addCommandObject( SlashCommand.fromProps({ name: "repeat", callback: (namedArgs, unnamedArgs) =&gt; { return Array(namedArgs.times ?? 5) .fill(unnamedArgs.toString()) .join(isTrueBoolean(namedArgs.space.toString()) ? " " : ""); }, aliases: ["example-command"], returns: "重复的文本", namedArgumentList: [ SlashCommandNamedArgument.fromProps({ name: "times", description: "重复文本的次数", typeList: ARGUMENT_TYPE.NUMBER, defaultValue: "5", }), SlashCommandNamedArgument.fromProps({ name: "space", description: "是否用空格分隔文本", typeList: ARGUMENT_TYPE.BOOLEAN, defaultValue: "off", enumList: ["on", "off"], }), ], unnamedArgumentList: [ SlashCommandArgument.fromProps({ description: "要重复的文本", typeList: ARGUMENT_TYPE.STRING, isRequired: true, }), ], helpString: ` &lt;div&gt; 重复提供的文本若干次。 &lt;/div&gt; &lt;div&gt; &lt;strong&gt;示例：&lt;/strong&gt; &lt;ul&gt; &lt;li&gt; &lt;pre&gt;&lt;code class="language-stscript"&gt;/repeat foo&lt;/code&gt;&lt;/pre&gt; 返回 "foofoofoofoofoo" &lt;/li&gt; &lt;li&gt; &lt;pre&gt;&lt;code class="language-stscript"&gt;/repeat times=3 space=on bar&lt;/code&gt;&lt;/pre&gt; 返回 "bar bar bar" &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; `, })
);
使用 registerSlashCommand() 注册新斜杠命令：import { registerSlashCommand } from "../../slash-commands.js"; registerSlashCommand( "commandname", commandFunction, ["alias"], "显示在/help中的描述"
); function commandFunction(namedArgs, unnamedArgs) { // 命令逻辑
}
命令执行示例：
/commandname namedArgument=value Unnamed argument 参数说明： command - 主命令名称。它将在自动补全和帮助命令中使用。 callback - 执行命令时触发的函数。回调函数可以接受两个参数： namedArgs - 包含命名参数的对象
unnamedArgs - 包含未命名参数的字符串 aliases - 别名字符串的数组。可以使用别名调用命令，但它们不会出现在自动补全中，而是在帮助命令中列出。 helpString - 当调用 /help slash 命令时显示的字符串。必须描述命令的功能以及接受的参数。可以包含 HTML 标记。 <br>所有注册的命令可以在<a class="internal-link" data-href="/For_Contributors/st-script.md" href=".html" target="_self" rel="noopener nofollow">STscript</a>中以任何可能的方式使用。
在少数情况下，未命名命令参数也可以接收一个数字，因此如果您期望的是具体类型，请确保进行类型检查或转换！
使用 eventSource.on() 监听事件：import { eventSource, event_types } from "../../../script.js"; eventSource.on(event_types.MESSAGE_RECEIVED, handleIncomingMessage); function handleIncomingMessage(data) { // 处理收到的消息
}
主要事件类型包括：
MESSAGE_RECEIVED（接收到消息）
MESSAGE_SENT（发送消息）
CHAT_CHANGED（聊天发生变化）
<br>其余类型可以在<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern/blob/a410c63333069100aee6d4e4b54196cd6accfa24/public/script.js#L399" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/blob/a410c63333069100aee6d4e4b54196cd6accfa24/public/script.js#L399" target="_self">此处</a>找到。doExtrasFetch() 函数允许您向 SillyTavern 的 Extra 服务器发送请求。例如，调用 /api/summarize 接口：import { getApiUrl, doExtrasFetch } from "../../extensions.js"; const url = new URL(getApiUrl()); url.pathname = "/ api/summarize"; const apiResult = await doExtrasFetch(url, { method: "POST", headers: { "Content-Type": "application/json", "Bypass-Tunnel-Reminder": "bypass", }, body: JSON.stringify({ // 请求体 }),
});
getApiUrl() 返回 Extras 服务器的基本 URL。doExtrasFetch() 函数：
添加 Authorization 和 Bypass-Tunnel-Reminder 头部
处理请求并返回结果
这使得从插件中调用 Extras 的 API 变得更加容易。您可以指定：
请求方法：GET、POST 等。
额外的头部
POST 请求的请求体
以及其他任何 fetch 选项
]]></description><link>sillytavern/4-开发与自动化/4.3-ui-扩展.html</link><guid isPermaLink="false">SillyTavern/4-开发与自动化/4.3 UI 扩展.md</guid><pubDate>Sun, 22 Dec 2024 14:57:00 GMT</pubDate></item><item><title><![CDATA[4.2 函数调用]]></title><description><![CDATA[函数调用允许通过使用结构化数据为扩展程序添加动态功能，从而触发特定的扩展功能。Warning
此功能目前正在开发中。实现细节可能会发生变化。 查询外部 API 以获取附加信息（新闻、天气、网页搜索等）。
根据用户输入执行计算或转换。
存储和回忆重要的记忆或事实，包括 RAG（检索增强生成）和数据库查询。
向对话中引入真正的随机性（掷骰子、抛硬币等）。 <a data-tooltip-position="top" aria-label="3.8 图像生成" data-href="3.8 图像生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#_0" class="internal-link" target="_self" rel="noopener nofollow">图像生成</a>（内建） - 根据用户提示词生成图像。
<br><a data-tooltip-position="top" aria-label="3.18 网页搜索" data-href="3.18 网页搜索" href="sillytavern/3-扩展功能/3.18-网页搜索.html#_0" class="internal-link" target="_self" rel="noopener nofollow">网页搜索</a> - 针对查询触发网页搜索。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-RSS/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-RSS/" target="_self">RSS</a> - 从 RSS 源获取最新的新闻。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-AccuWeather" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-AccuWeather" target="_self">AccuWeather</a> - 从 AccuWeather 获取天气信息。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Dice" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Dice" target="_self">D&amp;D 骰子</a> - 为 D&amp;D 游戏掷骰子。 此功能仅适用于某些聊天完成源：OpenAI、Claude、MistralAI、Groq、Cohere、OpenRouter 和自定义 API 源。
文本生成 API 不支持函数调用，但一些本地托管的后端，如 Ollama 和 TabbyAPI，在自定义 OpenAI 兼容模式下可能支持聊天完成。
必须明确允许函数调用功能。可以通过在 AI 响应配置面板中启用“启用函数调用”选项来完成此操作。
没有保证 LLM 会执行任何函数调用。大多数情况下，需要通过提示词显式“激活”（例如，用户要求“掷骰子”，“获取天气”等）。
并非所有提示词都能触发工具调用。续写、模仿、背景（‘安静’）提示词不能触发工具调用。但它们仍然可以使用过去成功的工具调用。
要检查是否支持函数工具调用功能，可以通过调用SillyTavern.getContext()对象中的isToolCallingSupported方法，检查当前 API 是否支持函数工具调用以及是否在设置中启用了该功能。以下是检查是否支持该功能的示例：if (SillyTavern.getContext().isToolCallingSupported()) { console.log("支持函数工具调用");
} else { console.log("不支持函数工具调用");
}
要注册一个函数工具，需要通过调用SillyTavern.getContext()对象中的registerFunctionTool函数，并传递所需的参数。以下是注册一个函数工具的示例：SillyTavern.getContext().registerFunctionTool({ // 函数工具的内部名称，必须唯一。 name: "myFunction", // 函数工具的显示名称，会在UI中显示。（可选） displayName: "我的函数", // 函数工具的描述，必须描述该函数的用途和何时使用。 description: "这是我的函数描述。需要执行某些操作时使用该函数。", // 函数工具的JSON schema描述。请参考：https://json-schema.org/ parameters: { $schema: "http://json-schema.org/draft-04/schema#", type: "object", properties: { param1: { type: "string", description: "参数1的描述", }, param2: { type: "string", description: "参数2的描述", }, }, required: ["param1", "param2"], }, // 当工具被触发时要调用的函数。可以是异步函数。如果返回结果不是字符串，将会被JSON字符串化。 action: async ({ param1, param2 }) =&gt; { // 你的函数代码在这里 console.log(`函数被调用，参数为：${param1}, ${param2}`); return "函数结果"; }, // （可选）格式化函数调用后显示的消息。如果返回空字符串，将不显示消息。 formatMessage: ({ param1, param2 }) =&gt; { return `函数被调用，参数为：${param1} 和 ${param2}`; }, // （可选）返回一个布尔值，表示工具是否应该在当前提示词中注册。如果没有提供shouldRegister函数，工具将在每个提示词中注册。 shouldRegister: () =&gt; { return true; },
});
要禁用一个函数工具，需要通过调用SillyTavern.getContext()对象中的unregisterFunctionTool函数，并传入要禁用的函数工具名称。以下是注销一个函数的示例：SillyTavern.getContext().unregisterFunctionTool("myFunction"); 成功的工具调用会作为可见的历史记录的一部分显示，可以在聊天 UI 中查看实际的参数和结果。
如果你不想看到工具调用记录，可以使用自定义 CSS 隐藏或样式化它们。你可以通过.mes.toolCall选择器来操作，例如：.mes.toolCall { display: none; } 或 .mes.toolCall { color: #999; }。
]]></description><link>sillytavern/4-开发与自动化/4.2-函数调用.html</link><guid isPermaLink="false">SillyTavern/4-开发与自动化/4.2 函数调用.md</guid><pubDate>Sun, 22 Dec 2024 14:56:59 GMT</pubDate></item><item><title><![CDATA[4 开发与自动化]]></title><description><![CDATA[SillyTavern 的默认包仅提供了一个简洁的基础平台，可以通过多种方式进行扩展。<a data-tooltip-position="top" aria-label="4.1 STscript 语言参考" data-href="4.1 STscript 语言参考" href="sillytavern/4-开发与自动化/4.1-stscript-语言参考.html#_0" class="internal-link" target="_self" rel="noopener nofollow">STscript</a>STscript 是一种强大的脚本语言，基于批量聊天命令，可以在没有任何编程知识的情况下进行操作。<br><a data-tooltip-position="top" aria-label="4.2 函数调用" data-href="4.2 函数调用" href="sillytavern/4-开发与自动化/4.2-函数调用.html#_0" class="internal-link" target="_self" rel="noopener nofollow">函数调用</a>通过让语言模型使用外部数据源或触发扩展的特定功能，增加更多动态功能。<br><a data-tooltip-position="top" aria-label="4.3 UI 扩展" data-href="4.3 UI 扩展" href="sillytavern/4-开发与自动化/4.3-ui-扩展.html#_0" class="internal-link" target="_self" rel="noopener nofollow">UI 扩展</a>UI 扩展在浏览器环境中运行，通过钩住 SillyTavern 的事件和 API 来扩展其功能。<br><a data-tooltip-position="top" aria-label="4.4 服务器插件" data-href="4.4 服务器插件" href="sillytavern/4-开发与自动化/4.4-服务器插件.html#_0" class="internal-link" target="_self" rel="noopener nofollow">服务器插件</a>服务器插件允许通过在 NodeJS 环境中运行代码来添加新功能，如新的 API 端点。<br><a data-href="4.1 STscript 语言参考" href="sillytavern/4-开发与自动化/4.1-stscript-语言参考.html#_0" class="internal-link" target="_self" rel="noopener nofollow">4.1 STscript 语言参考</a><br><a data-href="4.2 函数调用" href="sillytavern/4-开发与自动化/4.2-函数调用.html#_0" class="internal-link" target="_self" rel="noopener nofollow">4.2 函数调用</a><br><a data-href="4.3 UI 扩展" href="sillytavern/4-开发与自动化/4.3-ui-扩展.html#_0" class="internal-link" target="_self" rel="noopener nofollow">4.3 UI 扩展</a><br><a data-href="4.4 服务器插件" href="sillytavern/4-开发与自动化/4.4-服务器插件.html#_0" class="internal-link" target="_self" rel="noopener nofollow">4.4 服务器插件</a><br><a data-href="4.5 国际化 (i18n)" href="sillytavern/4-开发与自动化/4.5-国际化-(i18n).html#_0" class="internal-link" target="_self" rel="noopener nofollow">4.5 国际化 (i18n)</a>]]></description><link>sillytavern/4-开发与自动化/4-开发与自动化.html</link><guid isPermaLink="false">SillyTavern/4-开发与自动化/4 开发与自动化.md</guid><pubDate>Sun, 22 Dec 2024 14:56:55 GMT</pubDate></item><item><title><![CDATA[3.19.1 通过 Colab 运行附加功能]]></title><description><![CDATA[已停用
Extras 项目已于 2024 年 4 月停用，不再进行任何更新或模块开发。绝大多数模块已在主 SillyTavern 应用中原生提供。您仍然可以安装并使用该项目，但如果遇到任何问题，请不期望能得到即时支持。 打开 <a data-tooltip-position="top" aria-label="https://colab.research.google.com/github/SillyTavern/SillyTavern/blob/release/colab/GPU.ipynb" rel="noopener nofollow" class="external-link is-unresolved" href="https://colab.research.google.com/github/SillyTavern/SillyTavern/blob/release/colab/GPU.ipynb" target="_self">官方 Extras Colab</a>。
选择所需的 “Extra” 选项。
选择 use_cpu 选项，这样可以在不需要 GPU 积分的情况下运行 Extras。 这会使 Stable Diffusion 运行较慢，但其他功能会正常运行。 （可选，但推荐）选择 secure 选项，以生成 API 密钥来保护您的共享实例。
点击左侧的启动按钮（类似于三角形的“播放”按钮）。
等待所有内容加载完毕。
在输出的底部，查找 trycloudflare.com 的链接。忽略 localhost 链接，它无法使用（我们试过了！）。
启动文本会显示 Running on。
复制该行下方列出的 API URL 链接。（不要复制 'localhost' 的 URL，使用其他链接）
启动支持扩展功能的 SillyTavern：如果需要，在您的 config.yaml 文件中将 enableExtensions 设置为 true。
进入 SillyTavern 的扩展菜单（点击页面顶部的 '堆叠块' 图标）。
将 API URL 粘贴到顶部的框中。（不是 API 密钥框）
如果您没有启用 secure 选项，请确保使用官方 Colab 时 API 密钥框完全为空。
如果您启用了 secure 选项，请将生成的 API 密钥粘贴到 API 密钥框中。
API 密钥会显示在 Colab 的控制台输出中，例如：Your API key is fee2f3f559。
点击 “Connect” 连接。
]]></description><link>sillytavern/3-扩展功能/3.19.1-通过-colab-运行附加功能.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.19.1 通过 Colab 运行附加功能.md</guid><pubDate>Sun, 22 Dec 2024 14:56:50 GMT</pubDate></item><item><title><![CDATA[3.19 Extras]]></title><description><![CDATA[已停用
Extras 项目已于 2024 年 4 月停用，不再进行任何更新或模块开发。绝大多数模块已在主 SillyTavern 应用中原生提供。您仍然可以安装并使用该项目，但如果遇到任何问题，请不期望能得到即时支持。
<a data-href="3.19.1 通过 Colab 运行附加功能" href="sillytavern/3-扩展功能/3.19.1-通过-colab-运行附加功能.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.19.1 通过 Colab 运行附加功能</a><br><a data-href="3.19.2 本地安装" href="sillytavern/3-扩展功能/3.19.2-本地安装.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.19.2 本地安装</a><br><a data-href="3.19.3 智能上下文" href="sillytavern/3-扩展功能/3.19.3-智能上下文.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.19.3 智能上下文</a><br><a data-href="3.19.4 TalkingHead" href="sillytavern/3-扩展功能/3.19.4-talkinghead.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.19.4 TalkingHead</a>]]></description><link>sillytavern/3-扩展功能/3.19-extras.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.19 Extras.md</guid><pubDate>Sun, 22 Dec 2024 14:56:49 GMT</pubDate></item><item><title><![CDATA[3.18 网页搜索]]></title><description><![CDATA[将网页搜索结果添加到LLM提示词中。需要安装并启用官方服务器插件。详情请参见 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-WebSearch-Selenium" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-WebSearch-Selenium" target="_self">SillyTavern-WebSearch-Selenium</a>。支持Google和DuckDuckGo引擎。需要在主机上安装websearch模块和Chrome/Firefox浏览器。支持Google和DuckDuckGo引擎。需要SerpApi密钥并提供Google搜索访问。<br>在此获取密钥: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://serpapi.com/dashboard" target="_self">https://serpapi.com/dashboard</a>需要SearXNG实例URL（可以是私有或公共）。使用HTML格式的搜索结果。<br>了解更多信息: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.searxng.org/" target="_self">https://docs.searxng.org/</a><br>需要API密钥。获取密钥请访问: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://app.tavily.com/" target="_self">https://app.tavily.com/</a> :icon-lock:
确保你使用的是最新版本的SillyTavern。
通过“SillyTavern的下载扩展和资源”菜单安装该扩展。
打开“Web Search”扩展设置，输入你的API密钥或连接到Extras，并启用扩展。
网页搜索结果将在你聊天时根据需要自动添加到提示词中。只有用户消息会触发搜索。
要更自然地包含搜索结果，可以将搜索查询用单个反引号包围起来，例如：告诉我有关`瑞安·高斯林的最新电影`的信息，这将产生查询 瑞安·高斯林的最新电影。
可选地，你可以根据自己的喜好调整设置。 启用 - 开关扩展的启用与禁用。
源 = 设置搜索结果的来源。
缓存生命周期 - 搜索结果在提示词中缓存的时间（单位：秒）。默认值 = 一周。 提示词预算 - 设置插入文本的最大字符数（单位：字符，不是tokens）。一般来说，1个token大约等于3-4个字符，可根据模型的上下文限制进行调整。默认值 = 1500字符。
插入模板 - 搜索结果插入到提示词中的方式。支持常规宏和特殊宏：{{query}} 表示搜索查询，{{text}} 表示搜索结果。
插入位置 - 搜索结果插入提示词的位置。可以选择与作者注释一样的选项：插入到聊天中或在系统提示词之前/之后。 <br>使用功能工具 - 使用<a data-tooltip-position="top" aria-label="https://github.com/For_Contributors/Function-Calling.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/For_Contributors/Function-Calling.md" target="_self">功能调用</a>来激活搜索或抓取网页。必须使用支持的聊天完成API，并在AI响应设置中启用。启用时会禁用所有其他激活方法。
使用反引号 - 启用通过单个反引号包围的关键词来触发搜索。
使用触发短语 - 启用通过触发短语来激活搜索。触发短语可以出现在消息的任何位置，查询从触发短语开始并扩展到“最大单词数”。
正则表达式 - 提供一个JS风格的正则表达式来匹配用户消息。如果正则表达式匹配，搜索将以给定的查询进行触发。搜索查询支持{{macros}}和$1语法来引用匹配的组。例如，/what is happening in (.*)/i正则表达式会匹配包含what is happening in New York的消息，并触发查询 news in New York。
触发短语 - 添加一个个短语来触发搜索，可以是消息中的任何位置，查询将从触发词开始并扩展到“最大单词数”。要排除特定消息不被处理，必须以句点（.）开头，例如.你怎么认为？。触发短语的优先级：首先按文本框中的顺序，然后按用户消息中的第一个短语。
最大单词数 - 包括在搜索查询中的单词数量（包括触发短语）。Google的查询限制大约是32个单词。默认值 = 10个单词。 访问链接 - 将从访问的搜索结果页面中提取文本并保存为文件附件。
访问次数 - 将访问并解析多少个链接的文本。
访问域名黑名单 - 排除访问的站点域名。每个域名一行。
文件头 - 文件头模板，在文本文件的开始插入，可额外使用{{query}}宏。
区块头 - 链接区块模板，插入每个链接的解析内容。使用{{link}}宏表示页面URL，使用{{text}}宏表示页面内容。
保存目标 - 保存抓取结果的目标。可能的选项：触发的消息附件，或者聊天附件的“数据仓库”。
从最新查询中获得的搜索结果将在下一个有效查询找到之前一直包含在提示词中。如果你想在没有意外触发搜索的情况下提问额外问题，可以以句点开头。Note
如果启用了Web搜索功能工具，它会覆盖其他触发方式。
触发优先级（如果启用了多个触发器）：
反引号。
正则表达式。
触发短语。
要丢弃所有之前的查询进行处理，可以以感叹号开头，如!现在我们来聊聊...，这将丢弃当前及其上方的所有消息。<br>此扩展还提供了一个/websearch斜杠命令，可用于ST脚本。更多信息请见：<a data-tooltip-position="top" aria-label="https://github.com/For_Contributors/st-script.md#extension-commands" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/For_Contributors/st-script.md#extension-commands" target="_self">ST脚本语言参考</a>/websearch links=on|off snippets=on|off [query] – 执行一个网页搜索查询。使用命名参数指定返回内容 - 页面片段（默认：开启），完整页面内容（默认：关闭），或两者。 示例：/websearch links=off snippets=on 如何做三明治 答案框。问题的直接答案。
知识图谱。关于该主题的百科知识。
页面片段（最多10个）。来自网页的相关摘录。
相关问题（最多10个）。与类似话题相关的问题和答案。 Google - 答案框，知识图谱，页面片段。
DuckDuckGo - 页面片段。 信息框。
页面片段。 答案。
页面内容。
]]></description><link>sillytavern/3-扩展功能/3.18-网页搜索.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.18 网页搜索.md</guid><pubDate>Sun, 22 Dec 2024 14:56:49 GMT</pubDate></item><item><title><![CDATA[3.16 XTTS 语音克隆]]></title><description><![CDATA[问候！你是否也被那些展示 AI 文本到语音技术进展的 Reddit 帖子惊艳到了？想要为你的机器人老婆/老公换个闪亮的新声音调制器吗？别担心，这项令人惊叹的前沿技术已经可以在你本地的 SillyTavern 中使用，你只需要一个简单的...
最新版本的 SillyTavern。
安装<a data-tooltip-position="top" aria-label="https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html" target="_self">Miniconda</a>。
<br>（Windows）安装<a data-tooltip-position="top" aria-label="https://visualstudio.microsoft.com/visual-cpp-build-tools/" rel="noopener nofollow" class="external-link is-unresolved" href="https://visualstudio.microsoft.com/visual-cpp-build-tools/" target="_self">Visual C++ Build Tools</a>。
拥有可以克隆的 WAV 语音样本文件（每个文件约 10 秒）。文件要求：PCM，单声道，22050Hz，16 位（可以通过 Audacity 转换）。
创建一个包含“speakers”和“output”子文件夹的文件夹，并将 WAV 文件放入“speakers”文件夹中。
示例文件夹结构：C:\xtts - speakers - alice.wav - bob.wav - output
<br><a data-tooltip-position="top" aria-label="https://github.com/daswer123" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/daswer123" target="_self">daswer123</a>开发了一个 API 服务器，它可以在你的电脑上运行 XTTSv2 模型，并与 SillyTavern 的 TTS 扩展连接。它完全独立于 Extras API，并且使用一个独立的环境。非常重要： 请不要在 Extras 环境或系统 Python 中安装以下依赖项。
这样会破坏其他包，导致不必要的降级等问题。以下安装指南使用 Miniconda，但你也可以使用 venv（此处未涉及）。打开 Anaconda 命令提示符，逐行执行以下指令。 进入你在前面步骤中创建的文件夹（第 4 步）。
cd C:\xtts 创建一个新的 conda 环境。我们将其命名为xtts。
conda create -n xtts 激活新创建的环境。
conda activate xtts 在你的环境中安装 Python 3.10，安装时确认“y”。
conda install python=3.10 安装 XTTS 服务器及其依赖。
pip install xtts-api-server pydub 安装 PyTorch。这个过程可能需要一些时间。以下命令会安装带有 GPU 加速支持（CUDA）的 PyTorch。
如果你只打算使用 CPU 推理，可以去掉命令中以--index-url开头的部分。
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 <br>
启动 XTTS 服务器，默认的主机和端口是 <a rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:8020" target="_self">http://localhost:8020</a>。
python -m xtts_api_server 在第一次启动时，模型会被下载（约 2GB）。
别忘了仔细阅读 Coqui AI 的法律声明。开个玩笑，你只需要再次点击“y”即可。 打开 SillyTavern 的扩展面板，展开 TTS 菜单，选择提供商列表中的“XTTSv2”。
在语言下拉框中选择你的文本到语音语言（如果不是波兰语我会有点伤心哦）。
<br>确认提供商端点指向 <a rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:8020" target="_self">http://localhost:8020</a>，并且“可用语音”会显示你的语音样本列表。
选择一个角色并设置语音样本与该角色的映射。
如果角色列表为空，可以多点击几次“重新加载”。
根据个人喜好配置其他 TTS 设置。
点击任何消息旁的喇叭图标，就能听到那美妙的克隆语音从你的扬声器中响起。生成过程需要一些时间，即使在高端 RTX 显卡上，也无法实时生成。XTTS 服务器的最新版本支持 HTTP 流式传输，你可以在生成音频的同时接收音频块！音频会继续生成（假设你使用的是 RVC 扩展的最新版本），并会被转换，但不会进行流式传输，因为 RVC 要求在启动转换前必须接收到完整的音频文件。流式传输 RVC 仍在研究中... 更新 SillyTavern 到最新版本。 更新 XTTS 服务器到最新版本。
conda activate xtts
pip install xtts-api-server --upgrade 像往常一样启动并连接 XTTS 到 ST。 在 SillyTavern 中启用“流式传输”XTTS 扩展设置。 尝试增加“块大小”设置。参考：在块大小为 200 的情况下，RTX 3090 可以生成不中断的音频，但会稍微增加音频延迟。只需按照安装说明的步骤 1、3 和 7 操作。不太可能，它无法运行需要 PyTorch 的应用，除非使用一些神秘的黑魔法，而我们不会提供此类问题的支持。<br>最佳的解决方案是将 TTS API 托管在你的 PC 上，通过本地网络连接，只需记得指定要监听的主机和端口 - 参见<a data-tooltip-position="top" aria-label="https://github.com/daswer123/xtts-api-server/blob/main/README.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/daswer123/xtts-api-server/blob/main/README.md" target="_self">README</a>。]]></description><link>sillytavern/3-扩展功能/3.16-xtts-语音克隆.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.16 XTTS 语音克隆.md</guid><pubDate>Sun, 22 Dec 2024 14:56:49 GMT</pubDate></item><item><title><![CDATA[3.15 AllTalk TTS V2]]></title><description><![CDATA[AllTalk 是一个基于 Coqui XTTS、F5-TTS、VITS、Piper 等 TTS 引擎的语音克隆系统，旨在提供高质量的语音重现（无论是零-shot 语音克隆还是内置语音）。在 AllTalk V2 中，重大更新提升了功能性和易用性，包括多引擎支持、扩展的自定义选项和性能优化。如需查看完整功能列表，请参阅 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki" target="_self">AllTalk Wiki</a>。
多引擎支持：轻松在 Coqui XTTS、VITS、Piper、Parler、F5 和自定义引擎之间切换。
语音转换（RVC）：增强的基于检索的语音克隆管道。
可自定义设置：调整每个引擎的设置并保存启动配置。
叙述功能：为叙述和角色分别指定语音。
独立使用与集成使用：与 SillyTavern 的无缝集成。
DeepSpeed 和低 VRAM 模式：针对资源受限环境的性能优化。
<br>截图功能：查看 AllTalk V2 的界面 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/discussions/237" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/discussions/237" target="_self">这里</a>。
AllTalk 提供独立安装和集成安装两种方式。最快的设置方法是使用自动化脚本进行快速安装，这些脚本可以简化大部分过程。
<br>独立安装：推荐给大多数用户（<a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/Install-%E2%80%90-Standalone-Installation" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/Install-%E2%80%90-Standalone-Installation" target="_self">独立安装指南</a>）
<br>Text-generation-webui 集成：用于将 AllTalk 集成到 Text-generation-webui 中（<a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/Install-%E2%80%90-Text%E2%80%90generation%E2%80%90webui-Installation" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/Install-%E2%80%90-Text%E2%80%90generation%E2%80%90webui-Installation" target="_self">TGWUI 安装指南</a>）
<br>对于需要详细控制的高级用户，可以参考 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/Install-%E2%80%90-Manual-Installation-Guide" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/Install-%E2%80%90-Manual-Installation-Guide" target="_self">手动安装指南</a>，按照步骤进行 Windows、Linux 或 Mac（未测试）上的安装。<br>对于不希望在本地安装的用户，可以在云环境中运行 AllTalk，通过 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/Google-COLAB" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/Google-COLAB" target="_self">Google Colab 安装指南</a>。一旦加载了 AllTalk，您可以在 SillyTavern 的 TTS 页面中选择它，并确保在设置中选择正确的 AllTalk 服务器版本。
设置管理：根据所选配置，AllTalk 可能会启用或禁用某些设置。
加载顺序：如果在 AllTalk 加载之前已加载 SillyTavern，请重新加载 TTS 扩展页面。
性能优化：根据系统资源选择性启用 DeepSpeed 和低 VRAM 模式，以提高性能。
<br>叙述功能：有关叙述功能的详细信息，请参见 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/Narrator-Function" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/Narrator-Function" target="_self">AllTalk Wiki</a>。
<br>关于 SillyTavern 的 AllTalk 扩展的完整信息将更新在 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/SillyTavern-Extension" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/SillyTavern-Extension" target="_self">AllTalk Wiki 的 SillyTavern 页面</a>。使用 AllTalk 扩展的 TGWUI 用户需要在 TGWUI 聊天界面中禁用 Enable TGWUI TTS，否则会生成重复的 TTS 音频。<br>如果您遇到特定于在 SillyTavern 中使用 AllTalk 的问题，请参考 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki/SillyTavern-Extension" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki/SillyTavern-Extension" target="_self">AllTalk Wiki 页面中的 SillyTavern 扩展</a> 以获取最新信息。如需进一步帮助：
<br>请参考 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/wiki" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/wiki" target="_self">Wiki</a> 和内置文档。
<br>加入 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/discussions/245" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/discussions/245" target="_self">讨论板</a> 参与讨论。
<br>通过 <a data-tooltip-position="top" aria-label="https://github.com/erew123/alltalk_tts/issues" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erew123/alltalk_tts/issues" target="_self">问题跟踪系统</a> 提交错误或功能请求。
]]></description><link>sillytavern/3-扩展功能/3.15-alltalk-tts-v2.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.15 AllTalk TTS V2.md</guid><pubDate>Sun, 22 Dec 2024 14:56:49 GMT</pubDate></item><item><title><![CDATA[3.14 文本转语音 (TTS)]]></title><description><![CDATA[SillyTavern 提供了多种 TTS（文本到语音）选项。此页面解释了如何设置和使用 TTS。TTS 用于让语音朗读聊天中的部分内容。用于选择您想使用的 TTS 服务。
ElevenLabs - 需要付费订阅，目前提供最优质的语音。
Silero - 免费，在您的 PC 上运行，语音质量可能变化较大。
System - 使用操作系统的 TTS 引擎（如果有的话），质量因操作系统而异。
Edge - 免费，通过 Azure 运行，通常速度较快，语音自然但较为干涩、缺乏感情，类似于听新闻播报或广播节目。若选择“插件”作为提供者，您还需要安装<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-EdgeTTS-Plugin" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-EdgeTTS-Plugin" target="_self">此服务器插件</a>，否则 TTS 将无法正常工作。
Coqui-TTS - 免费，目前没有 API 实现。提供高性能的 Text2Speech 模型（如 Tacotron、Tacotron2、Glow-TTS、SpeedySpeech）以及 Bark。
Novel - 需要付费订阅 NovelAI，使用 NovelAI 的 TTS 引擎生成语音。
RVC - 免费，支持语音克隆。 Enabled - 开启/关闭 TTS 播放。
Auto Generation - 设置为自动生成，当新消息到达时自动播放 TTS。
Only narrate "quotes" - 仅限 TTS 播放包含在“引号”中的文字。此选项还会包括“星号行”中的引号文本（内部分配变量名称为 narrate_quoted_only）。
Ignore text, even "quotes", inside asterisks - TTS 将忽略所有 *星号* 中的文本，即使其中包含“引号”文本（内部分配变量名称为 narrate_dialogues_only）。
如果同时勾选了“仅朗读引号”与“忽略星号中的文本”两个选项，TTS 将仅朗读不包含在星号中的引号内容，忽略其他所有文本。
Narrate only the translated text - 仅朗读翻译后的文本。
假设文本为：*Cohee approaches you with a faint "nya"* "Good evening, senpai", she says.以下是根据复选框状态修改文本的表格：这些选项会根据您选择的 API 发生变化。（解释即将提供）
Apply - 在设置 TTS API 和编辑语音映射后，必须点击此按钮以应用更改。
Available voices - 点击后会弹出一个窗口，列出您选择的 API 所有可用的语音，并可试听它们的样本对话。 勾选“Enabled”复选框，否则将无法播放任何语音。
勾选“Auto-generation”复选框，如果您希望每次新消息到达时 TTS 自动播放。
可选：点击任意消息右上角的扬声器图标，可以按需播放 TTS。
点击右下角的“Stop”按钮（位于魔杖菜单内），可以停止任何正在播放的 TTS。
您必须为 TTS 提供语音映射，否则它将无法知道每个角色应该使用哪个语音。语音映射的格式必须严格按照以下方式书写：CharacterName:TTSVoice,CharacterName2:TTSVoice2对于 Coqui-TTS，格式需要包括来自 WebGUI 的发言人和语言信息：CharacterName:TTSVoice[speakerid][langid]或者Aqua:tts_models--multilingual--multi-dataset--your_tts\model_file.pth[2][1]如果使用 Bark，您必须创建一个语音文件夹来克隆语音。确保将语音文件添加到 homedir\tts\bark_v0\speakers\ 目录下。在 Windows 系统中，通常路径为 C:\Users\USERACCOUNT\AppData\Local\tts\bark_v0\speakers\，您可以在文件资源管理器中输入 %appdata%，然后向上一级目录移动到 local 文件夹，在其中找到 tts。该目录的结构应如下所示：
homedir
tts
bark_v0
speakers customvoice1 speaker.wav
speaker.npz robinwilliams speaker.mp3 me speaker.mp3 第一次加载此模型和语音时，Bark 会克隆该语音并创建一个 .npz 文件，此文件对于加速 TTS 过程非常重要。]]></description><link>sillytavern/3-扩展功能/3.14-文本转语音-(tts).html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.14 文本转语音 (TTS).md</guid><pubDate>Sun, 22 Dec 2024 14:56:48 GMT</pubDate></item><item><title><![CDATA[3.12 语音识别]]></title><description><![CDATA[本指南将引导您如何在SillyTavern中设置语音识别，将您的语音转录为文本。在开始之前，请确保您已满足以下前提条件：
确保您使用的是最新版本的SillyTavern。
从“下载扩展与资源”菜单中的扩展面板（叠加的方块图标）安装“语音识别”扩展。
已安装ffmpeg二进制文件。有关详细信息，请参见<a data-tooltip-position="top" aria-label="https://chatgpt.com/c/RVC.md#rvc-setup" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/RVC.md#rvc-setup" target="_self">RVC设置</a>。 配置SillyTavern： 启动SillyTavern并进入扩展 &gt; 语音识别。
从下拉选项中选择“浏览器”。
如果您的浏览器不支持语音识别，将弹出错误提示框。 选择消息模式： 选择您想要的“消息模式”： 附加：您的消息将被附加到当前用户消息文本区域。
替换：您的消息将替换当前用户消息文本区域的内容。
自动发送：当检测到语音结束时，消息将自动发送。 启用消息映射（可选）： 设置短语映射以实现语音快捷方式。
例如，添加“命令删除 = /del2”，当检测到“命令删除”时，它将用“/del2”命令替换您的语音消息。
当与自动发送模式结合使用时，这对于实现完全语音控制非常有用。通过勾选“启用消息映射”来启用此功能。 选择语言： 选择您想要使用的语言（注意：并非所有浏览器都支持所有语言）。 录音： 要开始录音，请点击消息区域旁边的麦克风按钮。再次点击即可停止录音。如果未检测到语音，录音可能会自动停止。 启用提供者： 使用以下命令，在Extras服务器上启用所需的语音识别提供者：
python server.py --enable-modules=whisper-stt 或
python server.py --enable-modules=vosk-stt 您还可以通过添加--stt-vosk-model-path或--stt-whisper-model-path选项来使用自定义模型，指定模型路径。 配置SillyTavern： 启动SillyTavern并进入扩展 &gt; 语音识别。
从下拉选项中选择“Vosk”或“Whisper”（Whisper更为准确）。
设置与“浏览器”提供者设置类似（语言选项除外），请参见上文。 启用提供者： 使用以下命令，在SillyTavern-extras中启用流式语音识别模块：
python server.py --enable-modules=streaming-stt 配置SillyTavern： （可选）如同Whisper设置一样，指定自定义Whisper模型。
（可选但推荐）在SillyTavern中设置触发词。只有以这些触发词开头的消息才会被发送到SillyTavern进行实际消息处理。这可以防止随机语音或噪音被转录。启用此功能时，可以选择是否将触发词包含或排除在实际消息中。
其他设置与其他提供者相似。 现在，您已经准备好使用语音识别功能将您的语音转录为文本，并在SillyTavern中使用了。]]></description><link>sillytavern/3-扩展功能/3.12-语音识别.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.12 语音识别.md</guid><pubDate>Sun, 22 Dec 2024 14:56:48 GMT</pubDate></item><item><title><![CDATA[3.11 基于检索的语音转换 (RVC)]]></title><description><![CDATA[本指南将带你了解如何使用 RVC 技术，该技术可以将一种音频片段的语音特征转移到另一个音频片段中，从而使声音能够以不同的音调和风格进行发声。你是否曾享受过那些著名的“总统玩 X”视频？这些视频是使用 RVC 制作的。通过 RVC 扩展，你可以让 SillyTavern 角色用任何你想要的声音发言，无论是动漫角色、电影角色，甚至是你自己的独特声音。需要注意的是，RVC 不是文本转语音（TTS）：它更像是语音到语音的转换。它将音频片段作为输入。在后台，RVC 与 SillyTavern 的 TTS 扩展协同工作：它会等待 TTS 生成音频文件（无论你是否使用 RVC，TTS 都会生成音频文件），然后 RVC 会对 TTS 生成的音频文件进行第二次处理，将其转换为你在 RVC 配置中克隆的声音。SillyTavern 的 RVC 支持多个 API 源进行音频转换：
<a data-tooltip-position="top" aria-label="https://github.com/daswer123/rvc-python" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/daswer123/rvc-python" target="_self">rvc-python</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Extras" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Extras" target="_self">SillyTavern Extras</a>（已弃用）
在开始之前，请确保已满足以下先决条件。确保你的ffmpeg二进制文件已经添加到 PATH 环境变量中。该工具用于转换传入的音频。Windows：
<br>使用 SillyTavern 启动器工具自动安装 ffmpeg：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Launcher" target="_self">https://github.com/SillyTavern/SillyTavern-Launcher</a>
<br>或者在这里下载构建文件：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.gyan.dev/ffmpeg/builds/" target="_self">https://www.gyan.dev/ffmpeg/builds/</a>
<br>如何修改 PATH 变量：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/" target="_self">https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/</a>
测试是否正确安装：打开命令提示符并运行ffmpeg，如果安装成功，它应该会显示 ffmpeg 的版本和信息。
Linux：使用你的包管理器安装 ffmpeg。# Debian/Ubuntu
sudo apt install ffmpeg
# Arch Linux
sudo pacman -S ffmpeg
# Fedora
sudo dnf install ffmpeg
macOS：<br>通过<a data-tooltip-position="top" aria-label="https://brew.sh/" rel="noopener nofollow" class="external-link is-unresolved" href="https://brew.sh/" target="_self">Homebrew</a>安装 ffmpeg：brew install ffmpeg
RVC 依赖于 TTS，因此你需要启用 TTS 扩展。你的 TTS 必须已经正常工作并能够朗读你的对话，才能开始将 RVC 集成进来！请注意：
系统 TTS 引擎不支持语音转换。
流式 TTS 将在音频流结束后再进行转换。
从“扩展面板”（堆叠块图标）中的“下载扩展和资源”菜单安装“RVC”扩展。在 SillyTavern 中，导航至扩展 &gt; RVC并启用它。在扩展设置中，选择要使用的 RVC 源。然后按照源特定的安装说明继续操作。<br>请按照 GitHub 页面上的安装说明：<a data-tooltip-position="top" aria-label="https://github.com/daswer123/rvc-python?tab=readme-ov-file#installation" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/daswer123/rvc-python?tab=readme-ov-file#installation" target="_self">rvc-python 安装</a>。如果你有 Nvidia GPU，建议按照 CUDA 安装说明进行操作。如果在 Windows 上安装时遇到问题（例如构建 fairseq 步骤失败），确保以下软件已安装：
<br><a data-tooltip-position="top" aria-label="https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/" rel="noopener nofollow" class="external-link is-unresolved" href="https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/" target="_self">Windows 10 SDK</a>
<br><a data-tooltip-position="top" aria-label="https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022" rel="noopener nofollow" class="external-link is-unresolved" href="https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022" target="_self">Visual Studio Build Tools 2022</a>
创建一个目录来存储 RVC 模型。默认情况下，目录名称为rvc_models，在启动服务器时会从当前目录中选择此目录。每个模型都是一个子文件夹（文件夹名称将在 UI 中显示），该文件夹应包含.pth（必需）和.index（可选）文件。<br>详细说明：<a data-tooltip-position="top" aria-label="https://github.com/daswer123/rvc-python?tab=readme-ov-file#model-management" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/daswer123/rvc-python?tab=readme-ov-file#model-management" target="_self">rvc-python 模型管理</a>通过运行以下命令启动 API 服务器：python -m rvc_python api -p 5050 -l -md models_path
参数说明：
5050 - 设置服务器的监听端口。如果你想在不同端口上托管服务器，可以修改此参数。
models_path - 设置模型的路径。如果不指定路径，则使用默认的rvc_models目录。
-l - 设置服务器监听所有网络接口。如果只想在本地主机上监听，可以去掉此参数。 在 RVC 扩展设置中，设置正确的rvc-python API URL。默认情况下，URL 为http://localhost:5050。
如果你安装了 rvc-python 以支持 CUDA 加速，请勾选使用 CUDA复选框。
点击“刷新”以加载可用的语音列表。
语音映射定义了每个角色或用户角色的语音转换设置。
选择“角色”下拉菜单中的角色名称，然后选择一个 RVC“语音”，然后点击应用。
可选地，你还可以配置其他相关设置，如音高修正或过滤器。
如果一切配置正确，语音映射调试区域将显示类似于“Betty:MyVoice(rvpme)”的内容。 在文件浏览器中，导航至：\SillyTavern-extras\data\models\rvc。
<br>创建一个子文件夹（例如'Betty'），并将.pth和.index文件放入该文件夹中。（提示：你可以从<a data-tooltip-position="top" aria-label="https://voice-models.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://voice-models.com/" target="_self">voice-models.com</a>下载语音文件，确保文件名中注明它是 RVPME 格式。）
使用以下命令安装必要的依赖：pip install -r requirements-rvc.txt
使用以下命令启动 SillyTavern-extras 并启用 RVC 模块。假设你使用的是 SillyTavern-extras 中预安装的 Edge TTS：python server.py --enable-modules=rvc,edge-tts
如果你有支持的 GPU，可以通过添加--cuda来启用 GPU 加速。根据快速测试，200 个 tokens（约 150 个单词）大约需要 7.6GB 的显存。为 RVC 创建一个语音映射。在“角色”中选择你想要的 SillyTavern 角色名称，在“语音”中选择你在第 1 步创建的 RVC 文件夹，然后点击应用。如果一切设置正确，语音映射将显示类似于“Betty:MyVoice(rvpme)”的内容。
选择“rmvpe”作为音高提取方法。
如果使用“rmvpe”遇到问题，可以尝试其他方法（例如，“harvest”或“torchcrepe”）。
如果你希望保存生成的 RVC 音频文件用于测试或故障排除，可以将--rvc-save-file添加到启动命令中。这将把最后生成的音频文件保存为SillyTavern-extras/data/tmp/rvc_output.wav：python server.py --enable-modules=rvc,edge-tts --rvc-save-file
在你的 RVC 模型文件夹中，为每个分类的表情（例如愤怒、恐惧、喜悦、爱情、悲伤、惊讶等）准备单独的.pth和.index文件。启用 RVC 和分类模块：python server.py --enable-modules=rvc,classify
剩下的设置类似于单独使用 RVC 模块（如上所述）。<br>自动安装和启动 Mangio-RVC：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/deffcolony/rvc-easy-menu" target="_self">https://github.com/deffcolony/rvc-easy-menu</a>将仓库克隆到你希望的目录：git clone https://github.com/deffcolony/rvc-easy-menu.git 打开RVC-Launcher.bat文件。
选择选项 1 安装 RVC。
按照提示安装所需的包和依赖。安装完成后，选择选项 2 打开 WebUI 进行语音训练。数据集准备：1. 准备音频：
将你希望训练的音频放入datasets文件夹。
确保音频没有背景噪声——只需要纯净的语音。
更长的音频会得到更好的输出质量。
WebUI 训练：1. 访问训练标签：
点击 WebUI 中的训练标签。
2. 配置实验：
输入实验名称（例如my-epic-voice-model）。
设置版本为 v2。
3. 处理数据并提取特征：
点击“处理数据”和“特征提取”。
设置“保存频率”为 50。
4. 训练参数：
设置“总训练轮数”为 300。
点击“训练特征索引”和“训练模型”。
]]></description><link>sillytavern/3-扩展功能/3.11-基于检索的语音转换-(rvc).html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.11 基于检索的语音转换 (RVC).md</guid><pubDate>Sun, 22 Dec 2024 14:56:47 GMT</pubDate></item><item><title><![CDATA[3.8 图像生成]]></title><description><![CDATA[图像标题生成允许SillyTavern在聊天中自动为图片生成文本描述。当你希望你的AI角色能够“看见”并回应对话中的视觉内容时，可以使用图像标题生成。
为你上传或粘贴到消息中的图片生成标题
为已有的图像历史添加上下文
使用多种来源生成标题，包括本地模型、云API和众包网络
有些选项无需设置、无需花费金钱，也无需GPU。也有些选项需要设置这些资源。选择最适合你的需求和资源的选项。
图像标题扩展是SillyTavern内置的，不需要单独安装。 设置： 打开图像标题生成面板，在扩展面板中
选择一个标题生成来源（最常用的是“本地”或“多模态”）
对于“多模态”来源，请确保在API连接选项卡中设置了连接 生成标题： 从扩展弹出菜单中选择“生成标题”
在提示中选择图片文件
等待标题生成 审核并发送： 生成的标题将插入到你的消息中
通过图像工具提示查看标题
点击发送，让你的角色看到这张图片并作出反应！
选择图像标题生成的来源。支持的选项如下：
标题提示词：输入自定义的标题生成提示词。默认的提示词是“这张图片中有什么？”
每次请求：启用后，每次生成标题时都会要求输入自定义的提示词。 消息模板：自定义生成的标题消息模板。使用{{caption}}宏插入生成的标题。默认模板是[{{user}}发送给{{char}}的图片包含：{{caption}}] 自动为图片生成标题：启用此选项后，所有粘贴或附加到消息中的图片将自动生成标题。
在保存之前编辑标题：启用后，生成的标题可以在保存前进行编辑。
所有在SillyTavern中生成图像标题的方式：
从扩展弹出菜单中选择“生成标题”并选择图片文件
点击已发送消息中图片顶部的 标题图标
启用<a data-tooltip-position="top" aria-label="3.8 图像生成 > 自动标题生成" data-href="3.8 图像生成#自动标题生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#自动标题生成_1" class="internal-link" target="_self" rel="noopener nofollow">自动标题生成</a>，直接将图片粘贴到聊天输入框
使用附加文件或图片按钮将图片文件附加到消息中
发送包含嵌入图片的消息
<br>使用/caption<a data-tooltip-position="top" aria-label="3.8 图像生成 > 斜杠命令：/caption" data-href="3.8 图像生成#斜杠命令：/caption" href="sillytavern/3-扩展功能/3.8-图像生成.html#斜杠命令：/caption_0" class="internal-link" target="_self" rel="noopener nofollow">斜杠命令：/caption</a>
自动标题生成功能可以在你将图片添加到聊天时，自动生成标题，无需每次手动触发标题生成过程。要启用此功能，请在图像标题生成面板中选中“自动为图片生成标题”复选框。你还可以通过选中“在保存之前编辑标题”复选框来启用编辑模式，在生成标题后进行编辑。启用后，自动标题生成将在以下场景中触发：
粘贴到聊天输入框中的图片
附加到消息中的图片文件
发送包含嵌入图片的消息
系统将使用你选择的标题生成来源（本地、Extras、Horde或多模态）和已配置的设置来生成标题。
如果启用了“在保存之前编辑标题”选项：
在添加图片后，弹出窗口会显示生成的标题。
你可以根据需要查看并编辑标题。
点击“确定”应用标题，或点击“取消”放弃标题。
生成的（并可选地编辑过的）标题将自动插入到消息中，使用你已配置的消息模板。默认情况下，标题将以如下格式发送：[BaronVonUser发送给Seraphina的图片包含：...]
扩展提供了/caption斜杠命令，可以在聊天框或脚本中使用。/caption [quiet=true|false]? [mesId=number]? [prompt] prompt（可选）：自定义标题生成提示词。仅支持多模态来源。
quiet=true|false：如果设置为true，将禁止发送生成的标题到聊天中，默认为false。
mesId=number：指定消息ID，给已有消息中的图片生成标题，而不是上传新图片。
如果未提供mesId，命令将提示你上传图片。当quiet为false时（默认为false），生成的标题将以新消息的形式发送到聊天中，生成的标题可用作其他命令的输入。
使用默认设置为新图片生成标题：/caption
为新图片使用自定义提示词生成标题：/caption 描述这张图片中的主要颜色和形状
为消息#5中的图片生成标题，而不发送新消息：/caption mesId=5 quiet=true
从消息#10生成标题并使用该标题生成新图像：/caption mesId=10 描述这张图片的关键词（以逗号分隔） | /imagine
<br>你可以在<a class="internal-link" data-href="/Administration/config-yaml.md#extensions-configuration" href=".html" target="_self" rel="noopener nofollow">config.yaml</a>中更改图像标题生成模型的配置。该配置的关键字是extras.captioningModel。你可以使用任何支持图像标题生成的模型（例如VisionEncoderDecoderModel或“image-to-text”管道）。该模型必须与transformers.js库兼容，即需要ONNX权重。寻找带有ONNX和image-to-text标签的模型，或者有一个包含.onnx文件的onnx文件夹的模型。
模型：选择图像标题生成的模型。选项根据所选的API而有所不同。
允许反向代理：如果已定义并有效，启用此选项以允许使用反向代理（适用于OpenAI、Anthropic、Google、Mistral）。<br>
API密钥和标题生成来源的端点URL在<a data-tooltip-position="top" aria-label="2.5 API 连接" data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">API连接</a>面板中管理。首先在API连接中设置连接，然后在标题生成中选择它作为标题生成来源。
Warning
警告：首先在API连接面板中进行配置。
要使用这些标题生成来源，请在来源下拉框中选择多模态。
“我想要最好的标题生成效果，不介意为此付费”：Anthropic
“我不想付费或运行任何东西”：Google AI Studio免费版
“我想在本地生成标题并且一切自动运行”：Ollama
<br>“我想保留本地AI的梦想”：<a data-tooltip-position="top" aria-label="3.8 图像生成 > KoboldCpp" data-href="3.8 图像生成#KoboldCpp" href="sillytavern/3-扩展功能/3.8-图像生成.html#KoboldCpp_0" class="internal-link" target="_self" rel="noopener nofollow">KoboldCpp</a>
“我想抱怨它不工作”：Extras
<br>有关安装和使用 <a data-tooltip-position="top" aria-label="https://github.com/LostRuins/koboldcpp" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LostRuins/koboldcpp" target="_self">KoboldCpp</a> 的一般信息，请参阅 <a data-tooltip-position="top" aria-label="https://github.com/LostRuins/koboldcpp/wiki" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LostRuins/koboldcpp/wiki" target="_self">KoboldCpp 文档</a>。要使用 KoboldCpp 进行多模态标题生成：
获取一个支持多模态的模型，该模型可以同时处理文本和图像提示词（prompt）。
同时获取该模型的多模态投影（multimodal projections）。这些权重允许模型理解输入中的文本部分和图像部分之间的关系。
在 KoboldCpp 启动 GUI 或命令行界面中加载模型和投影。<br>
原始的经典本地多模态模型是 LLaVA。可以从 <a data-tooltip-position="top" aria-label="https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile" target="_self">Mozilla/llava-v1.5-7b-llamafile</a> 下载该模型及其投影的 GGUF 格式文件。例如，可以使用以下命令行加载模型和投影：
./koboldcpp \
--model="models/llava-v1.5-7b-Q4_K.gguf" \
--mmproj="models/llava-v1.5-7b-mmproj-Q4_0.gguf" \
... 其他标志 ...
<br>一些 LLaVA 微调（finetune）模型可以尝试： <a data-tooltip-position="top" aria-label="https://huggingface.co/xtuner/llava-llama-3-8b-v1_1-gguf" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/xtuner/llava-llama-3-8b-v1_1-gguf" target="_self">xtuner/llava-llama-3-8b-v1_1-gguf</a>， <a data-tooltip-position="top" aria-label="https://huggingface.co/xtuner/llava-phi-3-mini-gguf" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/xtuner/llava-phi-3-mini-gguf" target="_self">xtuner/llava-phi-3-mini-gguf</a>。<br>你也可以使用与你的特定微调模型（finetune）所基于的基础模型相对应的多模态投影。某些常见基础模型的投影可以从 <a data-tooltip-position="top" aria-label="https://huggingface.co/koboldcpp/mmproj/tree/main" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/koboldcpp/mmproj/tree/main" target="_self">koboldcpp/mmproj</a> 获取。]]></description><link>sillytavern/3-扩展功能/3.8-图像生成.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.8 图像生成.md</guid><pubDate>Sun, 22 Dec 2024 14:56:47 GMT</pubDate></item><item><title><![CDATA[3.7 图像描述]]></title><description><![CDATA[图像描述功能允许 SillyTavern 自动生成用于聊天中的图像文本描述。当你希望你的 AI 角色“看到”并对视觉内容作出回应时，可以使用图像描述功能。
为你上传或粘贴到消息中的图像生成描述
为聊天历史中已有的图像添加上下文
使用不同来源进行生成，包括本地模型、云 API 和众包网络
有些选项不需要设置、金钱或 GPU，另外一些则可能需要这些资源。选择适合你需求和资源的选项。图像描述扩展功能内置于 SillyTavern，无需单独安装。
设置： 打开图像描述面板，在扩展面板中
选择一个描述来源（最常用的是“本地”或“多模态”）
对于“多模态”，确保你已经在API 连接标签中设置好了连接 生成描述： 从扩展弹出菜单中选择“生成描述”
在提示时选择一个图像文件
等待描述生成 审核并发送： 生成的描述将会插入到你的消息中
通过图像工具提示查看描述
点击发送，看看你的角色如何看待这张图片！ 选择图像描述的来源。支持的选项：
描述提示词：输入自定义的描述提示词。默认提示词为“这张图片里有什么？”
每次都询问：切换以请求每个图像描述时使用自定义提示词 消息模板：自定义描述消息模板。使用{{caption}}宏来插入生成的描述。默认模板为[{{user}} 给{{char}}发送了一张包含：{{caption}}的图片] 自动为图片生成描述：切换以启用自动为粘贴或附加到消息中的图像生成描述
在保存前编辑描述：切换以允许在保存前编辑描述
在 SillyTavern 中，有多种方式为图像生成描述：
从 扩展 弹出菜单中选择“生成描述”，然后在提示时选择图像文件
点击消息中图像上方的 描述 图标
直接将图像粘贴到聊天输入框中，并启用 <a data-href="3.7 图像描述#自动描述" href="sillytavern/3-扩展功能/3.7-图像描述.html#自动描述_1" class="internal-link" target="_self" rel="noopener nofollow">3.7 图像描述 &gt; 自动描述</a>
使用 嵌入文件或图像 按钮将图像文件附加到消息中
发送带有嵌入图像的消息
<br>使用/caption <a data-tooltip-position="top" aria-label="3.7 图像描述 > 斜杠命令：/caption" data-href="3.7 图像描述#斜杠命令：/caption" href="sillytavern/3-扩展功能/3.7-图像描述.html#斜杠命令：/caption_0" class="internal-link" target="_self" rel="noopener nofollow">斜杠命令：/caption</a>
自动描述功能允许你在图像被添加到聊天时，自动生成描述，而无需每次手动触发描述过程。要启用此功能，请在图像描述面板中勾选“自动为图片生成描述”框。你还可以通过勾选“在保存前编辑描述”框来选择在保存前编辑描述。启用后，自动描述将在以下场景触发：
当图像被直接粘贴到聊天输入框中时
当图像文件被附加到消息中时
当带有嵌入图像的消息被发送时
系统将使用你选择的描述来源（本地、附加项目、Horde 或多模态）和已配置的设置来生成图像描述。如果你启用了“在保存前编辑描述”选项：
添加图像后，会弹出一个窗口显示生成的描述。
你可以查看并根据需要编辑描述。
点击“确认”以应用描述，或点击“取消”以不保存该描述。
生成的（并可选地编辑过的）描述将自动插入到你配置的消息模板中。默认情况下，它将以如下格式发送：[BaronVonUser 给Seraphina发送了一张包含：...的图片]
该扩展提供了一个/caption斜杠命令，可在聊天框或脚本中使用。/caption [quiet=true|false]? [mesId=number]? [prompt] prompt（可选）：自定义的图像描述模型提示词。仅支持多模态来源。
quiet=true|false：如果设置为true，则会抑制将描述消息发送到聊天。默认值为false。
mesId=number：指定一个消息 ID，从现有消息中提取图像进行描述，而不是上传新图像。
如果未提供mesId，命令将提示你上传图像。当quiet为false（默认）时，系统会将带有描述的图像作为新消息发送到聊天中。生成的描述可以作为其他命令的输入。使用默认设置为新图像生成描述：/caption
使用自定义提示词为新图像生成描述：/caption 描述这张图片中的主要颜色和形状
为消息#5 中的图像生成描述，但不发送新消息：/caption mesId=5 quiet=true
<br>为消息#10 中的图像生成自定义描述，然后基于该描述<a data-href="3.8 图像生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.8 图像生成</a>：/caption mesId=10 使用逗号分隔的关键词描述这张图片 | /imagine
<br>你可以在<a data-href="5.1 配置文件" href="sillytavern/5-管理/5.1-配置文件.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.1 配置文件</a>中更改模型。相关键为extras.captioningModel，这是因为一些原因。输入你想使用的 Hugging Face 模型 ID。默认值是Xenova/vit-gpt2-image-captioning。你可以使用任何支持图像描述的模型（VisionEncoderDecoderModel或“image-to-text”管道）。该模型需要兼容transformers.js库，也就是说，模型需要具有 ONNX 权重。寻找带有ONNX和image-to-text标签的模型，或包含名为onnx的文件夹，其中包含.onnx文件。
模型：选择用于图像描述的模型。根据所选的 API，选项可能会有所不同。
允许反向代理：如果定义且有效，可以切换使用反向代理（OpenAI、Anthropic、Google、Mistral）
<br>API 密钥和图像描述源的端点 URL 在<a data-tooltip-position="top" aria-label="2.5 API 连接" data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">API 连接</a>面板中管理。首先在 API 连接中设置连接，然后在图像描述中选择该连接作为描述源。Warning
警告：首先在 API 连接面板中进行设置 最后提醒一次：在API 连接中配置 API 密钥/地址/端口，然后在图像描述中使用该连接。
您仍然可以使用 Claude 进行对话，使用 Google AI Studio 进行图像描述，或者其他方式。只需在“API 连接”标签中先配置它们。然后将您的聊天补全源切换到 Claude，将您的图像描述源切换到 Google AI Studio。
对于大多数本地后端，您需要在模型后端中设置某些选项，而不是在 SillyTavern 中设置。如果您的后端一次只能运行一个模型，并且不支持自动切换，您可能会发现很难使用同一个后端同时进行对话和图像描述。即使您在不同端口上运行两个后端实例，API 连接也只允许每种后端类型的一个活动配置。但如果我告诉您...您可能能够同时连接到相同的后端进行文本补全和对话完成呢？现在您可以在文本补全和对话完成模式下同时连接到同一后端类型。要使用这些图像描述源，请在源下拉菜单中选择“多模态”。
“我想要最好的图像描述，并且不介意支付费用”：Anthropic
“我不想支付任何费用或运行任何东西”：Google AI Studio 免费层
“我想本地描述图像，并且希望它能顺利工作”：Ollama
<br>“我想保持本地 AI 的梦想”：<a data-href="3.7 图像描述#KoboldCpp" href="sillytavern/3-扩展功能/3.7-图像描述.html#KoboldCpp_0" class="internal-link" target="_self" rel="noopener nofollow">3.7 图像描述 &gt; KoboldCpp</a>
“我想在它不工作时抱怨”：Extras
<br>有关安装和使用<a data-tooltip-position="top" aria-label="https://github.com/LostRuins/koboldcpp" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LostRuins/koboldcpp" target="_self">KoboldCpp</a>的更多信息，请参见<a data-tooltip-position="top" aria-label="https://github.com/LostRuins/koboldcpp/wiki" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LostRuins/koboldcpp/wiki" target="_self">KoboldCpp 文档</a>。要使用 KoboldCpp 进行多模态图像描述：
获取一个多模态能力的模型，能够同时处理文本和图像提示词。
还需要获取该模型的多模态投影。这些权重允许模型理解文本和图像部分的输入之间的关系。
在 KoboldCpp 的启动 GUI 或命令行界面中加载模型和投影。
<br>原始的经典本地多模态模型是 LLaVA。该模型和投影的 GGUF 格式文件可以从<a data-tooltip-position="top" aria-label="https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile" target="_self">Mozilla/llava-v1.5-7b-llamafile</a>获取。要通过命令行加载它们，可以使用--model和--mmproj标志设置模型和投影。例如：./koboldcpp \\\\
--model="models/llava-v1.5-7b-Q4_K.gguf" \\\\
--mmproj="models/ llava-v1.5-7b-mmproj-Q4_0.gguf" \\\\
... 其他标志 ...
<br>您可以尝试一些 LLaVA 微调版本：<a data-tooltip-position="top" aria-label="https://huggingface.co/xtuner/llava-llama-3-8b-v1_1-gguf" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/xtuner/llava-llama-3-8b-v1_1-gguf" target="_self">xtuner/llava-llama-3-8b-v1_1-gguf</a>，<a data-tooltip-position="top" aria-label="https://huggingface.co/xtuner/llava-phi-3-mini-gguf" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/xtuner/llava-phi-3-mini-gguf" target="_self">xtuner/llava-phi-3-mini-gguf</a>。<br>您可以使用适用于您特定微调的基础模型的多模态投影。某些常见基础模型的投影可以从<a data-tooltip-position="top" aria-label="https://huggingface.co/koboldcpp/mmproj/tree/main" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/koboldcpp/mmproj/tree/main" target="_self">koboldcpp/mmproj</a>获得。]]></description><link>sillytavern/3-扩展功能/3.7-图像描述.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.7 图像描述.md</guid><pubDate>Sun, 22 Dec 2024 14:56:47 GMT</pubDate></item><item><title><![CDATA[3.5 EmulatorJS]]></title><description><![CDATA[此扩展允许你直接在SillyTavern聊天中玩复古游戏。先决条件：
最新版本的SillyTavern。
下载的ROM文件。你可以在<a data-tooltip-position="top" aria-label="https://archive.org/details/ni-romsets" rel="noopener nofollow" class="external-link is-unresolved" href="https://archive.org/details/ni-romsets" target="_self">此处</a>找到它们。
安装步骤：
使用SillyTavern的扩展下载器进行安装。
<br>或者使用此链接：<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-EmulatorJS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-EmulatorJS" target="_self">SillyTavern-EmulatorJS</a> 打开“EmulatorJS”扩展菜单。
点击“添加ROM文件”。ROM文件将保存在浏览器存储中，而不会存储在服务器上。
选择要添加的游戏文件。输入游戏名称和核心（如果未自动检测到）。如果核心需要BIOS文件，也请一并添加。
在列表中点击“播放”按钮，或通过魔杖菜单启动游戏。
游戏启动后，可以在模拟器框架内自定义控制和其他设置。
如果需要休息，可以使用保存/加载存档功能。
<br>查看EmulatorJS文档以了解可用的核心和它们的要求：<a data-tooltip-position="top" aria-label="https://emulatorjs.org/docs/systems" rel="noopener nofollow" class="external-link is-unresolved" href="https://emulatorjs.org/docs/systems" target="_self">系统</a>。借助多模态模型，如GPT-4 Vision，你的AI机器人可以观看你的游戏并提供幽默的角色评论。
<br>支持<a data-tooltip-position="top" aria-label="https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture#browser_compatibility" rel="noopener nofollow" class="external-link is-unresolved" href="https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture#browser_compatibility" target="_self">ImageCapture</a>的浏览器。已在桌面版Chrome上测试通过。Firefox需要通过配置启用，而Safari不支持。
推荐使用启用了图像内联模式的聊天完成API。需要使用OpenAI或OpenRouter API密钥，且选择“gpt-4-turbo”或“gpt-4o”作为所选模型；Google AI Studio的Gemini 1.5 Pro或Gemini 1.5 Flash模型；Anthropic Claude（推荐Opus 3或Sonnet 3.5模型）。请检查所选API文档，查看所选模型是否支持多模态提示词。
如果图像内联被禁用，确保启用了“图像说明”扩展，然后选择“多模态”说明来源： OpenAI、Claude、MistralAI、Google AI Studio，且具有支持视觉的模型。
OpenRouter API，带有兼容的多模态模型。
在Ollama、KoboldCpp、oobabooga TextGen WebUI或vLLM中本地托管的Llava模型。 确保在EmulatorJS扩展设置中设置了评论间隔。此设置定义了如何频繁地通过游戏截图查询角色的评论。设置为0表示不提供评论。
选择一个角色聊天并启动游戏。为获得最佳效果，确保ROM文件命名正确，这样AI可以获得更多的背景信息。
正常开始游戏。视觉模型将定期被查询，以根据最新的截图撰写评论。 截图模板 - 用于描述游戏内截图的提示词。{{game}}和{{core}}是支持的附加宏。
评论模板 - 用于基于生成的截图撰写评论的提示词。{{game}}、{{core}}、{{caption}}是支持的附加宏。对于图像内联模式，{{caption}}会替换为“见附图”。
强制生成说明 - 即使启用了图像内联，也强制使用多模态说明功能。
如果出现以下情况，评论将被暂时暂停（跳过间隔步骤）：
模拟器被暂停（使用暂停按钮，游戏内暂停不算）。
浏览器窗口失去焦点。
用户输入区域不为空。这是为了让你能够平静地输入回复。
另一个回复生成正在进行中。
TTS语音正在朗读评论。在朗读结束前（最长20秒），评论会被暂时搁置，但不会被跳过。
其他常见问题：
确保在启动游戏前已设置评论间隔。
确保你已设置了多模态API密钥，并且SillyTavern服务器控制台没有错误。
仍然无法工作？请将你的浏览器调试控制台日志（按F12）发送给我们。
<br>EmulatorJS引擎（GPLv3）：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/EmulatorJS/EmulatorJS" target="_self">https://github.com/EmulatorJS/EmulatorJS</a>
]]></description><link>sillytavern/3-扩展功能/3.5-emulatorjs.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.5 EmulatorJS.md</guid><pubDate>Sun, 22 Dec 2024 14:56:46 GMT</pubDate></item><item><title><![CDATA[3.4 动态音频]]></title><description><![CDATA[本指南将带您了解如何为您的 SillyTavern 体验设置和定制动态音频资源。在开始之前，请确保您已满足以下前置条件：
确保您使用的是最新版本的 SillyTavern。
在扩展面板（堆叠块图标）中的“下载扩展和资源”菜单中安装“动态音频”扩展。 连接到资源库： 启动 SillyTavern 并导航到 扩展 &gt; 资源。
点击“连接”按钮以建立与官方资源库的连接。
下载与您打算使用的背景图像对应的音频资源，如背景音乐（BGM）或环境音效。 启用动态音频扩展： 在 SillyTavern 中，前往 扩展 &gt; 动态音频。
启用该扩展，取消静音并根据需要调整背景音乐（BGM）和环境音效的音量。
当 BGM 结束时，另一首会随机播放，点击循环按钮可保持当前 BGM 播放。
点击“随机播放”按钮以随机选择另一首 BGM。 基于表情的背景音乐： 如果您希望背景音乐根据角色表情变化，请启用表情背景音乐开关（需要在角色文件夹中放置相应的 BGM，如下所示）。
调整 BGM 更新的冷却时间（以秒为单位）。如果您发现在群聊中或使用基于情绪检测的角色专属 BGM 时背景音乐变化过于频繁，可以增加冷却时间。 要为角色的情绪设置自定义音乐，请按照以下步骤操作： 导航到角色文件夹： 进入角色文件夹，例如 \SillyTavern\data\&lt;用户昵称&gt;\characters\Seraphina。 创建 BGM 文件夹： 在角色文件夹内，创建一个名为 bgm 的子文件夹。 导入情绪音乐： 在 bgm 文件夹中导入每种情绪的音乐文件。支持的音频格式包括 .mp3、.ogg 和 .wav。
命名规则：[情绪]_[数字].mp3，例如 anger_0.mp3、joy_0.mp3。 为情绪导入多个音乐文件： 您可以为同一情绪导入多个音轨，通过增加数字编号来区分，例如 neutral_1.mp3、neutral_2.mp3。 默认音乐选择： 当未检测到情绪时，系统会随机播放一首中性曲目作为默认音乐。情绪检测与更新角色图像的方式类似，详情请参阅<a data-href="3.6 表情图像（头像）" href="sillytavern/3-扩展功能/3.6-表情图像（头像）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.6 表情图像（头像）</a>。 如果角色文件夹中没有自定义 BGM，系统将播放默认背景音乐。以下是更改默认背景音乐的方法： 导航到 BGM 文件夹： 转到以下文件夹：\SillyTavern\data\&lt;用户昵称&gt;\assets\bgm。 替换或添加音乐： 替换或添加音乐文件（.mp3、.ogg、.wav）到此文件夹。
这些文件是通过扩展程序下载的官方音频资源。
当未找到角色专属 BGM（无论是在单人还是群聊中）时，将随机播放这些曲目中的一首。 环境音效为您的场景增添了深度。以下是如何定制环境音效的方法： 导航到环境音效文件夹： 转到以下文件夹：\SillyTavern\data\&lt;用户昵称&gt;\assets\ambient。 文件命名规则： 环境音效的文件名与背景图像的文件名相对应，空格替换为破折号。
例如：“bedroom-clean.mp3” 对应 “bedroom clean.jpg” 背景。
如果锁定按钮未激活，音频文件将根据背景图像自动播放。激活锁定后，将保持当前的环境音效播放。 自定义环境音效： 您可以按照相同的命名规则，为自定义或现有背景添加自己的环境音效。 感谢您遵循本指南！现在，您的 SillyTavern 体验已通过动态音频得到丰富。]]></description><link>sillytavern/3-扩展功能/3.4-动态音频.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.4 动态音频.md</guid><pubDate>Sun, 22 Dec 2024 14:56:46 GMT</pubDate></item><item><title><![CDATA[3.3 聊天向量化]]></title><description><![CDATA[Warning
使用此扩展程序并不保证能改善聊天体验或改进记忆功能。只有在理解向量数据库使用的所有影响后，才应使用此功能。
聊天向量化会在生成您最新消息的回复时，搜索当前聊天历史中与您最近的消息相关的内容。它会暂时将最相关的消息重新排序至聊天历史的开始或结束位置。聊天历史的开头和结尾位置通常对模型生成的回复影响最大。因此，将相关的消息重新排序到这些位置，可以帮助模型在生成回复时专注于相关信息。特别是，聊天向量化可以找到在聊天历史中距离当前消息较远的相关消息。将这些消息加入上下文中，使模型获得原本无法得到的信息。聊天向量化是一种检索增强生成（RAG）。检索增强生成通过提供额外的相关信息来提升生成回复的质量。
检索：使用最近的消息来检索相关的历史消息
增强：通过有用的方式将历史消息插入到模型的上下文中
生成：指示模型在生成回复时使用这些历史消息
信息 一些术语： 向量：一组数字，表示一段文本的主题、内容、风格或其他特征。
向量化：计算表示一段文本的向量。这个过程由一个向量化模型完成。
向量搜索：通过比较向量而不是关键词来查找相关结果。如果我们计算搜索查询的向量，可以与存储在集合中的文本的向量进行比较，从而找到与查询文本最相似的文本。在聊天向量化的情况下，“搜索查询”是最近的两条消息，而“集合中的文本”是所有其他聊天消息。 要启用聊天向量化，请选择“扩展” &gt; “向量存储” &gt; “启用聊天消息”。配置向量化源和向量化模型。聊天向量化使用与数据仓库相同的向量源，因此您可能已经完成了配置。向量化源和向量化模型的设置文档可以参考<a data-tooltip-position="top" aria-label="2.9.6 数据库（RAG）" data-href="2.9.6 数据库（RAG）" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">数据仓库</a>。<br>聊天向量化使用与数据仓库相同的向量存储，但这不需要设置或配置。关于向量存储的更多信息请参见<a data-tooltip-position="top" aria-label="2.9.6 数据库（RAG）" data-href="2.9.6 数据库（RAG）" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">数据仓库</a>。聊天向量化不会使用数据仓库来存储聊天消息。这些消息仅存储在当前聊天中。为了使聊天消息可以被搜索，需要计算每条消息的向量并将其存储。向量化是在后台进行的，每次您发送或接收消息时都会自动完成。每条消息是单独存储的，因此它可以单独查找和重新排序。在处理较长的消息时，消息会被拆分成“块”，以确保每个块不超过 400 个字符。如果需要，您可以更改“块大小（字符）”设置。消息会通过查找自然的分割点来拆分为多个块，例如段落换行、换行符或单词间的空格。如果您的聊天消息有其他标记自然分割点的方法（例如 ----），可以将其添加到“块边界”中。此设置与数据仓库共享。要在后台计算当前聊天中所有消息的向量，可以选择“向量化所有消息”。要查看当前聊天中有多少条消息已被向量化，可以选择“查看统计信息”。此操作会显示已存储的向量总数，并标明哪些聊天消息已被向量化，已向量化的消息会标记为绿色小球。要删除当前聊天中所有消息的向量，可以选择“清除向量”。“向量化所有消息”和“清除向量”仅影响当前聊天中的消息向量。然而，在数据仓库中的文件向量化控制按钮也有相同的功能，确保您清除的是正确的向量。为了查找聊天历史中最相关的消息，最近的消息会被转换（向量化）为查询向量。默认情况下，使用的是最近的两条消息。您可以通过“查询消息”设置来更改这个值。这个设置同样适用于从数据仓库中找到相关内容时的消息选择。历史消息的相关性分数必须达到至少 25%，才会被包括在内。您可以通过“分数阈值”设置来更改此值，该设置与数据仓库共享。从聊天历史中查找到的最相关的三条消息将被重新排序。您可以通过“插入#”来更改相关消息的数量。为了避免打乱聊天中最近的事件，最靠近的五条消息不会被重新排序。您可以通过“保留#”来更改这个值。消息会被重新排序到以下三个位置之一：
聊天历史的开头，紧跟在主提示词/世界书之后（默认位置）
聊天历史的开头，并位于主提示词/世界书之前
聊天历史的末尾，在最后两条消息之前（“聊天深度 2”）。由于您刚刚发送了消息，这个位置通常就在模型上一条回复之前。
您可以通过“注入位置”和“深度”来更改此设置。消息会根据相关性顺序插入，越相关的消息排列在越前面的位置。每条消息的发送者名称也会被包括在内。这些消息会被视为“过去的事件”，这有助于模型理解这些消息来自与当前消息不同的历史时刻。您可以通过“注入模板”来更改此设置。您可以通过“提示词项化”弹出窗口、终端日志或浏览器控制台日志查看最终发送给模型的提示词。这些日志有助于您了解聊天向量化的所有步骤。<br>向量总结功能为实验性功能。
向量总结并不会创建聊天的总结。它并不会将检索到的消息转化为总结，也不会使聊天历史变得更简洁。它不像<a data-tooltip-position="top" aria-label="3.13 总结（Summarize）" data-href="3.13 总结（Summarize）" href="sillytavern/3-扩展功能/3.13-总结（summarize）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">总结</a>那样变得更好。
向量总结旨在提升聊天消息的向量检索效果。它通过在向量化之前进行总结来实现，这个总结步骤会提取消息中最重要的部分，从而生成一个能更好指示消息内容的向量。向量总结可能会使向量检索变得不那么有效。要对聊天历史中的消息进行总结并为每条总结后的消息生成向量，请选择“为向量生成总结聊天消息”。总结后的消息并不会替代聊天中的原始消息。如果向量搜索匹配了总结消息的向量，原始消息会被从聊天历史中检索出来并重新排序到上下文中。总结后的消息会被保留在向量存储中，这可能有助于调试。要对用于搜索聊天历史的消息（默认是最近的两条消息）进行总结，请选择“发送时总结聊天消息”。每次为向量化总结消息时，都会向总结模型发起一个独立请求。您可以选择使用“总结来源”来决定使用哪个总结模型。选择“主 API”将使用与生成聊天或文本时相同的模型和连接设置来生成总结。请求包括原始消息内容和模型生成总结的指令。您可以通过“总结提示词”来更改此指令。]]></description><link>sillytavern/3-扩展功能/3.3-聊天向量化.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.3 聊天向量化.md</guid><pubDate>Sun, 22 Dec 2024 14:56:46 GMT</pubDate></item><item><title><![CDATA[3.1 Blip]]></title><description><![CDATA[本指南将引导你如何为SillyTavern体验设置和定制Blip扩展。此扩展通过可变速度动画文本并在动画过程中播放声音。你可以使用音频文件或生成声音。在开始之前，请确保你已满足以下前置条件：
确保你正在使用SillyTavern的最新版本。
从扩展面板（叠加的方块图标）中的“下载扩展和资产”菜单安装“Blip”扩展。 Blip用户消息： 勾选框以启用用户消息的文本动画。
设置用户的个人资料，或使用默认个人资料为用户启用Blip动画。 仅对特定文本启用Blip： 勾选框以仅对引号内的文本启用Blip动画。
勾选框以忽略星号（*）内的内容。 自动滚动： 勾选框以使聊天界面跟随文本动画自动滚动。如果希望在动画过程中自由滚动，请禁用此选项。 音频音量： 如果仅需要文本动画，可以将音频静音。
你可以调整Blip音频的全局音量。 你可以为每个角色保存一个配置文件：
包括用户配置文件，以及在角色没有配置文件时使用的可选默认配置文件。
如果列表中仅显示当前聊天角色，勾选框以显示你所有的角色。 选择要分配/更新配置文件的角色： 选择一个角色，如果该角色已有配置文件，则会加载该配置文件。
如果该角色尚未配置文件，当前的参数将成为该角色的配置设置。
可以使用删除按钮删除任何配置文件。
如果角色未出现在列表中，请使用刷新按钮。 文本动画设置： 设置文本速度：每个字母打印之间的延迟，单位为毫秒。
设置最小/最大速度乘数，值不为1.0时会让动画速度具有随机性。
设置逗号/短语延迟（大于0）以在打印特殊字符时加入暂停，可以为动画增加更多生动性。在这种情况下，音频也会暂停。 音频参数： 设置一个音量乘数，仅影响此语音配置文件（如有需要）。
设置音频速度：每次Blip声音之间的延迟，独立于文本速度。 Blip来源：生成声音： 使用最小/最大频率滑块来定制播放的Blip声音。
如果最小和最大值不同，每次播放时会随机选择一个声音。 Blip来源：文件： 从列表中选择一个文件。
你可以通过扩展菜单中的资产管理器获取官方ST Blip资产。
或者将文件直接放入：\SillyTavern\data\&lt;user-handle&gt;\assets\blip。
勾选框以强制等待文件播放完毕后再重新播放。 感谢你遵循本指南！你的SillyTavern体验现在已经通过文本动画和Blip语音得到丰富。]]></description><link>sillytavern/3-扩展功能/3.1-blip.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3.1 Blip.md</guid><pubDate>Sun, 22 Dec 2024 14:56:45 GMT</pubDate></item><item><title><![CDATA[3 扩展功能]]></title><description><![CDATA[SillyTavern 配备了许多可以启用或禁用的扩展。扩展可以增加新功能、修改现有功能的行为，或为你的 AI 提供额外的内容。你还可以从“下载扩展和资源”菜单中安装更多扩展。要打开或关闭扩展面板，选择顶部栏中的 扩展。
管理扩展: 启用、禁用或更新扩展
下载扩展和资源: 从 SillyTavern 仓库安装<a data-href="3 扩展功能" href="sillytavern/3-扩展功能/3-扩展功能.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3 扩展功能</a>、角色、声音和背景
扩展更新提醒: 勾选此项以在安装的扩展有更新时收到通知
安装扩展: 从 Git 仓库 URL 导入扩展
警告
使用第三方扩展可能会产生意外副作用，并可能带来安全风险。
在通过 安装扩展 导入扩展之前，请确保你信任该来源。
我们不对任何第三方扩展所导致的损害负责。
这些扩展是 SillyTavern 内置的，无需安装。你可以在扩展面板中启用或禁用它们。<br><a data-href="3.2 聊天翻译" href="sillytavern/3-扩展功能/3.2-聊天翻译.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.2 聊天翻译</a>将聊天消息翻译成不同语言<br><a data-href="3.7 图像描述" href="sillytavern/3-扩展功能/3.7-图像描述.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.7 图像描述</a>生成图像的文本，使你的 AI 能够“看到”并响应对话中的视觉内容<br><a data-href="3.8 图像生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.8 图像生成</a>使用本地或基于云的 Stable Diffusion、FLUX 或 DALL-E API 生成图像<br><a data-href="3.6 表情图像（头像）" href="sillytavern/3-扩展功能/3.6-表情图像（头像）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.6 表情图像（头像）</a>显示在聊天窗口旁边或后面的 AI 角色图像（也称为“头像”）<br><a data-href="3.13 总结（Summarize）" href="sillytavern/3-扩展功能/3.13-总结（summarize）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.13 总结（Summarize）</a>自动总结聊天历史记录<br><a data-href="3.3 聊天向量化" href="sillytavern/3-扩展功能/3.3-聊天向量化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.3 聊天向量化</a>查找聊天历史记录中的相关消息，并将它们添加到上下文中<br><a data-href="3.14 文本转语音 (TTS)" href="sillytavern/3-扩展功能/3.14-文本转语音-(tts).html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.14 文本转语音 (TTS)</a><br>通过 ElevenLabs、Silero、系统 TTS、<a data-href="3.15 AllTalk TTS V2" href="sillytavern/3-扩展功能/3.15-alltalk-tts-v2.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.15 AllTalk TTS V2</a>、<a data-href="3.16 XTTS 语音克隆" href="sillytavern/3-扩展功能/3.16-xtts-语音克隆.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.16 XTTS 语音克隆</a> 等提供语音朗读<br><a data-tooltip-position="top" aria-label="4.1 STscript 语言参考 > 快速回复：脚本库与自动执行" data-href="4.1 STscript 语言参考#快速回复：脚本库与自动执行" href="sillytavern/4-开发与自动化/4.1-stscript-语言参考.html#快速回复：脚本库与自动执行_0" class="internal-link" target="_self" rel="noopener nofollow">快速回复</a>通过单击快速回复聊天消息，执行命令和 ST 脚本等令牌计数器将文本转换为令牌并计算令牌数从 扩展 中的“下载扩展和资产”菜单安装以下扩展。!!! info 扩展不是附加功能附加功能项目已于 2024 年 4 月停止。您不需要安装附加功能即可使用扩展。!!!<br><a data-href="3.1 Blip" href="sillytavern/3-扩展功能/3.1-blip.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.1 Blip</a>使角色消息的文本具有可变速度的动画，并在动画过程中播放声音。<br><a data-href="3.4 动态音频" href="sillytavern/3-扩展功能/3.4-动态音频.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.4 动态音频</a>为您的聊天添加沉浸式背景音乐和环境音效。<br><a data-href="3.5 EmulatorJS" href="sillytavern/3-扩展功能/3.5-emulatorjs.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.5 EmulatorJS</a>直接在 SillyTavern 聊天中玩复古游戏。<br><a data-href="3.9 Live2D" href="sillytavern/3-扩展功能/3.9-live2d.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.9 Live2D</a>添加对 Live2d 模型的支持。可自定义表情、动画和互动。<br><a data-href="3.10 目标功能" href="sillytavern/3-扩展功能/3.10-目标功能.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.10 目标功能</a>为 AI 设置一个目标，以便在聊天过程中进行目标导向。<br><a data-href="3.11 基于检索的语音转换 (RVC)" href="sillytavern/3-扩展功能/3.11-基于检索的语音转换-(rvc).html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.11 基于检索的语音转换 (RVC)</a>为文本到语音模块添加实时语音克隆功能。<br><a data-href="3.12 语音识别" href="sillytavern/3-扩展功能/3.12-语音识别.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.12 语音识别</a>使用浏览器或附加功能将语音转为文本。<br><a data-href="3.17 VRM" href="sillytavern/3-扩展功能/3.17-vrm.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.17 VRM</a>添加对 VRM 模型的支持。可自定义表情、动画和互动。<br><a data-href="3.18 网页搜索" href="sillytavern/3-扩展功能/3.18-网页搜索.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.18 网页搜索</a>将网页搜索结果添加到 LLM 提示词中。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-AccuWeather" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-AccuWeather" target="_self">AccuWeather</a>
通过 AccuWeather API 提供天气信息，支持通过斜杠命令或功能工具查询。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-TopInfoBar" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-TopInfoBar" target="_self">Chat Top Bar</a>
为聊天窗口添加一个顶部栏，提供快速操作的快捷方式。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Chess" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Chess" target="_self">Chess</a>
与 LLM 一起下国际象棋。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-CodeRunner" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-CodeRunner" target="_self">Code Runner</a>
允许在聊天中运行 JavaScript 和 STscript 代码块。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Dice" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Dice" target="_self">D&amp;D Dice</a>
为您的掷骰需求提供一套经典的 D&amp;D 七面骰。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-DupeFinder" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-DupeFinder" target="_self">Duplicate Finder</a>
增加了按相似性分组角色的功能，方便查找重复角色。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-EmojiPicker" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-EmojiPicker" target="_self">Emoji Picker</a>
为聊天消息添加一个按钮，快速插入表情符号。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-GroupGreetings" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-GroupGreetings" target="_self">Group Greetings</a>
允许设置针对群聊的特定问候语。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-GroupSendAs" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-GroupSendAs" target="_self">Group SendAs</a>
为所选的群聊成员快速插入/sendas 命令模板。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-HypeBot" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-HypeBot" target="_self">HypeBot</a>
基于您最近的聊天内容，使用 NovelAI 的 HypeBot 引擎提供个性化建议。需要有效的 NovelAI 订阅。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Idle" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Idle" target="_self">Idle</a>
在您长时间空闲后，增加“空闲提示”，以自然地继续对话。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-ImageMetadataViewer" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-ImageMetadataViewer" target="_self">Image Metadata Viewer</a>
查看附加到聊天的放大图像的元数据。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-LaTeX" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-LaTeX" target="_self">LaTeX</a>
在聊天消息中渲染 LaTeX 和 AsciiMath 公式。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Mermaid" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Mermaid" target="_self">Mermaid</a>
在 SillyTavern 聊天中添加 Mermaid 图表和流程图渲染。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Notebook" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Notebook" target="_self">Notebook</a>
提供一个存储笔记的地方，支持富文本格式。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Randomizer" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Randomizer" target="_self">Parameter Randomizer</a>
提供随机化 API 设置滑块的功能，每次生成时都可以变化。
<br><a data-tooltip-position="top" aria-label="https://github.com/Bronya-Rand/Prome-VN-Extension" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Bronya-Rand/Prome-VN-Extension" target="_self">Prome Visual Novel Extension</a>
增强当前的视觉小说体验，增加更多功能（聚焦模式、信箱模式等）。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-PromptInspector" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-PromptInspector" target="_self">Prompt Inspector</a>
增加了在将提示词发送到服务器之前，查看和编辑输出提示词的选项。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-PushNotifications" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-PushNotifications" target="_self">Push Notifications</a>
允许接收聊天消息的推送通知。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-QuickPersona" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-QuickPersona" target="_self">Quick Persona</a>
在聊天栏中添加一个下拉菜单，用于选择用户角色。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-RSS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-RSS" target="_self">RSS</a>
作为斜杠命令或功能工具，通过 RSS 获取最新新闻。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-ScreenShare" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-ScreenShare" target="_self">Screen Share</a>
当您发送消息时，提供屏幕图像以支持多模态模型。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-Silence" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-Silence" target="_self">Silence Player</a>
为扩展菜单添加一个静音音频播放器。如果浏览器标签页在后台被关闭时，此功能有助于防止中断。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Timelines" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Timelines" target="_self">Timelines</a>
为聊天历史记录添加时间轴导航。
<br><a data-tooltip-position="top" aria-label="https://github.com/LenAnderson/SillyTavern-Variable-Viewer" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LenAnderson/SillyTavern-Variable-Viewer" target="_self">Variable Viewer</a>
提供一种简便的方式来查看和修改变量。
<br><a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-WebLLM" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-WebLLM" target="_self">WebLLM</a>
提供一个界面，允许扩展直接在浏览器中使用语言模型。<br><a data-href="3.1 Blip" href="sillytavern/3-扩展功能/3.1-blip.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.1 Blip</a><br><a data-href="3.2 聊天翻译" href="sillytavern/3-扩展功能/3.2-聊天翻译.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.2 聊天翻译</a><br><a data-href="3.3 聊天向量化" href="sillytavern/3-扩展功能/3.3-聊天向量化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.3 聊天向量化</a><br><a data-href="3.4 动态音频" href="sillytavern/3-扩展功能/3.4-动态音频.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.4 动态音频</a><br><a data-href="3.5 EmulatorJS" href="sillytavern/3-扩展功能/3.5-emulatorjs.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.5 EmulatorJS</a><br><a data-href="3.6 表情图像（头像）" href="sillytavern/3-扩展功能/3.6-表情图像（头像）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.6 表情图像（头像）</a><br><a data-href="3.7 图像描述" href="sillytavern/3-扩展功能/3.7-图像描述.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.7 图像描述</a><br><a data-href="3.8 图像生成" href="sillytavern/3-扩展功能/3.8-图像生成.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.8 图像生成</a><br><a data-href="3.9 Live2D" href="sillytavern/3-扩展功能/3.9-live2d.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.9 Live2D</a><br><a data-href="3.10 目标功能" href="sillytavern/3-扩展功能/3.10-目标功能.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.10 目标功能</a><br><a data-href="3.11 基于检索的语音转换 (RVC)" href="sillytavern/3-扩展功能/3.11-基于检索的语音转换-(rvc).html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.11 基于检索的语音转换 (RVC)</a><br><a data-href="3.12 语音识别" href="sillytavern/3-扩展功能/3.12-语音识别.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.12 语音识别</a><br><a data-href="3.13 总结（Summarize）" href="sillytavern/3-扩展功能/3.13-总结（summarize）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.13 总结（Summarize）</a><br><a data-href="3.14 文本转语音 (TTS)" href="sillytavern/3-扩展功能/3.14-文本转语音-(tts).html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.14 文本转语音 (TTS)</a><br><a data-href="3.15 AllTalk TTS V2" href="sillytavern/3-扩展功能/3.15-alltalk-tts-v2.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.15 AllTalk TTS V2</a><br><a data-href="3.16 XTTS 语音克隆" href="sillytavern/3-扩展功能/3.16-xtts-语音克隆.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.16 XTTS 语音克隆</a><br><a data-href="3.17 VRM" href="sillytavern/3-扩展功能/3.17-vrm.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.17 VRM</a><br><a data-href="3.18 网页搜索" href="sillytavern/3-扩展功能/3.18-网页搜索.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.18 网页搜索</a><br><a data-href="3.19 Extras" href="sillytavern/3-扩展功能/3.19-extras.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.19 Extras</a>]]></description><link>sillytavern/3-扩展功能/3-扩展功能.html</link><guid isPermaLink="false">SillyTavern/3-扩展功能/3 扩展功能.md</guid><pubDate>Sun, 22 Dec 2024 14:56:45 GMT</pubDate></item><item><title><![CDATA[2.9.4 标签]]></title><description><![CDATA[角色卡和分组可以分配零个或多个标签。它们有助于根据主题、质量、来源等快速整理不断增长的集合。有几种方式可以为角色卡添加或移除标签：
在导入时导入嵌入式标签。
从角色管理面板中打开角色卡，您可以为角色卡分配标签。
批量标签。
要进行批量标签操作，点击“批量编辑角色”按钮（铅笔图标），选择要标签化的卡片，右键点击其中任何一张，然后在上下文菜单中点击“标签”。请注意，分组无法进行批量标签操作。在此界面中，您可以：
使用下拉框添加或移除标签。
从选定的卡片中移除所有标签（“全部”）。
从选定的卡片中移除所有选定卡片之间共有的标签（“交集”）。
导入（本地创建）所有存储在角色卡中的标签，以防您已导入它（“导入所有”）。
导入（本地创建）与角色卡中存储的标签名称匹配的标签（“导入现有”）。
要查看和管理所有现有标签，打开角色管理面板，然后点击“管理标签”按钮（齿轮图标）。您可以使用右上角的按钮备份和恢复所有信息（标签列表、标签分配给卡片的设置、颜色、文件夹设置等）。您可以使用左侧的抓取按钮重新排序标签，因为它们将在角色管理中的标签过滤器中按顺序显示。标签备份 JSON 文件仅用于您的实例，包含特定于您的实例的信息（如内部实体名称），因此不应与他人共享！当从下载的图像（或通过“从外部 URL 导入内容”按钮）导入外部角色卡时，系统会提示您是否导入其中包含的标签。这些标签不是卡片功能所必需的；标签仅用于组织。嵌入的角色卡标签存储在角色编辑器的“高级定义”菜单中的“创作者的元数据”部分。如果您希望向其他用户提议一些标签供他们在导入角色时使用，请在“嵌入标签”字段中填写一个以逗号分隔的标签列表。此弹窗仅在用户设置中的“导入角色卡标签”选项设置为“询问”时显示。在“导入 CHARACTER NAME 标签”弹窗中，您将看到两个标签列表：
现有标签（您已经本地拥有的匹配名称标签）
新标签（您没有本地存在的标签）
您可以选择：
修剪列表后点击“导入”——剩余的现有标签将被添加到导入的角色卡中，剩余的新标签将被本地创建并添加到卡片中。
点击“导入无”以忽略角色卡中的标签，只导入角色卡本身。
点击“导入所有”作为快捷方式，导入角色卡中找到的所有标签（注意：包括您修剪后的标签；如果需要，可以使用“导入”按钮）。
点击“导入现有”作为快捷方式，仅导入本地存在的匹配名称标签。
在创建标签后，您会看到它们出现在角色管理面板的一行中。您可以点击这些标签来切换标签过滤状态，操作顺序如下：
一次点击将显示带有该标签的卡片。
再次点击将只显示没有该标签的卡片。
再次点击将重置通过此标签进行的过滤。
您可以同时使用多个标签进行过滤。要使用此功能，首先需要在用户设置中启用该功能，位于 UI 主题列下。此切换的状态也会随 UI 主题保存。在“管理标签”按钮（齿轮图标）中，每个标签条目都有一个多状态切换按钮，用于切换标签作为文件夹的模式（在代码中称为“虚拟文件夹”）：
一次点击将此标签转换为“打开的文件夹”。它将作为一个虚拟条目出现在卡片列表中；点击它将仅显示带有该标签的卡片。
再次点击将此标签转换为“关闭的文件夹”。与上面相同，但带有此标签的卡片默认不会出现——您需要点击文件夹才能看到它们。
再次点击将重置该标签的文件夹状态。
]]></description><link>sillytavern/2-使用指南/2.9.4-标签.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9.4 标签.md</guid><pubDate>Sun, 22 Dec 2024 14:56:45 GMT</pubDate></item><item><title><![CDATA[2.9.3 群聊]]></title><description><![CDATA[决定群聊中角色回复的顺序。您可以手动从菜单中选择要回复的角色，或使用 /trigger 命令。选中的群聊成员将是唯一进行回复的人。用户的消息不会自动触发任何回复。触发生成时，如果用户输入为空，将随机选中一个未静音的群聊成员进行回复。尝试模拟真实人类对话的流动。算法如下： 从聊天中的最后一条消息中提取出群聊成员名字的提及。
只有完整的单词才会被识别为提及！如果角色的名字是 "御坂美琴"，她只会对 "御坂" 或 "美琴" 作出回复，而不会对 "美佐"、"电击女" 等作出回复。
除非启用了 "允许自我回复" 设置，否则角色不会对自己在消息中的提及做出回复！ 根据 "话多指数" 激活角色。
话多指数决定了如果角色没有被提及，他们回复的频率。您可以在 "高级定义" 页面中调整该值。滑块的值是一个线性范围，从 0% / 害羞（角色除非被提及，否则从不讲话）到 100% / 喋喋不休（角色总是回复）。新角色的默认值为 50% 的概率。 随机选中一个角色。
如果前两步没有激活任何角色，则随机选中一个说话者，忽略其他条件。 角色根据它们在群成员列表中的顺序被挑选。没有其他规则适用。该设置决定如何处理群聊成员的角色信息。无论选择哪种模式，群聊历史总是会在所有成员之间共享。默认模式。每次生成消息时，只有当前活跃说话者的角色卡片信息会被包含在上下文中。所有群聊成员的信息会按他们在列表中的顺序合并成一个整体提示词。这在需要避免大范围更改上下文时尤其有用，例如在 llama.cpp 提示缓存的情况下。此模式有两个子模式（您必须选择其中一个）：
包含静音成员：即使是静音的角色，也会始终被包含在合并后的提示词中。
排除静音成员：如果某个角色不是当前说话者，那么该角色不会被包含在合并后的提示词中。
以下字段将会合并：
描述
场景，如果没有覆盖
性格
消息示例
角色备注 / 深度提示词
重要！ 请注意，由于典型的角色卡片结构，使用此模式可能会导致意外行为，包括但不限于：角色对自己产生混淆、人格融合、特征不明确等问题。当选择“合并角色卡片”时，所有角色的相关字段会合并在一起。这意味着在生成的提示词中，所有角色描述会合并成一个大块文本。如果希望这些字段被分开，您可以定义前缀和/或后缀。这些选项支持常规宏，并且会用相关角色的名称替换 {{char}}，用字段名称替换 &lt;FIELDNAME&gt;（例如：描述、性格、场景等）。群聊菜单中角色头像旁边的删除线气泡图标可以禁用或启用某个特定角色的回复。群聊菜单中角色头像旁的气泡图标将只触发某个特定角色的回复，绕过回复顺序策略。即使该角色被静音，此功能也会有效。启用自动模式后，群聊将遵循回复顺序并触发消息生成，无需用户交互。每次生成的自动模式回合将在最后一位角色发送消息后的 5 秒延迟后触发。当用户开始输入消息时，自动模式将被禁用，但已经排队的生成不会自动停止。如果启用此选项，在自然顺序下，角色在最新一轮对话中被提及时，会允许该角色连续回复。如果没有启用该选项，则该规则对列表顺序不起作用。所有群聊成员将使用输入的场景文本，而不是角色卡片中指定的内容。分支聊天会继承父级的场景覆盖，之后可以单独修改。点击群聊菜单中角色头像旁的角色卡片图标，将快速跳转到常规角色定义页面。任何在此页面所做的更改将会保存到该角色卡片。若要返回群聊，点击群聊名称标题链接。您可以添加、删除、静音或重新排序群聊中的现有角色。默认情况下，新增成员会添加到群成员列表的顶部，之后可以使用箭头图标重新排序。通过点击群聊菜单中“当前成员”字段旁的图标，可以启用群聊菜单的弹出窗口。启用用户设置中的 "移动 UI" 后，此菜单可以被调整大小并拖动到界面中的任何位置，功能与常规群聊菜单相同。]]></description><link>sillytavern/2-使用指南/2.9.3-群聊.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9.3 群聊.md</guid><pubDate>Sun, 22 Dec 2024 14:56:44 GMT</pubDate></item><item><title><![CDATA[2.9.2 聊天文件管理]]></title><description><![CDATA[本页面描述了如何管理您的 AI 聊天文件。提示：其中一些选项可以在左下角选项菜单中打开的“管理聊天文件”对话框中找到。使用角色卡的最简单方式是进行单人聊天；只需点击角色卡并开始聊天。一旦您拥有多个角色卡，您还可以使用“创建新聊天组”按钮，创建一个包含多个角色的<a data-href="2.9.3 群聊" href="sillytavern/2-使用指南/2.9.3-群聊.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.3 群聊</a>，这些角色将与您互动。<br>将 <a data-tooltip-position="top" aria-label="http://character.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="http://character.ai/" target="_self">Character.AI</a> 的聊天和机器人导入 SillyTavern。<br>要导入 <a data-tooltip-position="top" aria-label="http://character.ai/" rel="noopener nofollow" class="external-link is-unresolved" href="http://character.ai/" target="_self">Character.AI</a> 的聊天记录和机器人，可以使用 CAI Tools 浏览器扩展：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/irsat000/CAI-Tools" target="_self">https://github.com/irsat000/CAI-Tools</a>。其他可以导入聊天的程序和工具包括：
<br>TavernAI（原版）：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/TavernAI/TavernAI" target="_self">https://github.com/TavernAI/TavernAI</a>
<br>文本补全 WebUI（oobabooga）：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/oobabooga/text-generation-webui" target="_self">https://github.com/oobabooga/text-generation-webui</a>
<br>Agnai：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/agnaistic/agnai" target="_self">https://github.com/agnaistic/agnai</a>
点击“管理聊天文件”时，每个聊天文件列表项旁边都会有一个按钮，可以将其导出为一个格式，这样可以重新导入，并保留所有元数据（但不包括图片和文件附件）。如果您关注隐私，确保检查导出的 JSONL 文件，并删除任何不想分享的内容。您还可以通过点击“将聊天导出为纯文本文件”按钮，导出一个简化版的文本版本。此版本无法重新导入，因为它丢失了重要的元数据！“检查点”是当前聊天的克隆，它会复制给定聊天的所有消息，并存储指向源聊天的链接（通过聊天文件名）。从每条聊天消息右侧的三个点按钮，您有两种创建检查点的方式：
“创建分支”会将当前聊天克隆到该消息，并切换到它
“创建检查点”会将当前聊天克隆到该消息，要求您输入名称并创建它，但不会切换到它
您可以将它们想象成类似于浏览器中的“在新标签页中打开链接”和“在后台标签页中打开链接”。您可以通过进入消息框左侧的汉堡菜单按钮，然后点击“返回父聊天”来从检查点返回父聊天。默认情况下，聊天文件会根据其开始的日期和时间命名。您可以通过点击铅笔图标并输入新名称来更改此名称。请注意，这将打破通过检查点链接到该聊天的链接（因为它们是通过聊天文件名进行链接的）。]]></description><link>sillytavern/2-使用指南/2.9.2-聊天文件管理.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9.2 聊天文件管理.md</guid><pubDate>Sun, 22 Dec 2024 14:56:44 GMT</pubDate></item><item><title><![CDATA[2 使用指南]]></title><description><![CDATA[根据自己的需求与 AI 互动。构建你的世界、工作或梦想。发送你的第一个消息给 AI，获取响应<a data-href="2.1 快速入门" href="sillytavern/2-使用指南/2.1-快速入门.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.1 快速入门</a>如何与 AI 聊天以及使用聊天界面<br><a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a>有关 SillyTavern、AI 模型、创建角色、获得更好响应等的常见问题解答<br><a data-href="2.2 常见问题" href="sillytavern/2-使用指南/2.2-常见问题.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.2 常见问题</a><br><a data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5 API 连接</a>连接 AI 模型以生成文本、图像等角色 和 人格创建并使用角色来塑造 AI 的角色，使用人格来定义你的身份响应配置 和 提示词控制发送给 AI 的请求以及其响应方式世界信息管理信息并在提示中插入数据存储存储并检索信息，以便在 AI 响应中使用扩展功能为 AI 或界面添加新功能和能力开发与自动化自动化任务，让 AI 与世界互动，并编写你自己的扩展功能响应配置 和 提示词管理器控制文本生成和采样。自定义聊天完成 API 的提示构建。API 连接连接 AI 模型以生成文本、图像等高级格式化自定义文本完成 API 的提示构建世界信息管理信息并在提示中插入用户设置更改主题、消息和聊天的外观与感觉背景设置更改背景图片扩展功能为 AI 或界面添加新功能和能力人格创建并管理 AI 使用的人格角色创建并管理 AI 使用的角色<br><a data-href="2.1 快速入门" href="sillytavern/2-使用指南/2.1-快速入门.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.1 快速入门</a><br><a data-href="2.2 常见问题" href="sillytavern/2-使用指南/2.2-常见问题.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.2 常见问题</a><br><a data-href="2.3 聊天指南" href="sillytavern/2-使用指南/2.3-聊天指南.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.3 聊天指南</a><br><a data-href="2.4 通用设置" href="sillytavern/2-使用指南/2.4-通用设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.4 通用设置</a><br><a data-href="2.5 API 连接" href="sillytavern/2-使用指南/2.5-api-连接.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.5 API 连接</a><br><a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a><br><a data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.7 世界书（World Info）</a><br><a data-href="2.8 用户设置" href="sillytavern/2-使用指南/2.8-用户设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.8 用户设置</a><br><a data-href="2.9 角色设置" href="sillytavern/2-使用指南/2.9-角色设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9 角色设置</a>]]></description><link>sillytavern/2-使用指南/2-使用指南.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2 使用指南.md</guid><pubDate>Sun, 22 Dec 2024 14:56:44 GMT</pubDate></item><item><title><![CDATA[2.9.6 数据库（RAG）]]></title><description><![CDATA[检索增强生成（RAG）是一种为大型语言模型（LLM）提供外部知识源的技术。通过访问模型训练数据之外的信息，它有助于提高 AI 回答的准确性。SillyTavern 提供了一套用于构建多功能知识库的工具，支持从多个来源收集数据，并在 LLM 提示词（prompt）中使用这些数据。内置的“聊天附件”扩展（在 1.12.0 及以上版本中默认提供）为“魔法棒”菜单新增了“数据库”选项。这是你管理用于 RAG 的文档的中心。数据库存储文件附件，也称为文档。文档分为三种可用范围。
全局附件 - 可在每个聊天中使用，无论是单聊还是群聊。
角色附件 - 仅适用于当前选择的角色，包括角色在群聊中的回复。附件保存在本地，不会与角色卡导出！
聊天附件 - 仅在当前打开的聊天中可用，聊天中的每个角色都可以使用它。
虽然不正式作为数据库的一部分，但你也可以将文件附加到单独的消息中。使用“魔法棒”菜单中的“附加文件”选项，或者在消息操作行中的回形针图标。几乎任何可以用纯文本表示的内容都可以作为文档。例如，但不限于：
本地文件（书籍、科研论文等）
网页（维基百科、文章、新闻等）
视频转录文本
不同的扩展和插件也可以提供收集和处理数据的新方式，具体信息如下。要将文档添加到任何范围，请点击“添加”并选择一个可用的数据源。创建一个文本文件或编辑现有附件。从电脑硬盘上传文件，SillyTavern 提供了针对常见文件格式的内置转换器：
PDF（仅文本）
HTML
Markdown
ePUB
TXT
你也可以上传任何带有非标准扩展名的文本文件，如 JSON、YAML、源代码等。如果所选文件类型无法进行已知的转换，并且该文件无法解析为纯文本文档，上传将被拒绝，意味着不允许上传原始二进制文件。导入 Microsoft Office（DOCX、PPTX、XLSX）和 LibreOffice 文档（ODT、ODP、ODS）需要安装<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Office-Parser" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Office-Parser" target="_self">服务器插件</a>。有关安装说明，请参阅插件的 README 页面。<br>通过 URL 抓取网页文本。HTML 文档会通过<a data-tooltip-position="top" aria-label="https://github.com/mozilla/readability" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mozilla/readability" target="_self">Readability</a>库处理，提取出可用的文本内容。一些网页服务器可能会拒绝抓取请求，或者通过 Cloudflare 保护，或者依赖大量 JavaScript 才能正常运行。如果你遇到某个网站的问题，可以通过浏览器手动下载页面，然后使用文件上传器上传。通过 YouTube 视频的 ID 或 URL 下载视频的转录文本，可以是创作者上传的转录，或者是 Google 自动生成的。有些视频可能会禁用转录功能，也无法解析年龄限制的视频，因为这需要登录。该脚本将加载视频的默认语言。如果需要，也可以指定两字母语言代码，尝试以特定语言获取转录。这项功能并非总是可用，因此需要谨慎使用。<br>此数据源需要安装并正确配置<a data-href="3.18 网页搜索" href="sillytavern/3-扩展功能/3.18-网页搜索.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.18 网页搜索</a>扩展。请查看链接页面了解更多详情。执行网络搜索并下载搜索结果页面的文本。与网页源类似，但它是完全自动化的。选定的搜索引擎将从扩展设置中继承，因此请提前设置。首先，指定搜索查询、访问链接的最大数量和输出类型：可以是一个合并的文件（根据扩展规则格式化），或者每个页面单独一个文件。你还可以选择保存页面的摘要。<br>此数据源需要安装<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Fandom-Scraper" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Fandom-Scraper" target="_self">服务器插件</a>。有关安装说明，请参阅插件的 README 页面。通过 Fandom 维基的 ID 或 URL 抓取文章。由于某些维基非常庞大，可能需要通过正则表达式来限制范围，这将会在文章标题中进行测试。如果没有提供过滤器，则所有页面都会被导出。你可以选择将它们作为单个文档保存，或者将每个页面保存为单独的文件。<br>此数据源来自第三方，与 SillyTavern 团队无关。此数据源需要安装 Bronya Rand 的<a data-tooltip-position="top" aria-label="https://github.com/Bronya-Rand/Bronie-Parser-Extension" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Bronya-Rand/Bronie-Parser-Extension" target="_self">Bronie 解析器扩展</a>以及支持该解析器的服务器插件。<br>Bronya Rand 的 Bronie 解析器扩展允许在 SillyTavern 中使用第三方抓取工具，如 miHoYo/HoYoverse 的<a data-tooltip-position="top" aria-label="https://wiki.hoyolab.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://wiki.hoyolab.com/" target="_self">HoYoLab</a>，与其他数据源类似。目前，Bronya Rand 的 Bronie 解析器扩展支持以下工具：
<br>miHoYo/HoYoverse 的 HoYoLab（用于《原神》/《崩坏：星穹铁道》），通过<a data-tooltip-position="top" aria-label="https://github.com/Bronya-Rand/HoYoWiki-Scraper-TS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Bronya-Rand/HoYoWiki-Scraper-TS" target="_self">HoYoWiki-Scraper-TS</a>
<br>要开始使用，请按照<a data-tooltip-position="top" aria-label="https://github.com/Bronya-Rand/Bronie-Parser-Extension?tab=readme-ov-file#installation" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Bronya-Rand/Bronie-Parser-Extension?tab=readme-ov-file#installation" target="_self">安装指南</a>安装 Bronya Rand 的 Bronie 解析器扩展，并将支持的服务器插件安装到 SillyTavern。重启 SillyTavern 后，进入数据库菜单，点击“+添加”，你应该可以看到最近安装的抓取工具出现在可用数据源列表中。现在，你已经建立了一个丰富的特定主题信息库，接下来该做什么呢？要使用文档进行 RAG，你需要使用一个兼容的扩展，它会将相关数据插入 LLM 提示词（prompt）中。向量存储是 SillyTavern 的一个参考实现扩展。它使用嵌入（也叫向量）来查找与当前聊天相关的文档。Important 嵌入是数字数组，抽象地表示一段文本，是由专门的语言模型生成的。相似的文本会在它们的向量之间有较短的距离。
<br>向量存储扩展使用<a data-tooltip-position="top" aria-label="https://github.com/Stevenic/vectra" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Stevenic/vectra" target="_self">Vectra</a>库来追踪文件嵌入。它们以 JSON 文件的形式存储在你用户数据目录的/vectors文件夹中。每个文档都会以自己的索引/集合文件形式存在。 由于向量功能默认是禁用的，你需要打开扩展面板（顶部栏的“叠加立方体”图标），然后进入“向量存储”部分，勾选“启用文件向量化”复选框。仅凭自己，向量存储不会生成任何向量，你需要使用兼容的嵌入提供者。这些来源是免费的且无限制的，使用你的 CPU/GPU 计算嵌入。
<br>本地（Transformers） - 在一个 Node 服务器上运行。SillyTavern 会自动从 HuggingFace 下载兼容的 ONNX 格式模型。默认模型：<a data-tooltip-position="top" aria-label="https://huggingface.co/Cohee/jina-embeddings-v2-base-en" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/Cohee/jina-embeddings-v2-base-en" target="_self">jina-embeddings-v2-base-en</a>。
<br>Extras - 在<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-extras" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-extras" target="_self">Extras API</a>下运行，使用 SentenceTransformers 加载器。默认模型：<a data-tooltip-position="top" aria-label="https://huggingface.co/sentence-transformers/all-mpnet-base-v2" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/sentence-transformers/all-mpnet-base-v2" target="_self">all-mpnet-base-v2</a>。
<br>Ollama - 从<a rel="noopener nofollow" class="external-link is-unresolved" href="https://ollama.com/" target="_self">https://ollama.com/</a>下载。首先设置 API URL（默认：<a data-tooltip-position="top" aria-label="http://localhost:11434/" rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:11434/" target="_self">http://localhost:11434</a>），然后下载兼容的模型，设置其名称。示例模型：<a data-tooltip-position="top" aria-label="https://ollama.com/library/mxbai-embed-large" rel="noopener nofollow" class="external-link is-unresolved" href="https://ollama.com/library/mxbai-embed-large" target="_self">mxbai-embed-large</a>。可以选择将模型加载到内存中。
<br>llama.cpp 服务器 - 从<a data-tooltip-position="top" aria-label="https://github.com/ggerganov/llama.cpp" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/ggerganov/llama.cpp" target="_self">ggerganov/llama.cpp</a>下载并运行带有-embedding标志的服务器执行文件。从 HuggingFace 加载兼容的 GGUF 嵌入模型，例如<a data-tooltip-position="top" aria-label="https://huggingface.co/nomic-ai/nomic-embed-text-v1.5-GGUF" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/nomic-ai/nomic-embed-text-v1.5-GGUF" target="_self">nomic-ai/nomic-embed-text-v1.5-GGUF</a>。
<br>vLLM - 从<a data-tooltip-position="top" aria-label="https://github.com/vllm-project/vllm" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/vllm-project/vllm" target="_self">vllm-project/vllm</a>下载。首先设置 API URL 和 API 密钥。
所有这些来源都需要相应服务的 API 密钥，并且通常会有使用费用，但一般来说，计算嵌入的费用非常便宜。
OpenAI
Cohere
Google MakerSuite
TogetherAI
MistralAI
NomicAI
只有在使用与生成嵌入相同的模型时，才能使用这些嵌入。当更换嵌入模型或来源时，建议清除并重新计算文件向量。在选择了嵌入提供者之后，别忘了配置其他设置，它们将定义处理和检索文档的规则。文件的分割、向量化和信息检索需要一些时间。虽然文件的初步处理可能会花费一些时间，但 RAG 搜索查询通常足够快速，不会造成显著的延迟。这些设置控制直接附加到消息中的文件。以下规则适用：
只有符合 LLM 上下文窗口大小的消息才能检索其附件。
当向量存储扩展禁用时，文件附件及其附带的消息会完全插入提示词中。
当启用文件向量化时，文件将被分割成块，只有最相关的部分会被检索并插入，从而节省上下文空间，使模型保持专注。 大小阈值（KB） - 设置分块分割的阈值，只有大于指定大小的文件才会被分割。
块大小（字符） - 设置单个块的目标大小（以字符为单位，不是模型标记！）。
块重叠（%） - 设置块大小的百分比，表示相邻块之间将共享的部分。这允许块之间有更平滑的过渡，但也可能引入一些冗余。
检索块数 - 设置将检索的最相关文件块的最大数量。它们将按原始顺序插入。
这些设置控制如何处理数据库中的文档。以下规则适用：
当文件向量化禁用时，数据库将不会被使用。
否则，所有当前范围内的可用文档（见上文）都将被用于查询。仅检索最相关的块。来自同一文件的多个块将按原始顺序插入。
插入的块将在插入聊天消息之前保留一部分上下文。 大小阈值（KB） - 设置分块分割的阈值，只有大于指定大小的文件才会被分割。
块大小（字符） - 设置单个块的目标大小（以字符为单位，不是模型标记！）。
块重叠（%） - 设置块大小的百分比，表示相邻块之间将共享的部分。
检索块数 - 设置将检索的文件块的最大数量。这个数量在所有文件之间共享。
插入模板 - 定义如何将检索到的信息插入提示词。你可以使用{{text}}宏指定检索文本的位置，也可以使用其他宏。
插入位置 - 设置插入提示词的位置。与“作者注释”和“世界书”相同的规则适用。 查询消息 - 将用于查询文档块的最新聊天消息的数量。
分数阈值 - 调整此值以根据相关性分数裁剪检索的块（0 表示完全不匹配，1 表示完美匹配）。较高的值可以提供更准确的检索，并防止完全随机的信息进入上下文。合理的值在 0.2（松散）到 0.5（聚焦）之间。
在世界书扫描中包含 - 勾选此项表示插入的内容将触发世界书条目的激活。
向量化全部 - 强制对所有未处理的文件进行嵌入。
清除向量 - 清除文件的嵌入，允许重新计算它们的向量。
<br>有关“聊天向量化”设置，请参见<a data-href="3.3 聊天向量化" href="sillytavern/3-扩展功能/3.3-聊天向量化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.3 聊天向量化</a>。恭喜你！你的聊天体验现在通过 RAG 得到了增强。它的能力只受到你想象力的限制。像往常一样，不要害怕尝试！]]></description><link>sillytavern/2-使用指南/2.9.6-数据库（rag）.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9.6 数据库（RAG）.md</guid><pubDate>Sun, 22 Dec 2024 14:56:42 GMT</pubDate></item><item><title><![CDATA[2.9 角色设置]]></title><description><![CDATA[角色是您可以创建和管理的 AI 身份，用于塑造 AI 在对话中的角色。每个角色都有名称、个性和对话历史。您可以创建任意多个角色，并随时在它们之间切换。角色可以在单独的对话中使用，也可以将多个角色添加到群聊中，让它们互相互动。从导航栏中打开 角色 面板以访问角色列表。点击一个角色或群组与其对话或编辑，或者选择 创建新角色 来添加一个新角色。
固定面板：在互动时保持面板打开
角色列表：返回角色列表视图
快捷栏：快速访问最喜爱的角色 创建新角色：添加新角色
导入角色：从文件加载角色
外部导入：从 URL 导入
创建群组：启动一个新群聊 搜索框：根据名称或属性筛选角色
排序下拉菜单：多种排序方式： 字母顺序（A-Z，Z-A）
时间顺序（最新，最旧）
使用频率（最近，最多/最少对话）
基于大小（最多/最少令牌数）
特殊排序（收藏，随机） 收藏夹筛选：显示收藏角色
群组筛选：仅显示群聊
标签文件夹：按标签层次结构组织
管理标签：<a data-href="2.9.4 标签" href="sillytavern/2-使用指南/2.9.4-标签.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.4 标签</a>
标签列表：查看所有可用标签
清除筛选：重置所有筛选条件 头像图片：上传并预览角色头像
<br>令牌数量：<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>统计
统计：对话历史和使用统计
<br><a data-href="2.9.4 标签" href="sillytavern/2-使用指南/2.9.4-标签.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.4 标签</a> 收藏切换
高级定义
角色背景
<br>对话背景：链接到<a data-href="2.7 世界书（World Info）" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.7 世界书（World Info）</a>
导出角色
复制
删除 世界书链接
卡片背景导入
场景覆盖
个性转换
角色重命名
来源链接
替换/更新
标签导入
画廊视图 角色描述：简要的角色总结
首次消息：开始新对话时的问候或提示
替代问候语：定义多个首次消息，您可以在开始对话时进行切换
点击 高级定义 按钮以访问角色的扩展设置。
<br>主要提示词：替代默认的<a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a>，可以使用 {{original}} 占位符包含原始提示词
<br>历史后置指令：覆盖默认的<a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a>
关于角色的非提示词信息：
创建者姓名/联系方式
角色版本
创建者笔记
嵌入的标签列表 个性总结：角色性格的简要概述
场景：对话的上下文和环境
<br>角色的备注：可自定义的消息，具有可选择的深度和消息角色（也见<a data-href="2.9.5 作者注释" href="sillytavern/2-使用指南/2.9.5-作者注释.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.5 作者注释</a>）
话多程度（群聊）：从害羞 → 正常 → 爱聊 的滑动条
示例消息：角色的写作风格示例
如果这是一个群聊，您可以从此面板管理群成员和设置。<br>请参阅<a data-href="2.9.3 群聊" href="sillytavern/2-使用指南/2.9.3-群聊.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.3 群聊</a>了解更多细节。<br><a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a><br><a data-href="2.9.2 聊天文件管理" href="sillytavern/2-使用指南/2.9.2-聊天文件管理.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.2 聊天文件管理</a><br><a data-href="2.9.3 群聊" href="sillytavern/2-使用指南/2.9.3-群聊.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.3 群聊</a><br><a data-href="2.9.4 标签" href="sillytavern/2-使用指南/2.9.4-标签.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.4 标签</a><br><a data-href="2.9.5 作者注释" href="sillytavern/2-使用指南/2.9.5-作者注释.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.5 作者注释</a><br><a data-href="2.9.6 数据库（RAG）" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.6 数据库（RAG）</a>]]></description><link>sillytavern/2-使用指南/2.9-角色设置.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9 角色设置.md</guid><pubDate>Sun, 22 Dec 2024 14:56:36 GMT</pubDate></item><item><title><![CDATA[2.9.1 角色设计]]></title><description><![CDATA[用于添加角色描述以及 AI 需要了解的其他信息。此部分始终存在，因此应包含所有重要的事实。例如，您可以添加有关故事发生的世界的信息，并描述角色的特点。它可以是任何长度（无论是 200 个词还是 2000 个词），并且可以采用任何格式（自由文本、W++、对话风格等）。角色格式化方法是一个复杂的话题，超出了本文档页面的范围。推荐的指南（经过测试或依赖于 SillyTavern 的功能）：
Trappu 的 PLists + Ali:Chat 指南：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://wikia.schneedc.com/bot-creation/trappu/creation" target="_self">https://wikia.schneedc.com/bot-creation/trappu/creation</a>
<br>AliCat 的 Ali:Chat 指南：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.co/alichat" target="_self">https://rentry.co/alichat</a>
<br>kingbri 的简约指南：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.co/kingbri-chara-guide" target="_self">https://rentry.co/kingbri-chara-guide</a>
简而言之：如果你使用的 AI 模型具有 2048 上下文令牌限制，那么你的 1000 个令牌的角色定义将把 AI 的“记忆”一分为二。为了让你有个直观的概念，一个良好的 AI 生成的回答通常会有 200-300 个令牌。因此，在这种情况下，AI 最多只能“记住”大约 3 次对话历史。当我们看到你的角色在定义中使用了超过模型上下文长度一半的令牌时，我们会为你突出显示，因为这可能会降低 AI 提供愉快对话的能力。不用担心——它不会破坏任何东西。最坏的情况是，如果角色的永久令牌过大，它只意味着上下文中剩余的空间会更少（参见下面）。唯一的负面影响是，AI 将拥有更少的“记忆”，因为它能够处理的对话历史会减少。这是因为每个 AI 模型都有一个处理上下文的限制。这就是每次请求生成回复时发送给 AI 的信息：
角色定义
对话历史
作者注释
特殊格式字符串
[括号命令]
SillyTavern 会自动计算出最佳方式，利用可用的上下文令牌来发送信息给 AI 模型。这些会在每次生成请求时随角色一起发送给 AI：
角色名称（保持名称简短！每次角色消息开始时都会发送）
角色描述框
角色个性框
场景框 第一个消息框——只会在聊天开始时发送一次。
示例消息框——只会保留到对话历史填满上下文为止（这些消息可以选择性地保持在上下文中）。 LLaMA 3 及其微调 - 8192
OpenAI GPT-4 - 最多 128k
Anthropic 的 Claude - 200k（Claude 3）或 100k（Claude 2）
NovelAI - 8192（Erato 和 Kayra，Opus 层；Clio，所有层），6144（Kayra，Scroll 层），或 3072（Kayra，Tablet 层）
简短的个性描述。示例：
开朗、狡猾、挑衅
Aqua喜欢什么都不做，也喜欢喝醉
第一条消息是一个非常重要的部分，它设定了角色将如何以什么风格进行交流。角色的第一条消息应该较长，这样之后角色就不太可能回复简短的消息。你还可以使用星号 ** 来描述角色的动作。例如：
我注意到你走了进来，我走上前站在你面前* 欢迎。很高兴看到你来。*我带着一丝得意的微笑看着你，直视着你的眼睛* 你来是为了什么…
此列表可能不完整或已过时。请在任何 SillyTavern 对话中使用**/help macros**命令以获取在您的实例中可用的宏列表。注意：某些扩展可能还会添加一些特定上下文的特殊宏，这些宏仅在特定地方有效。它们将不会在此处记录。以下是当发送提示词以生成响应时，会被替换的宏列表：
{{pipe}} =&gt; 仅用于斜杠命令批处理。被前一个命令返回的结果替换。
{{newline}} =&gt; 仅插入一个换行符。
{{trim}} =&gt; 修剪此宏周围的换行符。
{{noop}} =&gt; 不执行任何操作，仅返回空字符串。
{{user}} 和 =&gt; 用户的名称。
{{charPrompt}} =&gt; 角色的主提示词覆盖。
{{charJailbreak}} =&gt; 角色的历史后提示词覆盖。
{{char}} 和 =&gt; 角色的名称。
{{description}} =&gt; 角色的描述。
{{scenario}} =&gt; 角色的场景或聊天场景覆盖（如果设置）。
{{personality}} =&gt; 角色的个性。
{{persona}} =&gt; 用户的个性描述。
{{mesExamples}} =&gt; 角色的对话示例（未经修改和拆分）。
{{char_version}} =&gt; 角色的版本号。
{{model}} =&gt; 当前选择的文本生成模型名称。可能不准确！
{{lastMessageId}} =&gt; 上一条聊天消息的 ID。
{{lastMessage}} =&gt; 上一条聊天消息的文本。
{{firstIncludedMessageId}} =&gt; 当前会话中包含的第一条消息的 ID。需要至少运行一次生成才能使用。
{{lastCharMessage}} =&gt; 角色发送的最后一条聊天消息。
{{lastUserMessage}} =&gt; 用户发送的最后一条聊天消息。
{{currentSwipeId}} =&gt; 当前显示的最后一条消息的 swipe ID（从 1 开始）。
{{lastSwipeId}} =&gt; 最后一条聊天消息的 swipe 数量。
{{original}} 可以在提示词覆盖字段（主提示词和历史后提示词）中使用，以包含系统设置中的默认提示。仅适用于聊天完成 API 和指令模式。
{{time}} =&gt; 当前系统时间。
{{time_UTC±X}} =&gt; 当前指定 UTC 偏移的时间（时区），例如对于 UTC+02:00 使用 {{time_UTC+2}}。
{{timeDiff::(time1)::(time2)}} =&gt; time1 和 time2 之间的时间差。接受时间和日期宏。
{{date}} =&gt; 当前系统日期。
{{input}} =&gt; 用户输入栏的内容。
{{weekday}} =&gt; 当前星期几。
{{isotime}} =&gt; 当前 ISO 时间（24 小时制）。
{{isodate}} =&gt; 当前 ISO 日期（YYYY-MM-DD）。
{{idle_duration}} 插入自上次用户消息以来的持续时间的自然语言字符串（例如：4 小时，1 天）。
{{random:(args)}} 返回列表中的随机项。（例如 {{random:1,2,3,4}} 会随机返回四个数字中的一个）。也支持文本列表。
{{random::arg1::arg2}} =&gt; 随机的备用语法，支持在参数中使用逗号。
{{pick::(args)}} =&gt; 与random类似，但在当前对话中，若源字符串未改变，选定的参数在随后的评估中会保持稳定。
{{roll:(formula)}} =&gt; 使用 D&amp;D 骰子语法（XdY+Z）生成随机值，并返回相应的值。例如，{{roll:d6}} 会生成一个 1 到 6 范围内的随机值（标准六面骰）。
{{bias "text here"}} =&gt; 设置 AI 的行为偏向，直到下一次用户输入。引号内的文本非常重要。
{{// (note)}} =&gt; 留下一个笔记，替换为空内容。AI 不可见。
{{banned "text here"}} =&gt; 动态将文本添加到被禁用的词序列中（如果使用的是 Text Generation WebUI 后端）。对于其他后端不起作用。可以在任何地方使用（角色描述、WI、AN 等）。引号内的文本非常重要。
（在高级格式化设置中启用）
{{exampleSeparator}} – 上下文模板示例对话的分隔符
{{chatStart}} – 上下文模板中的聊天开始行
{{instructSystemPrompt}} – 指令系统提示词
{{instructSystemPromptPrefix}} – 系统提示词前缀序列
{{instructSystemPromptSuffix}} – 系统提示词后缀序列
{{instructUserPrefix}} – 用户消息前缀序列
{{instructAssistantPrefix}} – 助手消息前缀序列
{{instructSystemPrefix}} – 系统消息前缀序列
{{instructUserSuffix}} – 用户消息后缀序列
{{instructAssistantSuffix}} – 助手消息后缀序列
{{instructSystemSuffix}} – 系统消息后缀序列
{{instructFirstAssistantPrefix}} – 助手第一次输出序列
{{instructLastAssistantPrefix}} – 助手最后一次输出序列
{{instructSystemInstructionPrefix}} – 系统指令前缀序列
{{instructUserFiller}} – 用户填充消息文本
{{instructStop}} – 指令停止序列
{{maxPrompt}} - 提示词的最大大小（上下文长度由响应长度减少） 局部变量 = 仅对当前聊天有效
全局变量 = 在任何聊天中对任何角色有效 {{getvar::name}} – 替换为局部变量“name”的值
{{setvar::name::value}} – 替换为空字符串，将局部变量“name”设置为“value”
{{addvar::name::increment}} – 替换为空字符串，将局部变量“name”的数值增加“increment”
{{incvar::name}} – 替换为局部变量“name”的值增加 1 后的结果
{{decvar::name}} – 替换为局部变量“name”的值减少 1 后的结果
{{getglobalvar::name}} – 替换为全局变量“name”的值
{{setglobalvar::name::value}} – 替换为空字符串，将全局变量“name”设置为“value”
{{addglobalvar::name::value}} – 替换为空字符串，将全局变量“name”的数值增加“value”
{{incglobalvar::name}} – 替换为全局变量“name”的值增加 1 后的结果
{{decglobalvar::name}} – 替换为全局变量“name”的值减少 1 后的结果
]]></description><link>sillytavern/2-使用指南/2.9.1-角色设计.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.9.1 角色设计.md</guid><pubDate>Sun, 22 Dec 2024 14:56:36 GMT</pubDate></item><item><title><![CDATA[2.8.1 UI 自定义]]></title><description><![CDATA[主题文件允许您保存、共享和重用您的 UI 自定义设置。您可以为不同的心情或目的保持多个主题，并能即时切换。
导入/导出主题文件
删除现有主题
保存当前主题的更改
另存为新主题
此部分中的所有设置都会保存到当前主题中。如果切换主题，设置将被新主题的设置替代。这些显示选项会影响字符和消息在聊天界面中的呈现方式。选择圆形、方形或矩形头像。自定义每个 UI 元素的配色方案，创造您理想中的主题。您可以使用颜色选择器进行选择，并且适用的颜色选项包括透明度设置。
主文本
斜体文本
下划线文本
引用文本
文本阴影
聊天背景
UI 背景
UI 边框
用户消息
AI 消息
通过这些滑块微调界面的视觉呈现效果。
聊天宽度：调整聊天窗口宽度（占屏幕的 25%-100%）
字体缩放：自定义文本大小（0.5-1.5 倍）
模糊强度：控制 UI 面板的模糊程度（0-30）
阴影宽度：调整文本阴影的强度（0-5）
这些开关控制各种 UI 功能和行为。某些选项可以在低端设备上提高性能，而其他选项则为聊天界面增加有用的信息或功能。
减少运动：禁用动画和过渡效果
无模糊效果：移除背景模糊，以提高性能
无文本阴影：禁用文本阴影效果
<a data-tooltip-position="top" aria-label="2.8.2 视觉小说 (VN) 模式" data-href="2.8.2 视觉小说 (VN) 模式" href="sillytavern/2-使用指南/2.8.2-视觉小说-(vn)-模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">视觉小说模式</a>：紧凑的聊天界面，带背景人物
展开消息操作：始终显示完整的消息上下文菜单
极简滑块：简化参数控制
疯狂实验室模式：无限制参数范围
消息计时器：显示 AI 响应生成时间
聊天时间戳：显示消息时间戳
模型图标：显示 AI 模型图标
消息 ID：显示消息的顺序号
隐藏聊天头像：移除聊天中的头像
消息令牌计数：显示每条消息的令牌数量
紧凑输入区域：单行输入（仅限移动端）
为所有消息显示滑动编号：为所有消息显示滑动编号（仅限移动端）
角色快速切换：为最喜爱的角色提供快捷选择按钮
头像悬停放大：头像悬停时放大效果
标签作为文件夹：使用标签作为文件夹来组织角色
允许您应用自定义 CSS 样式以进一步自定义聊天界面的外观。使用展开按钮以扩展编辑器窗口，便于编辑和查看。如果您切换主题，您的自定义 CSS 将会被新主题的自定义 CSS 替代。确保将自定义 CSS 保存到一个主题中，以便在切换主题时保留。<br>如果您使用大量自定义 CSS，或者希望在多个主题之间共享相同的自定义 CSS，可以使用非官方的<a data-tooltip-position="top" aria-label="https://github.com/LenAnderson/SillyTavern-CssSnippets" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LenAnderson/SillyTavern-CssSnippets" target="_self">CSS Snippets 扩展</a>来帮助您管理和组织自定义 CSS。要在接收到新的消息时播放自定义声音，请将以下 MP3 文件替换为 SillyTavern 文件夹中的文件：public/sounds/message.mp3播放音量为 80%。<br>如果启用了<a data-tooltip-position="top" aria-label="2.8 用户设置 > 杂项" data-href="2.8 用户设置#杂项" href="sillytavern/2-使用指南/2.8-用户设置.html#杂项_0" class="internal-link" target="_self" rel="noopener nofollow">仅背景声音</a>选项，则只有当 SillyTavern 窗口未聚焦时才会播放声音。<br>要启用数学公式渲染，请使用<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/Extension-LaTeX" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/Extension-LaTeX" target="_self">LaTeX 扩展</a>。要获取该扩展，您需要通过 SillyTavern 中的“下载扩展与资产”菜单进行安装。<br>在代码块中使用latex或asciimath语言标识符编写公式，以使用 LaTeX 和 AsciiMath 渲染公式。扩展使用<a data-tooltip-position="top" aria-label="https://katex.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://katex.org/" target="_self">KaTeX</a>进行渲染。\int_{-\infty}^{\infty} e^{-x^2} dx = \sqrt{\pi}
int_{-oo}^{oo} e^{-x^2} dx = sqrt{pi}
]]></description><link>sillytavern/2-使用指南/2.8.1-ui-自定义.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.8.1 UI 自定义.md</guid><pubDate>Sun, 22 Dec 2024 14:56:36 GMT</pubDate></item><item><title><![CDATA[2.8 用户设置]]></title><description><![CDATA[<a data-tooltip-position="top" aria-label="2.8.1 UI 自定义" data-href="2.8.1 UI 自定义" href="sillytavern/2-使用指南/2.8.1-ui-自定义.html#_0" class="internal-link" target="_self" rel="noopener nofollow">UI 自定义</a>
更改聊天界面的主题、外观和风格，以符合您的个人偏好。
<br><a data-tooltip-position="top" aria-label="2.8.2 视觉小说 (VN) 模式" data-href="2.8.2 视觉小说 (VN) 模式" href="sillytavern/2-使用指南/2.8.2-视觉小说-(vn)-模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">视觉小说模式</a>
与具有角色立绘的角色互动，类似于《Doki Doki Literature Club》及其他著名视觉小说游戏。
这些是影响您整体 SillyTavern 体验的核心设置。SillyTavern 的用户界面提供多种语言选项。语言选择器提供以下选项：
默认：使用您的系统语言（如果可用）
英文：强制使用英文界面，无论系统设置如何
其他语言可通过下拉菜单选择
<br>注意：此设置仅影响用户界面文本。如需进行 AI 对话翻译，请使用<a data-href="3.2 聊天翻译" href="sillytavern/3-扩展功能/3.2-聊天翻译.html#_0" class="internal-link" target="_self" rel="noopener nofollow">3.2 聊天翻译</a>扩展。您当前使用的 SillyTavern 版本显示在右上角。此信息对于以下情况非常重要：
故障排除
确保与扩展的兼容性
确定是否有更新可用
<br>要将 SillyTavern 更新到最新版本，请参考<a data-tooltip-position="top" aria-label="1.5 更新" data-href="1.5 更新" href="sillytavern/1-安装/1.5-更新.html#_0" class="internal-link" target="_self" rel="noopener nofollow">更新</a>文档。<br>管理您的 SillyTavern 用户账户，备份设置和用户数据，并在<a data-href="5.2 多用户模式" href="sillytavern/5-管理/5.2-多用户模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.2 多用户模式</a>下管理用户角色和权限。在账户对话框中，您可以查看和编辑个人资料信息、更改密码以及管理账户设置。个人资料信息
显示名称（可通过铅笔图标编辑）
<br>用户头像（也可以通过<a data-href="2.8 用户设置" href="sillytavern/2-使用指南/2.8-用户设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.8 用户设置</a>更改）
账户 ID
用户角色
账户创建日期
密码状态（锁定/解锁图标表示保护）
账户操作
设置快照：创建、管理和恢复您的用户设置备份
下载备份：导出您的所有用户数据的完整备份
更改密码：更新账户安全凭证
危险区可能会影响账户的关键操作，需谨慎使用：
重置设置：将所有设置恢复到出厂默认
重置一切：完全清除账户并恢复出厂设置
<br>适用于：<a data-href="5.2 多用户模式" href="sillytavern/5-管理/5.2-多用户模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.2 多用户模式</a>
启用enableUserAccounts设置为 true 后，可以使用多账户功能。
选择管理用户以查看和管理现有用户账户。
用户资料 自定义头像管理（上传/删除）
显示名称和账户 ID
角色和状态信息
账户创建日期
密码保护状态 账户控制 编辑显示名称
启用账户
禁用账户
提升为管理员
降级为普通用户 管理操作 下载用户数据备份
更改用户密码
删除账户 新用户
选择新用户来创建新账户。 显示名称*（例如，“John Snow”）
用户 ID*（仅限小写字母、数字和短横线）
密码（可选）
密码确认 创建新用户时，系统会自动生成一个以用户 ID 为名的子文件夹，保存在/data 目录下。<br>适用于：<a data-href="5.2 多用户模式" href="sillytavern/5-管理/5.2-多用户模式.html#_0" class="internal-link" target="_self" rel="noopener nofollow">5.2 多用户模式</a>注销当前会话。一个方便的搜索框，帮助您快速找到特定的设置：
输入任意关键字，即可筛选并高亮显示用户设置中的相关设置项
搜索包括设置名称和描述
帮助更高效地导航复杂的设置
更改聊天界面的外观，以符合您的个人偏好。<br>有关此部分设置的更多信息，请参阅<a data-tooltip-position="top" aria-label="2.8.1 UI 自定义" data-href="2.8.1 UI 自定义" href="sillytavern/2-使用指南/2.8.1-ui-自定义.html#_0" class="internal-link" target="_self" rel="noopener nofollow">UI 自定义</a>。
<br>角色列表子标题：选择在<a data-href="2.9.1 角色设计" href="sillytavern/2-使用指南/2.9.1-角色设计.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.9.1 角色设计</a>列表中显示角色名下方的附加信息： 角色版本
创建者 导入卡片标签：控制导入角色卡片时标签的处理方式： 询问 - 每次导入时显示对话框
无 - 不导入任何标签
全部 - 导入所有标签
已有 - 仅导入已存在的标签 高级角色搜索：启用后，使用模糊匹配，搜索所有角色数据字段，而不仅仅是名字。
优先使用角色提示词：启用后，优先使用角色卡片的提示词覆盖（如果有）。
优先使用角色指令：启用后，优先使用角色卡片的历史后指令覆盖（如果有）。
永不调整头像大小：防止导入的角色图像被裁剪/调整大小。禁用时，图像将调整为 512x768 大小。
显示头像文件名：在角色列表中显示角色头像的实际文件名。
剧透保护模式：在编辑面板中通过剧透按钮隐藏角色定义。 重新加载聊天：重新加载并绘制当前聊天。
<br><a data-href="2.8 用户设置" href="sillytavern/2-使用指南/2.8-用户设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.8 用户设置</a>：访问调试选项。
流畅流式传输：实验性功能，提供更平滑的文本补全。包括速度控制滑块。
<br><a data-tooltip-position="top" aria-label="2.8.1 UI 自定义 > 消息声音" data-href="2.8.1 UI 自定义#消息声音" href="sillytavern/2-使用指南/2.8.1-ui-自定义.html#消息声音_0" class="internal-link" target="_self" rel="noopener nofollow">消息声音</a>：消息生成完成时播放声音。 仅后台声音：仅在浏览器标签页未聚焦时播放声音。 宽松 API 网址：减少 API 网址的格式要求。
世界书导入对话框：在导入带有嵌入世界书的角色时显示导入对话框。
自动选择输入文本：在某些输入字段点击时自动选择文本。
Markdown 快捷键：启用 Markdown 格式化的键盘快捷键。
恢复用户输入：在页面刷新时保留未保存的用户输入。
可移动 UI：允许通过拖动重新定位 UI 元素（仅限 PC）。 重置按钮恢复默认位置。
预设系统，用于保存/加载 UI 布局。 控制消息在聊天界面中的加载和显示方式。这些设置会影响整体聊天体验和性能。
# 加载的消息数量：加载的聊天历史消息数量（0 表示加载所有消息）。
流式更新帧率：流式文本更新的速度（5-100 帧每秒）。
示例消息行为： 渐进推出
始终包含示例
永不包含示例 决定消息如何发送以及 AI 如何继续响应的设置。
回车键发送：选择禁用、自动（PC）或启用。
“发送”继续：使用发送按钮继续 AI 的回复。
快速“继续”按钮：显示按钮以扩展 AI 的最后一条消息。
快速“模拟”按钮：显示按钮进行单条消息的角色模拟。
滑动：显示箭头按钮以供选择 AI 的替代响应（PC 和移动端）。
手势：启用滑动手势来生成消息（仅限移动端）。
帮助管理聊天流程和内容的自动化功能。
自动加载最近的聊天：启动时自动加载最近的聊天记录。
自动滚动聊天：自动滚动到最新的消息。
自动保存消息编辑：无需确认即可保存消息编辑。
确认消息删除：在删除消息前显示提示。
自动修正 Markdown：自动修正 Markdown 格式错误。
基于配置标准自动拒绝并重新生成 AI 消息。
启用自动滑动：自动滑动功能的主开关。
生成消息的最小长度：如果消息的长度小于此值，则触发自动滑动。
黑名单词汇：列出可触发自动滑动的单词，多个词之间用逗号分隔。
黑名单词汇数量滑动：检测到的黑名单单词数量达到此值时触发自动滑动。
如果模型在未达到特定长度时停止响应，则自动继续响应。<br>这使得 AI 能够在多个部分中写出长回复，从而在保持较短的 <a data-tooltip-position="top" aria-label="2.4 通用设置 > 最大回复长度（Response tokens）" data-href="2.4 通用设置#最大回复长度（Response tokens）" href="sillytavern/2-使用指南/2.4-通用设置.html#最大回复长度（Response_tokens）_0" class="internal-link" target="_self" rel="noopener nofollow">响应长度设置</a> 的情况下生成长回复。<br>如果 AI 认为消息已经“完成”，通常不会请求其继续写作。请参见<a data-tooltip-position="top" aria-label="2.2 常见问题 > 如何让AI写更多内容？" data-href="2.2 常见问题#如何让AI写更多内容？" href="sillytavern/2-使用指南/2.2-常见问题.html#如何让AI写更多内容？_0" class="internal-link" target="_self" rel="noopener nofollow">如何让 AI 写更多？</a>了解更多建议。
启用自动继续：自动继续功能的主开关。
允许使用聊天补全 API：启用自动继续功能，适用于聊天补全 API 端点。
目标长度（令牌）：所需的消息长度（令牌），如果消息的长度低于此值则触发继续（0-1024）。
控制消息的格式和显示内容。
禁止外部媒体：阻止来自外部域的嵌入媒体。
在响应中显示{{char}}：在响应中保留角色名称前缀。
在响应中显示{{user}}：在响应中保留用户名称前缀。
显示标签在响应中：允许（某些）HTML 标签在响应中显示为 HTML。
放宽群聊中的消息修剪：允许 AI 为群聊中的其他角色发言，而不是停止生成响应。
显示群聊队列：在群聊中显示角色列表的响应顺序。 将提示词记录到控制台：将提示词输出到浏览器控制台。
<br>请求令牌概率：从 API 请求 AI 响应的令牌概率。在可用时，可以在<a data-tooltip-position="top" aria-label="2.3 聊天指南 > 词符概率面板" data-href="2.3 聊天指南#词符概率面板" href="sillytavern/2-使用指南/2.3-聊天指南.html#词符概率面板_0" class="internal-link" target="_self" rel="noopener nofollow">令牌概率面板</a>查看。 自动隐藏详情
匹配方式（以...开头/包含.../模糊匹配）
视觉样式（主题/暗色/亮色）
键盘选择选项
字体缩放
宽度控制
<br><a data-tooltip-position="top" aria-label="https://github.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/" target="_self">STscript 解析器</a>的配置选项。
在引号包围的值中，管道符号（|）不需要转义。
如果在符号前使用反斜杠（\），则该反斜杠用于转义符号，提供反斜杠后跟符号的字面含义。
<br>更多信息请参见<a data-tooltip-position="top" aria-label="https://github.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/" target="_self">严格转义</a>。帮助避免在变量值包含可能被解释为宏的文本时出现双重替换。<br>更多信息请参见<a data-tooltip-position="top" aria-label="https://github.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/" target="_self">替换变量宏</a>。警告：这些功能仅供高级用户使用。除非您完全了解其后果，否则请勿使用它们。调试菜单提供了故障排除、维护和开发功能。这些功能需要谨慎使用，因为它们可能会对您的 SillyTavern 安装产生重大影响。由于扩展可能会添加调试功能，因此可用的选项会根据您安装的扩展而有所不同。
获取缺失的翻译：分析当前语言环境（如果选择英语，则分析所有语言环境）中的缺失翻译，并将结果输出到浏览器控制台。
应用语言环境：通过重新应用选定的语言环境强制刷新当前的语言设置。 清除 WebSearch 缓存：删除所有存储在本地缓存中的搜索结果。
清除所有向量索引：完全删除所有来源的存储向量。
重置令牌缓存：清除已存储的令牌计数，强制所有聊天内容重新进行令牌化。
删除项目化提示词：从本地存储中删除所有项目化提示词。 刷新统计文件：使用现有的聊天数据重建统计文件。
回填令牌计数器：重新计算当前聊天中所有消息的令牌计数。 在切换不同模型的分词器时非常有用。
完成后触发聊天重新加载。
仅为视觉变化，不修改聊天内容。 更改 Mancer 基本 URL：修改 Mancer API 服务器的基本 URL。
测试 WebSearch 扩展：使用当前设置执行测试搜索。
发送生成请求：使用当前选择的 API 测试文本补全。 强制重新引导：重新启动引导过程。
切换事件追踪：启用/禁用事件追踪用于调试。
复制 ST 设置：[进行中] 将系统配置数据复制到剪贴板，用于错误报告。
每个功能都可以通过其描述下方的“执行”按钮来执行。请在使用这些工具之前备份您的数据，因为某些操作无法撤销。]]></description><link>sillytavern/2-使用指南/2.8-用户设置.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.8 用户设置.md</guid><pubDate>Sun, 22 Dec 2024 14:56:35 GMT</pubDate></item><item><title><![CDATA[2.6.6 提示管理器]]></title><description><![CDATA[提示词管理器是一个系统，允许更好地控制<a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a>策略，适用于聊天补全（Chat Completion）API。<br>适用于：聊天补全（Chat Completion）API
对于文本补全（Text Completion）API 中的等效设置，请使用<a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>。
<br>通过点击导航栏中的“AI 响应配置”按钮访问提示词管理器。提示词管理器位于<a data-href="2.4 通用设置" href="sillytavern/2-使用指南/2.4-通用设置.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.4 通用设置</a>面板下方。]]></description><link>sillytavern/2-使用指南/2.6.6-提示管理器.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6.6 提示管理器.md</guid><pubDate>Sun, 22 Dec 2024 14:56:35 GMT</pubDate></item><item><title><![CDATA[2.6.4 分词器（Tokenizer）]]></title><description><![CDATA[分词器是一种将文本拆分为更小单元（称为 tokens）的工具。这些 tokens 可以是单个单词，甚至是单词的部分，如前缀、后缀或标点符号。一般来说，一个 token 通常对应于 3 到 4 个字符。SillyTavern 提供了一个“最佳匹配”选项，它会根据所使用的 API 提供商，按照以下规则尝试匹配分词器。
NovelAI Clio: 使用 NerdStash 分词器。
NovelAI Kayra: 使用 NerdStash v2 分词器。
文本补全 API: 使用 API 分词器（如果支持）或 Llama 分词器。
KoboldAI Classic / AI Horde: 使用 Llama 分词器。
Koboldcpp: 使用模型 API 分词器。
如果你遇到不准确的结果或想进行实验，可以为 SillyTavern 设置一个 覆盖分词器，以在请求生成时使用：
无：每个 token 估算为 ~3.3 个字符，四舍五入到最接近的整数。如果你的提示词（prompt）被截断，尝试此选项。此方法由 KoboldAI Lite 使用。
Llama 分词器：用于 Llama 1/2 模型系列：Vicuna、Hermes、Airoboros 等。
Llama 3 分词器：用于 Llama 3/3.1 模型。
NerdStash 分词器：用于 NovelAI 的 Clio 模型。
NerdStash v2 分词器：用于 NovelAI 的 Kayra 模型。
Mistral V1 分词器：用于较旧的 Mistral 模型及其微调版本。
Yi 分词器：用于 Yi 模型。
Gemma 分词器：用于 Gemini/Gemma 模型。
API 分词器：查询生成 API 直接获取模型的 token 数量。已知支持的后端：Text Generation WebUI（ooba）、Koboldcpp、TabbyAPI、Aphrodite API。 OpenAI：依赖于模型的分词器，通过 <a data-tooltip-position="top" aria-label="https://github.com/openai/tiktoken" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/openai/tiktoken" target="_self">tiktoken</a> 实现。
<br>Claude：依赖于模型的分词器，通过 <a data-tooltip-position="top" aria-label="https://github.com/mlc-ai/tokenizers-cpp" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mlc-ai/tokenizers-cpp" target="_self">WebTokenizers</a> 实现。
OpenRouter：针对相应模型使用 Llama、Mistral、Gemma、Yi 分词器。
Google AI Studio：使用 Gemma 分词器。
Scale API：使用 GPT-4 分词器。
AI21 API：使用 Jamba 分词器（需要一次性下载）。
Cohere API：使用 Command-R 分词器（需要一次性下载）。
MistralAI API：使用 Mistral V1 或 V3 分词器（需要一次性下载）。
回退分词器：使用 GPT-3.5 turbo 分词器。
以下分词器由于文件较大，未包含在默认安装中。第一次使用时需要下载：
Qwen2 分词器。
Command-R 分词器：用于 Cohere 源的对话生成。
Mistral V3 (Nemo) 分词器：用于 MistralAI 源的对话生成（Nemo 和 Pixtral 模型）。
如果你不希望下载分词器，可以在 config.yaml 文件中启用“禁用下载选项”：enableDownloadableTokenizers，将其设置为 false 来禁用下载。<br>你也可以手动从 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Tokenizers" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Tokenizers" target="_self">SillyTavern-Tokenizers</a> 仓库下载分词器文件，将它们放到数据根目录下的 _cache 子目录中，默认路径为 ./data/_cache。如果该目录不存在，请创建它。之后，重新启动 SillyTavern 服务器以重新初始化分词器。如果所需的分词器未缓存且禁用了下载功能，将使用回退分词器（Llama 3）来进行计数。适用范围：文本补全 API SillyTavern 始终会使用适配对话生成模型的匹配分词器，因此无需填充令牌。除非 SillyTavern 使用了由远程后端 API 提供的分词器，否则所有的 token 数量估算都是基于所选择的 分词器 类型。由于分词结果在接近模型定义的最大上下文大小时可能不准确，提示词（prompt）的某些部分可能会被裁剪或丢失，这可能会影响角色定义的一致性。为了避免这种情况，SillyTavern 会将上下文大小的一部分分配为填充空间，以防添加过多的对话内容超出模型可以处理的范围。如果你发现即使选择了最匹配的分词器，某些部分的提示词（prompt）仍然被截断，可以调整填充量，以确保描述不会被截断。你可以输入负值进行反向填充，从而分配比设定最大 token 数量更多的令牌。]]></description><link>sillytavern/2-使用指南/2.6.4-分词器（tokenizer）.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6.4 分词器（Tokenizer）.md</guid><pubDate>Sun, 22 Dec 2024 14:56:34 GMT</pubDate></item><item><title><![CDATA[2.6.3 指令模式]]></title><description><![CDATA[指令模式允许您调整训练在各种提示词格式上的指令遵循模型的提示（如 Alpaca、ChatML、Llama2 等）。适用于：文本补全 API 对于等效的聊天补全 API，请使用<a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>。完全支持。这包括：
所有文本补全中的来源
KoboldAI Classic
AI Horde
所选的指令模板必须与实际在后端运行的模型的预期格式匹配。通常这反映在 HuggingFace 的模型卡片中，有些甚至提供与 SillyTavern 兼容的 JSON 文件。<br>示例：<a data-tooltip-position="top" aria-label="https://huggingface.co/NeverSleep/Noromaid-13b-v0.1.1#prompt-template-custom-format-or-alpaca" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/NeverSleep/Noromaid-13b-v0.1.1#prompt-template-custom-format-or-alpaca" target="_self">NeverSleep/Noromaid-13b-v0.1.1</a>对于聊天补全 API，这种方式不支持（且不需要）。它们使用完全不同的提示构建方式。虽然技术上支持 NovelAI，但它们的模型并没有训练来理解指令格式。NovelAI 模型可以使用一种特殊的指令模块，当消息中的指令用大括号包裹时，该模块会自动激活，因此将整个提示词使用指令模式会导致输出质量下降。下面是一个自动激活指令模块的示例：用户：{ 写一首关于Nintendo Switch的快乐歌曲。 }
<br>警告：最近更改 系统提示词现在是一个独立的实体。请参见<a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>页面以了解更多详情。提供了针对一些著名指令模型的现成模板，包含多个序列。更改模板会将未保存的设置重置为上次保存的状态！如果您不想丢失更改，请在更改模板之前保存您的设置。如果定义为有效的正则表达式，当连接到模型且模型名称匹配此正则表达式时，将自动选择该模板。指令模式需要先启用。在模板中，正则表达式匹配的第一个项将被选中（按字母顺序评估）。每个序列文本将在插入到提示词时用换行符包装。如果是 Alpaca 及其衍生模型，必须启用此选项。如果您希望完全控制行结束符，请禁用此选项。如果启用，则在消息包装序列中会替换已定义的已知 {{macro}} 替代项。此外，还可以在消息前缀中使用特殊的 {{name}} 宏来引用实际附加到消息的名称，而不是当前活动的 {{char}} 或 {{user}}，在群聊或 /sendas 命令中这可能很有帮助。如果无法确定名称，则使用“System”作为后备占位符。如果启用，在聊天历史日志中为字符和用户名添加前缀，添加顺序会根据前缀序列确定。以下是可选项：
从不：不在消息内容之前添加名称前缀。
群组和过去的角色：仅在群组角色和过去的角色消息中添加名称前缀。
始终：始终在消息内容之前添加名称前缀。
定义如何包装系统提示词。
系统提示词前缀
插入到系统提示词之前。
系统提示词后缀
插入到系统提示词之后。
重要： 这只适用于系统提示词本身，不是整个故事字符串！如果您想包装整个故事字符串，请将这些序列添加到上下文模板部分中的故事字符串模板。
这些设置定义了不同角色的消息在构建提示词时如何包装。所有前缀序列也会被自动用作停止字符串。
用户消息前缀
插入到用户消息之前，并在模拟时作为最后一行提示。
用户消息后缀
插入到用户消息之后。
助手消息前缀
插入到助手消息之前，并在生成 AI 回复时作为最后一行提示。
助手消息后缀
插入到助手消息之后。
系统消息前缀
插入到系统（由斜杠命令或扩展添加的）消息之前。
系统消息后缀
插入到系统消息之后。
系统与用户相同
如果选中此项，系统消息将使用用户角色消息的序列。
否则，系统消息使用其自己的序列（如果不为空），或者完全不做任何包装（如果为空）。
用于细化提示构建的各种高级配置。 第一个助手前缀
插入到助手消息的第一条消息之前。 只有聊天历史记录中的第一条消息会计入，而不是实际进入提示的第一条消息！ 最后一条助手前缀
插入到助手的最后一条消息之前，或在生成 AI 回复时作为最后一行提示。 当在后台生成文本时（例如，Stable Diffusion 提示或总结），不使用此选项。系统指令前缀或常规助手前缀将替代此项。 系统指令前缀
在后台生成中立/系统文本时插入为最后一行提示（例如，Stable Diffusion 提示或总结）。 用户填充消息
如果聊天历史记录不以用户消息开始，将插入该消息。
用例： 当指令格式严格要求提示必须由用户消息先行并且消息交替角色时，适用于 Llama 2 Chat、Mistral Instruct 等。 停止序列
表示回复结束的文本。也会作为停止字符串发送到后端 API。
如果生成了停止序列，输出中超出的部分将被删除（包括停止序列本身）。 ]]></description><link>sillytavern/2-使用指南/2.6.3-指令模式.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6.3 指令模式.md</guid><pubDate>Sun, 22 Dec 2024 14:56:34 GMT</pubDate></item><item><title><![CDATA[2.6.2 上下文模板]]></title><description><![CDATA[适用于：文本补全 API
在 Chat 完成 API 中，等效的设置请使用 <a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>。
通常，AI 模型需要你以特定的方式提供角色数据。SillyTavern 包含一系列为不同模型预设的转换规则，但你可以根据需要自定义它们。<br>在 “<a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>” 面板中编辑这些设置。此字段是用于聊天前角色数据的模板（内部称为故事字符串）。这是格式化角色卡片和指示模型的主要方式。<br>该模板支持 Handlebars 语法以及任何自定义文本注入或格式化。请参见此语言参考：<a rel="noopener nofollow" class="external-link is-unresolved" href="https://handlebarsjs.com/guide/" target="_self">https://handlebarsjs.com/guide/</a>我们向 Handlebars 评估器提供了以下参数（将它们包裹在双大括号中）：
description - 角色的描述
scenario - 角色的情景
personality - 角色的个性
<br>system - <a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a> 或角色的主要提示词覆盖（如果启用了“优先角色提示词”设置）
persona - 选择的角色描述
char - 角色的名称
user - 选择的用户角色名称
wiBefore 或 loreBefore - 设置为“角色定义之前”的激活世界信息条目组合
wiAfter 或 loreAfter - 设置为“角色定义之后”的激活世界信息条目组合
mesExamples - （可选）角色的示例对话，按照 instruct 格式处理，使用分隔符。将“示例消息行为”设置为“从不包含示例”以避免重复。
支持特殊的 {{trim}} 宏来移除它周围的任何换行符。如果你希望某部分文本不与前一行用换行分隔，可以使用它（空格不会被修剪）。警告：如果模板中缺少上述任何参数，它们将根本不会出现在提示词中。用于作为块标题和示例对话块之间的分隔符。对话示例中的任何 &lt;START&gt; 标签都将替换为该字段的内容。在渲染的故事字符串和示例对话块之后、但在第一个上下文消息之前插入为分隔符。将“示例分隔符”和“聊天开始”添加到停止字符串列表中。如果模型倾向于虚构或泄露整个示例对话块并带有分隔符，这会有所帮助。将角色和用户角色的名称添加到停止字符串列表中。建议保持开启，以防止模型模仿。在提示词的最后包含历史后指令，按用户消息格式化。历史后指令提示词应该在角色卡中定义，并且需要启用“优先角色指令”设置。应谨慎使用，因为将指令放在上下文较低的位置可能导致较小模型的输出质量下降。将角色的名称附加到提示词中，强制模型以该角色完成消息：** 其他上下文内容 **
角色：
]]></description><link>sillytavern/2-使用指南/2.6.2-上下文模板.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6.2 上下文模板.md</guid><pubDate>Sun, 22 Dec 2024 14:56:34 GMT</pubDate></item><item><title><![CDATA[2.6.1 高级格式化]]></title><description><![CDATA[此部分提供的设置允许对 <a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a> 策略进行更多控制，主要适用于文本补全（Text Completion）API。此面板中的大多数设置不适用于聊天补全（Chat Completions）API，因为它们是由提示词管理系统（Prompt Manager）控制的。文本补全（Text Completion）API <br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>
<br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>
<br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>
<br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a> 聊天补全（Chat Completion）API <br>系统提示词：不适用，请使用 <a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>
<br>上下文模板：不适用，请使用 <a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>
<br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a>
<br><a data-href="2.6.1 高级格式化" href="sillytavern/2-使用指南/2.6.1-高级格式化.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.1 高级格式化</a> 适用于：文本补全（Text Completion）API
不适用于聊天补全（Chat Completion）API，因为它们使用不同的提示词构建器。
一些文本补全源提供了自动选择模型作者推荐模板的功能。通过将模型的 tokenizer_config.json 文件中的聊天模板哈希值与默认的 SillyTavern 模板之一进行比较来实现这一点。
必须在 高级格式设置菜单中启用 推导模板选项。这可以应用于上下文、指令或两者。
必须选择一个支持的后端作为文本补全源。目前，只有 llama.cpp 和 KoboldCpp 支持推导模板。
当与 API 建立连接时，模型必须正确报告其元数据。如果未成功，请尝试更新后端到最新版本。
<br>报告的聊天模板哈希值必须与 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern/blob/release/public/scripts/chat-templates.js" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern/blob/release/public/scripts/chat-templates.js" target="_self">已知的 SillyTavern 模板</a> 匹配。此内容仅涵盖默认模板，如 Llama 3、Gemma 2、Mistral V7 等。
如果哈希匹配且模板存在（即未被重命名或删除），则会自动选择该模板。
<br>适用于：文本补全（Text Completion）API
对于聊天补全（Chat Completion）API 中的等效设置，请使用 <a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>。系统提示词是聊天补全（Chat Completion）API 中主提示词的等效部分。
系统提示词定义了模型需要遵循的一般指令。它为对话设定了基调和上下文。例如，它告诉模型扮演一个 AI 助手、写作伙伴或虚拟角色。<br>系统提示词是 <a data-href="2.6.2 上下文模板" href="sillytavern/2-使用指南/2.6.2-上下文模板.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.2 上下文模板</a> 的一部分，通常是模型接收的提示词的第一部分。<br>请参阅 <a data-href="2.6 提示词（Prompt）" href="sillytavern/2-使用指南/2.6-提示词（prompt）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6 提示词（Prompt）</a> 以了解更多关于系统提示词的信息。<br>适用于：文本补全（Text Completion）API
对于聊天补全（Chat Completion）API 中的等效设置，请使用 <a data-href="2.6.6 提示管理器" href="sillytavern/2-使用指南/2.6.6-提示管理器.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.6 提示管理器</a>。
通常，AI 模型要求您以某种特定方式提供角色数据。SillyTavern 包含了为不同模型预设的转换规则，但您可以根据需要进行自定义。<br>此部分的选项解释见 <a data-href="2.6.2 上下文模板" href="sillytavern/2-使用指南/2.6.2-上下文模板.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.2 上下文模板</a>。分词器是一种将文本拆分成更小单元（称为 token）工具。这些 tokens 可以是单个单词，甚至是词的一部分，例如前缀、后缀或标点符号。通常，每个 token 代表大约 3~4 个字符。<br>此部分的选项解释见 <a data-href="2.6.4 分词器（Tokenizer）" href="sillytavern/2-使用指南/2.6.4-分词器（tokenizer）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2.6.4 分词器（Tokenizer）</a>。<br>接受一个 JSON 格式化的停止字符串数组。例如：["\\\\n", "\\\\nUser:", "\\\\nChar:"]。如果您不确定格式，请使用 <a data-tooltip-position="top" aria-label="https://jsonlint.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://jsonlint.com/" target="_self">在线 JSON 验证器</a> 进行检查。如果模型输出 以 任何停止字符串结尾，则该停止字符串将从输出中删除。支持的 API：
KoboldAI Classic（版本 1.2.2 及以上）或 KoboldCpp
AI Horde
文本补全 API：Text Generation WebUI（ooba）、Tabby、Aphrodite、Mancer、TogetherAI、Ollama 等
NovelAI
OpenAI（最多 4 个字符串）及兼容的 API
OpenRouter（文本补全和聊天补全）
Claude
Google AI Studio
]]></description><link>sillytavern/2-使用指南/2.6.1-高级格式化.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.6.1 高级格式化.md</guid><pubDate>Sun, 22 Dec 2024 14:56:34 GMT</pubDate></item><item><title><![CDATA[2.5.10 Scale]]></title><description><![CDATA[Scale 是一种通过部署的“应用程序”轻松访问 GPT-4 和其他大语言模型（LLM）的方式，这些应用程序充当 API 端点。目前，Scale 不支持令牌流式传输，也无法通过 SillyTavern 的 UI 配置诸如温度等参数。Scale API 不是免费的，但如果您绑定信用卡，提供 5 美元的试用额度。
在 <a data-tooltip-position="top" aria-label="https://spellbook.scale.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://spellbook.scale.com/" target="_self">https://spellbook.scale.com</a> 创建一个 Scale Spellbook 账户（如果您的国家不支持，可以使用 VPN）
创建一个“应用”，设置名称和描述
创建一个“变体”，该变体设置参数（系统提示、模型、温度、响应令牌限制等）
选择一个合适的语言模型进行部署（推荐 GPT-4）
替换提示中的“用户”部分内容为以下内容： 完成下一个响应的虚构对话。
{{ input }} 配置模型参数。 模型： GPT-4
温度： ~0.6 - 0.9
最大令牌： 400 - 600（根据消息长度偏好进行调整） 点击“保存新变体”
进入新变体页面，点击“部署”
这将生成一个 API 密钥和 URL 用于您的机器人
打开 SillyTavern，选择“聊天完成”API 和 Scale 源
将 API 密钥和 URL 粘贴到相应的字段中，然后点击“连接”
此实现和文档灵感来自 khanon 在 TavernAIScale 的工作。]]></description><link>sillytavern/2-使用指南/2.5.10-scale.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.10 Scale.md</guid><pubDate>Sun, 22 Dec 2024 14:56:33 GMT</pubDate></item><item><title><![CDATA[2.5.2 自托管AI模型]]></title><description><![CDATA[!!! 警告本指南基于作者的个人经验和知识，并非绝对的真理。所有的陈述都应谨慎对待。如果您有任何更正或建议，请通过 Discord 联系我们或向<a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Docs" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Docs" target="_self">SillyTavern 文档仓库</a>提交 PR。!!!本指南旨在帮助您使用 SiliconTavern 并在本地 PC 上运行 AI（我们将开始使用正确的术语，称其为 LLM）。在向他人寻求技术支持之前，请先阅读本指南。这个问题没有标准答案，因为没有统一的“最佳”尺度。社区已经有足够的资源和讨论，您可以在 Reddit 和 Discord 上形成一些关于哪些模型是首选的意见。具体情况因人而异。如果真有一个最佳配置，为什么还会有配置需求呢？最佳配置就是适合您的配置。这是一个不断尝试和错误的过程。这是一个复杂的话题，我将只讲述一些基本要点，并作一般化处理。
互联网上有成千上万种免费的 LLM 模型，您可以下载它们，就像 Stable Diffusion 有大量可用于生成图像的模型一样。
运行未修改的 LLM 模型需要非常强大的 GPU 和大量的显存（GPU 内存），这几乎是您永远无法拥有的。
通过使用量化技术（如 GPTQ 或 AWQ）压缩模型，可以减少显存的需求，这使得拥有像 3080 这样的游戏显卡的人也能运行 13B 大小的模型。虽然这种量化模型不如未量化模型，但其效果仍然非常好。
更好的是：还有一种叫做 GGUF（之前叫 GGML）的模型格式和量化方法，这已经成为普通人（没有超强 GPU 的人）使用的首选格式。这样您可以在没有 GPU 的情况下运行 LLM 模型。虽然这比使用 GPTQ/AWQ 在 GPU 上运行慢大约 15 倍，尤其是在处理提示时，但模型的能力与 GPU 版相当。GGUF 的创建者通过增加配置选项进一步优化了 GGUF，允许拥有游戏级 GPU 的用户将部分模型任务卸载到 GPU，从而提高生成速度（但这不会减少内存需求，只是加速生成过程）。
模型有不同的大小，通常基于它们训练时使用的参数数量命名。例如，7B、13B、30B、70B 等。您可以将这些模型大小视为“模型的大脑”。13B 模型的能力比 7B 模型强，因为它们在相同的数据上进行了训练，但更大的模型可以更好地保持知识和思维的连贯性。更大的模型也需要更多的显存/内存。
有不同程度的量化（8 位、5 位、4 位等）。量化级别越低，模型的性能下降越明显，但硬件要求也越低。因此，即使是较差的硬件，也能运行 4 位版本的模型。甚至还有 3 位和 2 位量化，但此时性能已经大幅下降。此外，还有一些量化子类型，如 k_s、k_m、k_l 等。k_m 比 k_s 好，但需要更多的资源。
上下文大小（即模型在不丢失对话内容的情况下，能够处理的对话长度）也会影响显存/内存需求。幸运的是，这是一个可配置的设置，您可以通过调整上下文大小来减少显存/内存的需求。（注意：基于 Llama2 的模型上下文大小为 4k，而 Mistral 虽宣传为 8k，但实际上为 4k）。
<br>2023 年，NVIDIA 更改了其 GPU 驱动程序，当显存不足时，任务不会崩溃，而是会开始使用常规内存作为后备。这会极大降低 LLM 的写作速度，但模型仍然能够正常工作并生成相同质量的输出。幸运的是，这种行为可以<a data-tooltip-position="top" aria-label="https://nvidia.custhelp.com/app/answers/detail/a_id/5490" rel="noopener nofollow" class="external-link is-unresolved" href="https://nvidia.custhelp.com/app/answers/detail/a_id/5490" target="_self">禁用</a>。
综上所述，硬件要求和性能会因模型的类型、大小、量化方法等因素而完全不同。<br>您可以使用<a data-tooltip-position="top" aria-label="https://huggingface.co/spaces/NyxKrage/LLM-Model-VRAM-Calculator" rel="noopener nofollow" class="external-link is-unresolved" href="https://huggingface.co/spaces/NyxKrage/LLM-Model-VRAM-Calculator" target="_self">Nyx 的模型大小计算器</a>来确定所需的 RAM/VRAM。<br>记住，您希望运行最大的、最少量化的模型，这样可以避免<a data-tooltip-position="top" aria-label="https://serverfault.com/a/48487" rel="noopener nofollow" class="external-link is-unresolved" href="https://serverfault.com/a/48487" target="_self">磁盘交换</a>。]]></description><link>sillytavern/2-使用指南/2.5.2-自托管ai模型.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.2 自托管AI模型.md</guid><pubDate>Sun, 22 Dec 2024 14:56:31 GMT</pubDate></item><item><title><![CDATA[2.5.1 连接配置文件]]></title><description><![CDATA[保存连接配置文件，以便快速在不同的 API、模型和格式模板之间切换。当您需要频繁切换不同的 API 连接或配置时，这个功能特别有用，无需在菜单中进行繁琐的查找。从 SillyTavern 1.12.6 或更高版本开始，此功能作为内置扩展启用，并可以通过 API 连接菜单访问。如果您希望 禁用 它，可以打开扩展面板，点击“管理扩展”，找到连接配置文件，取消勾选“启用”复选框，然后点击“关闭”。连接配置文件会保存以下选择项：
<a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/API_Connections/index.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/API_Connections/index.md" target="_self">API 类型、模型和服务器 URL</a>
<br><a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/Common-Settings.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/Common-Settings.md" target="_self">设置预设</a> <br><a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/Prompts/advancedformatting.md#system-prompt" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/Prompts/advancedformatting.md#system-prompt" target="_self">系统提示及其状态</a>
<br><a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/Prompts/instructmode.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/Prompts/instructmode.md" target="_self">指令模式状态和模板</a>
<br><a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/Prompts/advancedformatting.md#context-template" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/Prompts/advancedformatting.md#context-template" target="_self">上下文模板</a>
<br><a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/Prompts/advancedformatting.md#tokenizer" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/Prompts/advancedformatting.md#tokenizer" target="_self">分词器</a> 代理预设
!!! info 提示配置文件只保存下拉菜单中选择的内容，不涉及底层设置。这意味着在切换到不同配置文件时，您将失去未保存的更改。为了避免这种情况，确保在切换配置文件之前更新所有预设和模板，以免丢失临时更改。!!!
要保存配置文件，请设置好所有需要的选项，然后点击“创建”按钮。接着，检查设置并为该配置文件提供一个名称。名称应唯一。
要查看所选配置文件的详细信息，点击“信息”按钮。再次点击可隐藏详细信息。
配置文件设置保存在 settings.json 文件中，直到您点击“更新”按钮才会更新保存的配置文件。这意味着，如果您设置了一个配置文件，但没有更新然后切换到另一个配置文件，您将丢失之前的所有更改。
要恢复从已保存配置文件中更改的选项，点击“重新加载”按钮。
要删除配置文件，点击“删除”按钮并确认删除。此操作无法恢复。
您可以使用以下斜杠命令来管理连接配置文件：
/profile [name] - 如果提供了参数，则切换到指定的配置文件，否则返回当前配置文件的名称。
/profile-create [name] - 将当前设置保存为一个新配置文件，并为其提供名称。
/profile-list - 返回一个 JSON 格式的可用配置文件名称列表。
/profile-get [name] - 获取指定配置文件的详细信息，以 JSON 格式返回。
/profile-update - 使用当前设置更新选中的配置文件。
]]></description><link>sillytavern/2-使用指南/2.5.1-连接配置文件.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.5.1 连接配置文件.md</guid><pubDate>Sun, 22 Dec 2024 14:56:31 GMT</pubDate></item><item><title><![CDATA[2.3.1 斜杠命令]]></title><description><![CDATA[这不是一个详尽的列表，因为它更新得较少。
要查看你实例中有效的最新命令列表，请在任何 SillyTavern 聊天中使用 /help slash 命令。 /help – 显示帮助信息
/api – 切换到另一个 API
/sys – 作为系统叙述者发送中立消息
/send – 作为用户发送消息，但不触发生成
/sendas – 以特定角色的身份发送消息
/comment – 添加评论到聊天中，AI 看不见
/impersonate – 请求 AI 以你的身份写作，并可附带提示
/persona – 设置你的用户角色
/imagine – 根据文本提示生成图像
/bg – 通过文件名设置背景图像
]]></description><link>sillytavern/2-使用指南/2.3.1-斜杠命令.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.3.1 斜杠命令.md</guid><pubDate>Sun, 22 Dec 2024 14:56:30 GMT</pubDate></item><item><title><![CDATA[2.7 世界书（World Info）]]></title><description><![CDATA[世界书（也称为知识库或记忆书） 是一个强大的工具，可在对话中动态插入提示词（prompt），以帮助引导 AI 的回复。通常，世界书（World Info，简称 WI）用于增强 AI 对你虚拟世界细节的理解，但你也可以使用世界书条目插入任何你希望插入的内容。它像一个动态的词典，只有在消息文本中出现与条目相关的关键词时，才会插入世界书中的相关信息。需要注意的是，虽然世界书有助于引导 AI 朝着期望的内容进行生成，但它并不保证这些信息会出现在生成的输出消息中。这取决于你的模型是否能有效利用附加信息！
世界书引擎是一个非常强大的提示词管理工具。不要只专注于添加角色背景，也可以进行各种实验。
激活关键词、标题以及其他不在内容字段中的信息不会被插入到上下文中，因此每个世界书条目应包含简洁且独立的描述。
为了创建丰富而详细的世界背景，条目可以互相交织并通过递归引用彼此。有关更多信息，请参见<a data-tooltip-position="top" aria-label="2.7 世界书（World Info） > 递归扫描" data-href="2.7 世界书（World Info）#递归扫描" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#递归扫描_0" class="internal-link" target="_self" rel="noopener nofollow">递归扫描</a>部分。
SillyTavern 为插入的背景信息提供灵活的上下文预算。为了节省提示词令牌，建议保持条目内容简洁。 <br><a data-tooltip-position="top" aria-label="https://rentry.co/world-info-encyclopedia" rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.co/world-info-encyclopedia" target="_self">世界书百科全书</a>：关于世界书和知识库的详细指南，由 kingbri、Alicat、Trappu 编写。
可以选择为角色分配一个世界书（World Info）文件，以便在所有与该角色的对话中（包括群聊）使用该角色的专用背景资料。为此，请在角色管理面板中点击地球图标，然后从下拉列表中选择世界书（World Info），然后点击“确定”。在生成 AI 回复时，角色世界书中的条目会与全局世界书中的条目结合，使用以下策略之一：所有条目会按照它们的插入顺序排序，仿佛它们是一个大的文件，忽略来源。角色世界书中的条目将优先插入，按其插入顺序排序，然后插入全局世界书中的条目。全局世界书中的条目将优先插入，按其插入顺序排序，然后插入角色世界书中的条目。一个触发世界书条目激活的关键字列表。关键字默认不区分大小写（这个是可以配置的）。关键字提供了一种更灵活的匹配方式，支持正则表达式。这使得能够匹配更动态的内容，包括可选的单词或字符、空格以及正则表达式提供的所有其他功能。如果定义的关键字是有效的正则表达式（采用 Javascript 正则表达式语法，带有/作为分隔符，所有标志均可使用），它将在检查条目是否应被触发时被作为正则表达式处理。多个正则表达式可以作为单独的关键字输入，并与其他正则表达式一起工作。在正则表达式中，逗号是允许的。普通文本关键字不支持逗号，它们会被当作关键字分隔符处理。例如，以下正则表达式适用于与天气相关的条目：/(?:\\{\\{char\\}\\}|he|she) (?:is talking about|is noticing|is checking whether|observes) (?:the )?(rainy weather|heavy wind|it is going to rain|cloudy sky)/i;
<br>有关正则表达式的更多信息，请参考：<a data-tooltip-position="top" aria-label="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions" rel="noopener nofollow" class="external-link is-unresolved" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions" target="_self">Regular expressions - JavaScript | MDN</a>ST 在每条聊天消息前都会加上\\{\\{character name\\}\\}:，并且在 v1.12.6 版本之后，使用字符值 1（\\x01）将其连接并预先附加。这意味着你可以仅通过正则表达式匹配来自某个特定角色的输入或输出。例如，要匹配用户说“hello”，可以使用以下正则表达式：/\\x01\\{\\{user\\}\\}:[^\\x01]*?hello/;
有两种模式来输入关键字，每种模式稍有不同。在 ⌨️ 纯文本模式（默认）下，关键字可以作为逗号分隔的列表输入在一个文本框中。正则表达式也可以包括在内，但没有特别的高亮显示。在 ✨ 高级模式 中，关键字显示为单独的元素，正则表达式会以不同的高亮方式显示。此控件支持编辑和删除关键字。你可以通过控件内的按钮在两种模式间切换。<br>可选过滤器：一组辅助关键字，用来与主要关键字一起使用。请参见<a data-tooltip-position="top" aria-label="2.7 世界书（World Info） > 可选过滤器" data-href="2.7 世界书（World Info）#可选过滤器" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#可选过滤器_0" class="internal-link" target="_self" rel="noopener nofollow">可选过滤器</a>。这些关键字也支持<a data-tooltip-position="top" aria-label="2.7 世界书（World Info） > 正则表达式（Regex）作为关键词" data-href="2.7 世界书（World Info）#正则表达式（Regex）作为关键词" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#正则表达式（Regex）作为关键词_0" class="internal-link" target="_self" rel="noopener nofollow">正则表达式</a>。当条目被触发时，插入到提示词中的文本。数值，定义条目的优先级。如果多条条目被同时触发，插入顺序较高的条目会更靠近提示词的末尾，因而对输出影响更大。
角色定义前： 世界书条目在角色描述和场景之前插入，对对话有中等影响。
角色定义后： 世界书条目在角色描述和场景之后插入，对对话有更大影响。
示例消息前： 世界书条目作为示例对话块，在角色卡片的示例消息之前插入。
示例消息后： 世界书条目作为示例对话块，在角色卡片的示例消息之后插入。
作者注释顶部： 世界书条目插入到作者注释的顶部。根据作者注释的位置，这会对对话产生不同的影响。
作者注释底部： 世界书条目插入到作者注释的底部。根据作者注释的位置，这会对对话产生不同的影响。
@ D： 世界书条目插入到聊天的特定深度（深度 0 表示提示词的底部）。 ⚙️ - 作为系统角色消息
👤 - 作为用户角色消息
🤖 - 作为助手角色消息 示例消息条目将根据提示词构建设置进行格式化：指令模式或聊天补全提示词管理器。它们还遵循示例消息行为规则：逐渐被完整上下文推移、始终保留或完全禁用。如果你的作者注释被禁用（插入频率 = 0），那么位置为作者注释的世界书条目将被忽略！一个文本字段，用于方便你标记条目，AI 或任何触发逻辑不会使用该字段。如果为空，可以通过点击“填充空白备注”按钮，使用条目的第一个关键字来自动填充备注。
🔵（蓝色圆圈） = 该条目在提示词中始终存在。
🟢（绿色圆圈） = 该条目仅在出现特定关键词时触发。
🔗（链环） = 该条目允许通过嵌入相似性插入。
每个条目还具有一个开关，用于启用或禁用该条目。逗号分隔的附加关键词，与主关键词一起使用。 如果未提供参数，则此标志将被忽略。 支持 AND ANY、AND ALL、NOT ANY 或 NOT ALL 的逻辑。
AND ANY = 仅在主关键词和任意一个附加关键词同时出现在扫描上下文中时，才会激活该条目。
AND ALL = 仅在主关键词和所有附加关键词同时出现在扫描上下文中时，才会激活该条目。
NOT ANY = 仅在主关键词和没有任何附加关键词出现在扫描上下文中时，才会激活该条目。
NOT ALL = 即使主关键词触发，也会阻止该条目激活，若所有附加关键词都出现在扫描上下文中。
该值充当附加过滤器，增加了在通过任何方式（常量、主关键词、递归）激活时，某些条目未被插入的机会。
概率 = 100 表示每次激活时都会插入该条目。
概率 = 50 表示该条目有 50%的概率被插入。
概率 = 0 表示该条目不会被插入（实际上禁用了该条目）。
使用此功能来创建聊天中的随机事件。例如，每条消息可能有 1%的几率唤醒一位古老的神明（如果其名字出现在消息中）。包含组控制当多个条目具有相同组标签时，它们如何被同时选择。当多个条目同时被激活并且它们属于同一组标签时，只有一个条目会被插入到提示词中。默认情况下，所选条目根据其组权重（默认值为 100 分）随机选择，分值越高，选择的概率越大。这使得在多个触发条目之间增加了惊喜和变化的元素。一个条目可以属于多个包含组（通过逗号分隔）。如果激活了其中任何一个组，所有与之关联的其他条目都将被禁用。因此，如果激活了任何一个组，则该条目不会被激活。通过[包含组]（/Usage/worldinfo.md#inclusion-group），该选项允许您确定性地控制在多个条目同时激活时选择哪个条目，而不是随机选择。如果多个条目属于相同的组标签并且启用了此设置，当它们都被激活时，具有最高“顺序”值的条目将被选中。这对于通过包含组创建回退序列非常有用。例如，当低层次条目更重要时，可以优先选择它们；或者如果多个条目都有效，可以优先选择某个特定的指令来设定场景。当此设置全局或每个条目启用时，已激活的条目键的数量决定了组选择的胜出者。只有匹配最多键的组子集将根据组权重或包含优先级被激活——其他的将被禁用并从组中移除。此功能用于在大型组中为个别条目提供更高的特异性。例如，它们可能具有共同的关键词和特定的关键词。当特定的关键词没有提供时，随机条目会被插入，反之亦然。主关键词的得分计算方式是：1 个匹配 = 1 分。对于次要关键词，交互取决于所选择的选择逻辑：
AND ANY: 每个次要关键词匹配 1 分。
AND ALL: 如果所有次要关键词都匹配，则每个次要关键词得 1 分。
NOT ANY 和 NOT ALL: 不做更改。
例如：
条目 1. 关键词：song，sing，Black Cat。组：songs
条目 2. 关键词：song，sing，Ghosts。组：songs
输入 sing me a song 可以激活任意一个条目（两个条目各激活了 2 个关键词），但 sing me a song about Ghosts 将只激活条目 2（激活了 3 个关键词）。<br>允许将世界书条目与<a data-tooltip-position="top" aria-label="https://for_contributors/st-script.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://for_contributors/st-script.md" target="_self">快速回复扩展</a>中的 ST 脚本集成。如果快速回复命令和世界书条目具有相同的自动化 ID，当匹配的条目被激活时，命令将自动执行。<br>自动化命令将按照触发顺序执行，遵循您的指定排序策略，结合<a data-tooltip-position="top" aria-label="2.7 世界书（World Info） > 角色背景资料插入策略" data-href="2.7 世界书（World Info）#角色背景资料插入策略" href="sillytavern/2-使用指南/2.7-世界书（world-info）.html#角色背景资料插入策略_0" class="internal-link" target="_self" rel="noopener nofollow">角色背景资料插入策略</a>和“优先级”排序。递归触发的条目将在相同顺序下按优先级处理。如果具有相同自动化 ID 的多个条目被激活，则该命令只会执行一次。向量存储扩展提供了一个替代关键词匹配的方法，通过使用最近聊天消息与世界书条目内容之间的相似度进行匹配。启用和使用此功能需要满足以下先决条件：
向量存储扩展已启用，并配置为使用可用的嵌入源之一。
在向量存储扩展设置中勾选了“启用世界书匹配”复选框。
允许无密钥匹配的世界书条目必须具有“已向量化”（🔗）状态，或者在向量存储设置中勾选了“启用所有条目”选项。
<br>扩展中向量化模型的选择以及“嵌入（embeddings）”这一术语的理论意义不在此讨论。如果需要更多关于此主题的信息，请参阅<a data-tooltip-position="top" aria-label="2.9.6 数据库（RAG）" data-href="2.9.6 数据库（RAG）" href="sillytavern/2-使用指南/2.9.6-数据库（rag）.html#_0" class="internal-link" target="_self" rel="noopener nofollow">数据库</a>指南。向量存储匹配遵循以下规则：
允许通过向量存储匹配的最大条目数可以通过“最大条目数”设置进行调整。此数字仅设定限制，不影响在世界书激活设置中为条目设定的令牌预算。所有预算规则仍然适用。
此功能仅替代关键词检查。条目插入的其他检查条件仍需满足，例如触发百分比、角色过滤、包含组等。
激活设置中的“扫描深度”设置或条目覆盖将不会被使用。向量存储“查询消息”值将用于与之匹配的文本。这允许进行类似“扫描深度”设置为 0 的配置，这样将不会执行常规的关键词匹配，但条目仍可通过向量激活。
“已向量化”状态仅是附加标记。条目仍会像普通的启用且非常量的记录那样，通过关键词触发。如果您希望条目仅通过向量激活，请移除关键词。
Warning
由于检索质量完全依赖于嵌入模型的输出，因此无法预测哪些条目将被插入。如果您希望得到确定性和可预测的结果，请坚持使用关键词匹配。
通常情况下，世界书评估是无状态的，这意味着评估结果只依赖于当前的聊天上下文。然而，随着定时效果的引入，您可以创建具有激活延迟、在激活后保持有效或激活后无法再触发的条目。
效果的时间框架是以消息为单位进行衡量的（而不是消息对/交换），其中 0 意味着没有效果。
效果仅适用于激活条目的聊天。分支继承父聊天的状态。
如果聊天没有继续（例如，最后一条消息被删除或滑动），活动的定时效果将被移除。
对当前处于定时效果中的条目进行任何更改将强制移除该效果。
连续触发关键词不会刷新已激活效果的持续时间。 粘性效果（Sticky） – 激活后条目将在接下来的 N 条消息中保持激活状态。已粘贴的条目在后续扫描中将忽略概率检查，直到效果过期。
冷却效果（Cooldown） – 激活后条目将在接下来的 N 条消息中无法再激活。可以与粘性效果一起使用：当粘性效果结束时，条目进入冷却状态。
延迟效果（Delay） – 条目必须在聊天中至少有 N 条消息时才可激活。 延迟 = 0 -&gt; 条目可以随时激活。
延迟 = 1 -&gt; 如果聊天为空（没有问候），则条目无法激活。
延迟 = 2 -&gt; 如果聊天中没有消息或仅有一条消息，条目无法激活，依此类推。 条目配置：粘性 = 3，冷却 = 2，延迟 = 2。消息 0: 延迟
消息 1: 条目被激活
消息 2: 粘性
消息 3: 粘性
消息 4: 粘性
消息 5: 冷却
消息 6: 冷却
消息 7: 条目可以再次激活
世界书界面顶部的可折叠菜单。
可以在条目级别覆盖。
定义聊天历史中应该扫描多少条消息来激活世界书条目。
如果设置为 0，则仅评估递归条目和作者注释。
如果设置为 1，则只扫描最后一条消息。
设置为 2，则扫描最近的两条消息，依此类推。
定义是否应将聊天参与者的名称作为消息前缀包含在扫描文本缓冲区中。这允许在没有直接提到名称的情况下，激活使用名称作为关键字的条目。以下是示例文本，假设聊天参与者为 Alice 和 Bob。启用（默认）：Alice: 你好！很高兴见到你。
Bob: 今天天气怎么样？
禁用：你好！很高兴见到你。
今天天气怎么样？
定义一次性使用多少标记（tokens）来激活世界书条目。 可以根据 API 的最大上下文设置（上下文百分比）或目标标记阈值（预算）定义一个阈值。如果预算耗尽，则不会激活更多条目，即使在提示词中存在相应的关键字。常规条目将首先插入。然后是具有更高顺序号的条目。直接提及其关键字的条目具有比其他条目更高的优先级。此设置与最大递归步骤互斥。最小激活数：如果设置为非零值，这将忽略“扫描深度”限制，从最新消息开始回溯聊天记录，直到触发指定数量的条目。这仍然会受到最大深度设置或整体预算上限的限制。由最小激活数触发的额外扫描将不会检查递归中前一步添加的条目。只有聊天消息和扩展提示可以触发这些额外的激活。然而，由最小激活数触发的条目可以像平常一样触发其他条目。使用最小激活数设置时，扫描的最大深度。递归扫描允许条目激活其他条目或被其他条目激活，从而增强不同世界书条目之间的动态互动和依赖关系。此功能可以显著提升你创作场景的复杂性和互动性。递归扫描是否启用可以通过全局设置 递归扫描 来控制。有三种选项可用于控制每个条目的递归行为：
不可递归：选中此选项后，条目将不会被其他条目激活。这对于那些不应改变或不受其他世界书条目影响的静态信息非常有用。
防止进一步递归：选中此选项后，激活该条目后将不会触发任何其他条目。这有助于避免意外的递归链式触发。
延迟至递归时激活：该条目仅在递归检查期间激活，意味着它在初始扫描时不会被触发，但可以被启用递归的其他条目激活。现在，加入了 递归层级 的延迟功能，条目按层级分组。最初，只会匹配第一级（最小的数字）。一旦没有找到匹配项，下一个层级才会被检查，直到所有层级都被检查为止。这允许更精细地控制何时及如何在递归过程中揭示更深层次的信息，特别是在与“任何都不”或“并非全部”组合条件一起使用时。
条目可以通过在内容文本中提及其关键字来激活其他条目。例如，如果你的世界书中有两个条目：条目 #1
关键字：Bessie
内容：Bessie 是一头牛，和 Rufus 是朋友。
条目 #2
关键字：Rufus
内容：Rufus 是一只狗。
如果消息文本仅提到 Bessie，则两个条目都会被拉入上下文中。此设置与最小激活数互斥。当设置为零时，递归嵌套仅受限于提示词的预算。当设置为非零值时，限制扫描步骤的总数，即递归的最大“嵌套层级”。示例值：
1 实际上禁用了递归，因为检查在第一步后停止。
2 只能激活递归条目一次。
3 可以触发递归两次…… 可以在条目级别覆盖。
为了使条目被拉入上下文，关键字必须与世界书条目中定义的大小写完全匹配。这对于关键字是常见词或常见词部分的条目非常有用。例如，当此设置启用时，'rose' 和 'Rose' 将被视为不同的关键字，具体取决于输入。
可以在条目级别覆盖。
仅当关键字包含一个单词时，才会在搜索文本中完全匹配该单词。默认启用。例如，如果此设置启用且条目关键字为“king”，则文本如“long live the king”将被匹配，但“it's not to my liking”则不会。重要提示：当用于不以空格分隔单词的语言（如日语或中文）时，此设置可能会产生不利影响。如果你在这些语言中编写条目，建议关闭此选项。如果激活的世界书条目超出分配的标记预算，将显示警报。]]></description><link>sillytavern/2-使用指南/2.7-世界书（world-info）.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.7 世界书（World Info）.md</guid><pubDate>Sun, 22 Dec 2024 14:56:30 GMT</pubDate></item><item><title><![CDATA[2.2 常见问题]]></title><description><![CDATA[现代的 AI 语言模型（如 ChatGPT）变得非常强大，以至于其中一些模型现在能够令人信服地模拟你创建的角色，与你进行对话、一起创作小说等。例如，你可以告诉 AI 假装是一个来自中世纪日本的围棋教练“Jubei”，它会根据这个角色进行回应。你可以和 Jubei 进行长时间的对话，一起去酒吧，决定与武士发生冲突，或者想象任何事情，AI 都会跟随你的想法进行创作和反应，充当你的对手和“地下城主”。你的想象力是唯一的限制。你还可以要求 AI 假装成神奇女侠，甚至可以指定一个情境（例如：“我和神奇女侠正在抢银行”），或者要求它以某种写作风格（如：“神奇女侠说话带有黑人英语”）来回应，甚至提出任何你能想到的需求。SillyTavern 是为了促进这些使用场景而设计的应用程序：
它是一个与 AI 语言模型通信的用户界面。
它让你可以创建新的角色卡片（提示），并轻松切换角色。
它允许你导入其他人创建的角色。
它会保存你与角色的聊天记录，方便随时继续聊天、开始新的对话或回顾旧的对话。
它会在后台为你准备 AI 的提示内容，发送系统提示（对 AI 的指令），以确保 AI 按特定规则进行反应，提高回答的准确性。
SillyTavern 可以与两种类型的 AI 进行互动：
网络服务（基于云的，通常收费，封闭式）
自托管（本地运行，免费，开源）
收费的网络模型是黑盒子。你支付费用使用某个公司的 AI 服务。你将你的帐户信息输入 SillyTavern，它会代你连接并使用该 AI 服务。优点：
很容易开始使用。
提供最高质量的 AI 写作。
缺点：
使用费用较高。
所有内容都记录在他们的服务器上，存在隐私问题。
常常会受到审查，无法与其讨论某些话题。
自托管模型是你可以在本地计算机上运行的免费模型，但需要一台高性能的计算机和一些额外的设置工作。优点：
设置好后，即使没有互联网连接也可以免费使用。
完全的隐私保护，一切写作内容保存在本地计算机上。
模型种类丰富，作为社区驱动的技术，你可以找到符合特定任务或行为需求的模型。
缺点：
它们没有最先进的（SOTA）模型强大（即写作质量较差、对话创意较低等）。
运行本地模型需要至少 6GB 显存的 GPU。
如果你有兴趣使用这些模型，可以参考专门的指南：<a data-tooltip-position="top" aria-label="https://chatgpt.com/Usage/API_Connections/self-hosted.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Usage/API_Connections/self-hosted.md" target="_self">如何使用自托管模型</a>。<br>iPhone 和 iPad 无法运行整个 SillyTavern 应用程序，但由于它只是一个 Web 界面，你可以在家里的另一台计算机上运行它，然后通过手机浏览器访问。有关更多信息，请参考<a data-tooltip-position="top" aria-label="https://chatgpt.com/Administration/remote-connections.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/Administration/remote-connections.md" target="_self">远程连接</a>。<br>对于 Android 用户，除了上述方法外，你还可以直接在手机上运行整个 SillyTavern，而无需使用 PC，方法是使用 Termux 应用程序。请参考<a data-href="1.3 Android" href="sillytavern/1-安装/1.3-android.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.3 Android</a>。 （注意：Termux 安装不受官方支持，无法保证一定能够正常工作。）有两个可能性：
该卡片没有嵌入定义，而只是一个普通的图像文件。有些程序或文件管理器会在保存时剥离卡片中的嵌入定义。确保你使用的是未被修改过的原始 PNG 文件，最好是分享者直接提供的那个文件。
该 PNG 文件实际上是一个 WEBP 文件，文件扩展名是.png。你可以尝试将文件重命名为.webp再导入，或者寻找该图像的正确 PNG 版本。 点击角色管理按钮 点击创建新角色 在角色名称下，给角色取个名字，比如“阿曼达”（Amanda） 可选：点击选择头像按钮，为该角色选择一个图像肖像 在描述框中，描述角色，并包含任何你认为与聊天相关的信息。例如：
阿曼达是一个正在旅行的学生，正在度过她的间隔年。她身高6英尺，是一名排球运动员。
她有着健美的身材和长棕色头发。
她喜欢维多利亚时代的英格兰，喜欢看与那个时期相关的电视剧和小说。 如果你希望阿曼达是一个友善的人，你可以添加：
阿曼达非常开朗和外向。 在首条消息中，写下角色开始新聊天时的问候语。例如：
*阿曼达向你挥手* 嘿！你也是背包客吗？ 点击创建角色按钮 现在你已经有了一个基本的角色，可以开始与她聊天。选择阿曼达作为角色，新的聊天就会开始。请注意，你可以在描述和/或首条消息中创建一个更具体的场景，或将你自己包含在描述中。例如：描述：
阿曼达是一个正在旅行的学生，正在度过她的间隔年。她身高6英尺，是一名排球运动员。她有着健美的身材和长棕色头发。她喜欢维多利亚时代的英格兰，喜欢看与那个时期相关的电视剧和小说。她背负着一个沉重的秘密，正在寻找一个合适的人倾诉，但这可能引发与一个强大秘密组织的猫捉老鼠游戏。她最近刚到加尔各答。 你是拉杰什·纳哈斯玛佩提隆，一位世界著名的印度排球超级明星。你正在加尔各答散步。阿曼达看见了你，激动地尖叫起来。 首条消息：
*阿曼达跑向你，笑容满面* 拉杰什！我简直不敢相信！我是你的超级粉丝，我的卧室里挂着你的海报。
你包含的任何相关信息都可以被使用，具体效果取决于 AI 模型的能力。注意：创建角色后，你可以随时编辑这些信息，除了角色的名字。SillyTavern 将你的 API 密钥存储在服务器目录中的secrets.json文件中。默认情况下，在你输入密钥并重新加载页面后，它们不会暴露在前端界面中。如果你想通过点击 API 模块中的按钮来查看你的密钥，可以按以下步骤操作：
在config.yaml文件中将allowKeysExposure的值设置为true。
重启 SillyTavern 服务器。 尝试在用户设置面板中启用“禁用模糊效果（快速 UI）”模式。
在 UI 主题设置中启用“减少运动”选项，去除装饰性动画。
确保浏览器启用了硬件加速。
有时 AI 只会回复一句话，而你希望它写得更长一些。这通常是本地运行模型的问题。如果你只是希望机器人继续写下去，从它最近回复的地方继续，你可以发送一条空白的用户消息，方法是在输入框中什么也不输入，然后点击发送。这会强制机器人继续故事。解决方法：
减少“回复长度”设置的值。
为角色设计一个合适的“首条消息”，让他们说话时显得更加啰嗦。当 AI 模型得到有关你期望的写作风格的指导时，通常能得到很大的改善。
在角色的描述框中加入类似“喜欢多说话”或“非常啰嗦”的短语。
对你的“作者备注”或“历史指令提示”做同样的处理。
如果以上方法无效，你可以尝试开启“自动继续”（在用户设置面板中），但是这会使回复变得更慢，因为它会让 AI 一次性生成小的回复并连续发送，然后再将它们组合成一个大回复。这也可能与某些 API 选项不兼容。
这通常只是对于像 ChatGPT 或 Claude 这样的模型才会出现的问题。可以应用相反的策略：
减少“回复长度”设置的值。
给角色添加像“说话简短”或“不怎么说话”这样的短语。
给角色设计简洁的首条消息，以设定对话的语气和期望。
确保“自动继续”选项关闭。
这个问题应该在“作者备注”中通过以下短语组合来处理：
{{char}}的回复应仅是被动的，并对{{user}}的动作作出反应。
你的下一个回复应仅仅来自{{char}}的视角。
你不能为{{user}}指挥任何动作或言语。
]]></description><link>sillytavern/2-使用指南/2.2-常见问题.html</link><guid isPermaLink="false">SillyTavern/2-使用指南/2.2 常见问题.md</guid><pubDate>Sun, 22 Dec 2024 14:56:29 GMT</pubDate></item><item><title><![CDATA[1.5.1 迁移指南 1.12.0]]></title><description><![CDATA[SillyTavern 1.12.0（代号“Neo Server”更新）包括了一些可能影响你使用 SillyTavern 的关键更改。本指南将帮助你为更新做好准备，并提供进一步的指导。1.12.0 更新了 SillyTavern 处理用户数据的方式。之前，所有持久化数据都存储在与前端部分一起的 /public 目录中，这会导致混乱和潜在的故障点，并且使容器化和系统范围的应用安装变得相当困难。所有来自 /public 的持久化信息（如设置和聊天记录等，具体列表如下）已被移到一个单独的目录，该目录的路径可以配置，这样它就变得独立于 Web 服务器本身。对于兼容性目的（例如，托管扩展、全尺寸角色卡、用户图片上传等），已经设置了智能重定向，以便自动从数据目录提供用户文件。你可以通过 config.yaml 文件或者通过启动服务器时使用 --dataRoot 控制台参数，提供数据根目录的绝对路径或相对路径（相对于 SillyTavern 仓库目录）。
YAML 示例
# -- 数据配置 --
# 用户数据存储的根目录
dataRoot: C:\Users\Harry\Documents\ST-Data 控制台示例
node server.js --dataRoot="/Users/harry/ST-Data"
# 或者
npm run start -- --dataRoot="/Users/harry/ST-Data"
默认的数据根目录路径是 ./data，即 SillyTavern 仓库中的 data 目录。数据根目录路径应为 完整的绝对路径 或 完整的相对路径。你 不能 使用类似 ~ 或 %APP_DATA% 这样的路径快捷方式，因为这些是由 shell 解析的，而不是操作系统。
仅当您希望将 dataRoot 移动到默认位置之外时才需要执行此操作。如果不需要，请跳过这部分。 在第一次运行服务器之前，设置 dataRoot。运行 npm install 以便 config.yaml 文件填充新的值，或者通过控制台参数传递此值。
所有数据将迁移到一个名为 default-user 的帐户中。有关用户的更多信息，请参见 <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/6763c4f2-e358-800b-9a0d-6c7dd0bf8495#users" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/6763c4f2-e358-800b-9a0d-6c7dd0bf8495#users" target="_self">用户</a> 部分。
您不需要做任何事情！当 ST 服务器启动并检测到旧的存储格式（通过检查 /public/characters 目录的存在）时，自动迁移将会处理所有事情。在移动任何文件时，系统会在 /backups/_migration/YYYY-MM-DD（解析为当前日期）目录下创建一个自动备份，但在运行迁移之前，最好先做一个完整的手动备份。在 Docker 卷中迁移数据有点复杂，但还是相对直接的。虽然仓库中提供的 docker-compose.yml 已经更新以反映这些更改，但您可能需要调整自定义工作流/部署。步骤 1. 创建一个新的卷，并将其挂载到容器内的 /home/node/app/data 路径。不要删除 config 卷。volumes: - "./config:/home/node/app/config" - "./data:/home/node/app/data"
步骤 2. 将 config 卷中的所有文件（除了 config.yaml 文件）移动到 data 卷中 default-user 子目录下。步骤 3. 重新构建容器并启动。/public 目录与 config 卷之间的软链接不再需要，且在 Docker 容器中不再建立！以下文件和目录需要迁移。假设使用的是默认配置，表格中提供了迁移前后的路径。1.12.0 版本增加了一个（完全可选的）功能，可以在同一台服务器上创建多用户设置，允许多个用户同时使用各自完全独立的 SillyTavern 实例。用户帐户还可以设置密码，以提供额外的隐私保护。有关更多信息，请参阅 用户 文档。]]></description><link>sillytavern/1-安装/1.5.1-迁移指南-1.12.0.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.5.1 迁移指南 1.12.0.md</guid><pubDate>Sun, 22 Dec 2024 10:35:53 GMT</pubDate></item><item><title><![CDATA[1.4 Docker]]></title><description><![CDATA[本指南假设您将 SillyTavern 安装在非 root（非管理员）文件夹中。如果您将 SillyTavern 安装在 root 文件夹中，可能需要使用管理员权限执行某些命令 [sudo、doas、命令提示符（管理员权限）]。 按照 Docker 安装指南中的步骤安装 Docker：<a data-tooltip-position="top" aria-label="https://docs.docker.com/engine/install/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.docker.com/engine/install/" target="_self">Docker 安装指南</a>。
不要 安装 Docker Desktop。 <br>
按照 Docker <a data-tooltip-position="top" aria-label="https://docs.docker.com/engine/install/linux-postinstall/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.docker.com/engine/install/linux-postinstall/" target="_self">安装后指南</a> 中的 以非 root 用户管理 Docker 部分进行配置。 <br>
使用您的包管理器安装 <a data-tooltip-position="top" aria-label="https://git-scm.com/download/linux" rel="noopener nofollow" class="external-link is-unresolved" href="https://git-scm.com/download/linux" target="_self">Git</a>。 Debian 系列（如 Ubuntu/Pop! OS 等） sudo apt install git Arch Linux 系列（如 Manjaro/EndeavourOS 等） sudo pacman -S git Fedora、Red Hat 企业版 Linux（RHEL）等 sudo dnf install git 克隆 SillyTavern 仓库。 稳定版本（Release 分支） git clone &lt;https://github.com/SillyTavern/SillyTavern&gt; &amp;&amp; cd SillyTavern/docker 开发版本（Staging 分支） git clone &lt;https://github.com/SillyTavern/SillyTavern&gt; -b staging &amp;&amp; cd SillyTavern/docker 在 Docker 文件夹中运行 docker compose 命令启动服务。
docker compose up -d 执行以下 Docker 命令以获取 SillyTavern Docker 容器的 IP 地址。
docker network inspect docker_default 您将看到类似下面的输出。
[ { "Name": "docker_default", "IPAM": { "Config": [ { "Subnet": "172.18.0.0/16", "Gateway": "172.18.0.1" } ] } }
] 记下您看到的 Gateway 地址，因为这个 IP 地址很重要。 使用 sudo 打开 nano 编辑器，并执行以下命令。
sudo nano config/config.yaml 在 nano 中，找到 whitelist 部分，您应该看到类似下面的内容。
whitelist: - 127.0.0.1 在 127.0.0.1 下面新添加一行，输入您从 Docker 中复制的 IP 地址。修改后应该类似下面的样子。
whitelist: - 127.0.0.1 - 172.18.0.1 按 Ctrl+S 保存文件，然后按 Ctrl+X 退出 nano。
如果您将 Docker 网络配置为桥接模式，还可以像平常一样将外部 IP 地址添加到白名单中。 重启 Docker 容器以应用新的配置。
docker compose restart sillytavern <br>
打开新的浏览器窗口，访问 <a data-tooltip-position="top" aria-label="http://localhost:8000/" rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:8000/" target="_self">http://localhost:8000</a>。几秒钟后，您应该能看到 SillyTavern 加载成功。 享受吧！ :D <br>关于 Windows 上的 Docker
在 Windows 上使用 Docker 是非常复杂的。不仅需要在 “打开或关闭 Windows 功能” 中启用 Windows 子系统 Linux，还需要根据不同的 PC 或主板制造商配置虚拟化（Intel VT-d/AMD SVM）。有些系统可能没有此选项。
强烈建议你按照我们 <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/Installation/Windows.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/Installation/Windows.md" target="_self">Windows</a> 安装指南来安装 SillyTavern。本部分只是 Windows 上如何操作的大致说明。 <br>
按照 Docker 安装指南 <a data-tooltip-position="top" aria-label="https://docs.docker.com/desktop/setup/install/windows-install/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.docker.com/desktop/setup/install/windows-install/" target="_self">这里</a> 安装 Docker Desktop。 <br>
安装 <a data-tooltip-position="top" aria-label="https://git-scm.com/download/win" rel="noopener nofollow" class="external-link is-unresolved" href="https://git-scm.com/download/win" target="_self">Git for Windows</a>。 克隆 SillyTavern 仓库。 稳定版（Release 分支） git clone https://github.com/SillyTavern/SillyTavern &amp;&amp; cd SillyTavern/docker 开发版（Staging 分支） git clone https://github.com/SillyTavern/SillyTavern -b staging &amp;&amp; cd SillyTavern/docker 在 Docker 文件夹中运行 docker compose 命令：
docker compose up -d 执行以下 Docker 命令获取 SillyTavern Docker 容器的 IP：
docker network inspect docker_default 你将收到类似以下内容的输出：
[ { "Name": "docker_default", "IPAM": { "Config": [ { "Subnet": "172.18.0.0/16", "Gateway": "172.18.0.1" } ] } }
] 复制你看到的 Gateway 地址，这将是很重要的。 使用管理员权限打开 Notepad 或你喜欢的代码编辑器，去到 config 文件夹并打开 config.yaml。
在编辑器中，你应该会看到类似如下的内容：
whitelist: - 127.0.0.1 在 127.0.0.1 下方添加一行，将你从 Docker 中复制的 IP 地址粘贴进去。保存后，文件应该看起来像这样：
whitelist: - 127.0.0.1 - 172.18.0.1 按 Ctrl+S 保存文件，然后退出编辑器。
如果你配置了 Docker 网络为桥接模式，你也可以像平常一样将外部 IP 地址添加到白名单中。 重启 Docker 容器以应用新的配置：
docker compose restart sillytavern <br>
打开一个新的浏览器窗口，访问 <a data-tooltip-position="top" aria-label="http://localhost:8000/" rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:8000/" target="_self">http://localhost:8000</a>。几秒钟后，你应该能看到 SillyTavern 加载出来。 享受吧！ :D 虽然 macOS 与 Linux 相似，但它没有 Docker 引擎。你需要像 Windows 一样安装 Docker Desktop。同时，你还需要安装 <br><a data-tooltip-position="top" aria-label="https://brew.sh/" rel="noopener nofollow" class="external-link is-unresolved" href="https://brew.sh/" target="_self">Homebrew</a> 来在 Mac 上安装 Git。本部分是 macOS 上如何操作的大致说明。
<br>
按照 Docker 安装指南 <a data-tooltip-position="top" aria-label="https://docs.docker.com/desktop/setup/install/mac-install/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.docker.com/desktop/setup/install/mac-install/" target="_self">这里</a> 安装 Docker Desktop。 使用 Homebrew 安装 git。
brew install git 克隆 SillyTavern 仓库。 稳定版（Release 分支） git clone https://github.com/SillyTavern/SillyTavern &amp;&amp; cd SillyTavern/docker 开发版（Staging 分支） git clone https://github.com/SillyTavern/SillyTavern -b staging &amp;&amp; cd SillyTavern/docker 在 Docker 文件夹中运行 docker compose 命令：
docker compose up -d 执行以下 Docker 命令获取 SillyTavern Docker 容器的 IP：
docker network inspect docker_default 你将收到类似以下内容的输出：
[ { "Name": "docker_default", "IPAM": { "Config": [ { "Subnet": "172.18.0.0/16", "Gateway": "172.18.0.1" } ] } }
] 复制你看到的 Gateway 地址，这将是很重要的。 使用 sudo 打开 nano 编辑器，并运行以下命令：
sudo nano config/config.yaml 如果你无法运行 nano，可以通过 Homebrew 安装它，或者使用 TextEdit 编辑。
在 nano 中，找到 whitelist 部分。你应该会看到类似如下的内容：
whitelist: - 127.0.0.1 在 127.0.0.1 下方添加一行，将你从 Docker 中复制的 IP 地址粘贴进去。保存后，文件应该看起来像这样：
whitelist: - 127.0.0.1 - 172.18.0.1 按 Ctrl+S 保存文件，然后按 Ctrl+X 退出 nano。
如果你配置了 Docker 网络为桥接模式，你也可以像平常一样将外部 IP 地址添加到白名单中。 重启 Docker 容器以应用新的配置：
docker compose restart sillytavern <br>
打开一个新的浏览器窗口，访问 <a data-tooltip-position="top" aria-label="http://localhost:8000/" rel="noopener nofollow" class="external-link is-unresolved" href="http://localhost:8000/" target="_self">http://localhost:8000</a>。几秒钟后，你应该能看到 SillyTavern 加载出来。 享受吧！ :D SillyTavern 的配置文件 (config.yaml) 位于 config 文件夹中。配置该配置文件与不使用 Docker 时的配置方式没有什么不同，但你需要使用 nano 或具有管理员权限的代码编辑器来保存更改。别忘了在修改配置后重启 SillyTavern 的 Docker 容器！确保在 docker 文件夹中执行以下命令：
docker compose restart sillytavern SillyTavern 的数据文件夹位于 data 文件夹中。备份文件应该很简单，但恢复或添加内容时可能需要使用管理员权限。<br>在 Docker 中运行插件，如 <a data-tooltip-position="top" aria-label="https://github.com/Bronya-Rand/HoYoWiki-Scraper-TS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Bronya-Rand/HoYoWiki-Scraper-TS" target="_self">HoYoWiki-Scraper-TS</a> 或 <a data-tooltip-position="top" aria-label="https://github.com/SillyTavern/SillyTavern-Fandom-Scraper" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/SillyTavern/SillyTavern-Fandom-Scraper" target="_self">SillyTavern-Fandom-Scraper</a>，与在系统上直接运行没有太大区别。不过，我们需要对 Docker Compose 脚本做一些小修改才能实现这一点。如果你已经在 docker 文件夹中看到 plugins 文件夹，你可以跳过步骤 1-2。 使用 nano 或代码编辑器打开 docker-compose.yml 文件，并在 volumes 下添加以下行： volumes: - "./config:/home/node/app/config" - "./data:/home/node/app/data" - "./plugins:/home/node/app/plugins" 在 docker 文件夹中创建一个新的 plugins 文件夹。 按照插件的安装说明来安装插件。 使用 nano 或具有管理员权限的代码编辑器打开 config.yaml 文件（位于 config 文件夹内），并启用 enableServerPlugins：
enableServerPlugins: true 重启 Docker 容器。
docker compose restart sillytavern 成功！ ]]></description><link>sillytavern/1-安装/1.4-docker.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.4 Docker.md</guid><pubDate>Sun, 22 Dec 2024 10:34:48 GMT</pubDate></item><item><title><![CDATA[1.3 Android]]></title><description><![CDATA[SillyTavern 可以在 Android 手机上通过 Termux 本地运行。请参考 ArroganceComplex#2659 提供的指南：Installing and running SillyTavern locally on Android using Termux.
SillyTavern is a modified version of TavernAI with a lot of new features.
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://rentry.org/STAI-Termux" target="_self">https://rentry.org/STAI-Termux</a>
中文翻译版：<br><a data-href="在Android上使用Termux本地安装和运行SillyTavern" href="sillytavern/1-安装/在android上使用termux本地安装和运行sillytavern.html#_0" class="internal-link" target="_self" rel="noopener nofollow">在Android上使用Termux本地安装和运行SillyTavern</a>32 位 Android 需要一个外部依赖项，而该依赖项无法通过 npm 安装。使用以下命令安装它：pkg install esbuild然后按照指南中的步骤进行操作。]]></description><link>sillytavern/1-安装/1.3-android.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.3 Android.md</guid><pubDate>Sun, 22 Dec 2024 10:34:09 GMT</pubDate></item><item><title><![CDATA[1.5.2 迁移指南 1.9.0]]></title><description><![CDATA[推荐进行全新安装。 但是，如果你希望使用现有的 SillyTavern 安装副本，请按照以下说明操作。重要！ 在做任何操作之前，请务必 完全备份 你的安装。过程中可能会 丢失数据，所以不要忽视此警告。不确定哪些文件需要备份？请参阅这里： <a data-href="1.5 更新" href="sillytavern/1-安装/1.5-更新.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.5 更新</a> 在你的 SillyTavern 安装目录中打开一个终端窗口（cmd、PowerShell、Termux 等）。 输入 git fetch 然后输入 git pull 以拉取更新。 你可能会丢失设置。你是否做了备份？使用 git switch release 或 git switch staging 分别可以切换到 release 或 staging 分支。 如果没有错误，跳到下一个步骤。如果出现以下类似错误：
error: Your local changes to the following files would be overwritten by checkout: config.conf public/css/bg_load.css public/settings.json 你将看到受影响的文件列表。如果你不在乎这些设置文件被替换，可以使用 git switch -f release 或 git switch -f staging 强制切换分支。
如果你希望保留这些设置，请从备份中恢复。 输入 npm install 然后输入 npm run start 来测试是否一切正常。 享受使用！如果需要，恢复数据自备份。 如果你在旧的远程仓库中只克隆了一个单一分支（在迁移到组织仓库之前），你可能会遇到这个错误。要解决此问题，你需要添加并拉取新的远程仓库中的分支：git remote add st https://github.com/SillyTavern/SillyTavern
git fetch st
git checkout -t st/release
然后从第 5 步开始继续操作。对于 ZIP 安装用户，操作不变。只需像往常一样下载所需的分支或版本的 ZIP 文件即可。]]></description><link>sillytavern/1-安装/1.5.2-迁移指南-1.9.0.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.5.2 迁移指南 1.9.0.md</guid><pubDate>Sun, 22 Dec 2024 10:33:45 GMT</pubDate></item><item><title><![CDATA[1.2 Linux 和 Mac]]></title><description><![CDATA[对于 MacOS / Linux，所有操作都将在终端中完成。
安装 Git 和 NodeJS（安装方法会根据操作系统有所不同）
克隆仓库 对于发布分支：git clone https://github.com/SillyTavern/SillyTavern -b release
对于测试分支：git clone https://github.com/SillyTavern/SillyTavern -b staging 使用 cd SillyTavern 进入安装文件夹。
运行 start.sh 脚本，使用以下命令之一： ./start.sh
bash start.sh 打开你喜欢的终端，安装 Git
使用以下命令下载 Sillytavern 启动器：git clone https://github.com/SillyTavern/SillyTavern-Launcher.git
使用 cd SillyTavern-Launcher 进入 SillyTavern-Launcher 文件夹
通过命令 chmod +x install.sh &amp;&amp; ./install.sh 启动安装程序，并选择你想要安装的内容
安装完成后，使用命令 chmod +x launcher.sh &amp;&amp; ./launcher.sh 启动启动器 打开终端并安装 brew，使用以下命令：/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
然后使用 brew install git 安装 Git
使用以下命令下载 Sillytavern 启动器：git clone https://github.com/SillyTavern/SillyTavern-Launcher.git
使用 cd SillyTavern-Launcher 进入 SillyTavern-Launcher 文件夹
通过命令 chmod +x install.sh &amp;&amp; ./install.sh 启动安装程序，并选择你想要安装的内容
安装完成后，使用命令 chmod +x launcher.sh &amp;&amp; ./launcher.sh 启动启动器
]]></description><link>sillytavern/1-安装/1.2-linux-和-mac.html</link><guid isPermaLink="false">SillyTavern/1-安装/1.2 Linux 和 Mac.md</guid><pubDate>Sun, 22 Dec 2024 10:33:30 GMT</pubDate></item><item><title><![CDATA[1 安装]]></title><description><![CDATA[根据你的平台，按照以下安装指南进行操作：<a data-href="1.1 Windows" href="sillytavern/1-安装/1.1-windows.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.1 Windows</a><br><a data-href="1.2 Linux 和 Mac" href="sillytavern/1-安装/1.2-linux-和-mac.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.2 Linux 和 Mac</a><br><a data-href="1.3 Android" href="sillytavern/1-安装/1.3-android.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.3 Android</a><br><a data-href="1.4 Docker" href="sillytavern/1-安装/1.4-docker.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.4 Docker</a>SillyTavern 使用双分支系统进行开发，以确保所有用户都能顺畅体验。
release - 🌟 推荐大多数用户使用。这是最稳定的分支，只有在推出重大版本时才会更新，适合大多数用户。通常每月更新一次。
staging - ⚠️ 不推荐普通用户使用。此分支包含最新的功能，但请小心，它可能随时出现问题。仅适合高级用户和爱好者使用。每天更新多次。
<br><a data-href="1.5 更新" href="sillytavern/1-安装/1.5-更新.html#_0" class="internal-link" target="_self" rel="noopener nofollow">1.5 更新</a>]]></description><link>sillytavern/1-安装/1-安装.html</link><guid isPermaLink="false">SillyTavern/1-安装/1 安装.md</guid><pubDate>Sun, 22 Dec 2024 10:33:24 GMT</pubDate></item></channel></rss>